{
  "template": {
    "taskId": "9b96ca22-1985-40a7-9a59-875479222760",
    "name": "Regex Cheat Sheet",
    "repo": "Modular-Curriculum",
    "path": "content/javascript/topics/regex/readings/reading-regex-cheat-sheet.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "regex-cheat-sheet"
    ],
    "topic": "Monday - Node HTTP Servers",
    "subtopic": "Practices",
    "body": "# Regular Expressions Cheat Sheet\n\nThis article lists the most commonly-used regular expressions operators. You\ncan use it as a handy reference for later while you write regular expressions.\n\n\n## The * operator\n\nThe `*` operator is known as the **Kleene Star**, one of the [Kleene operators]. \nYou use the Kleene Star operator to match any number, **zero or more**, of the \ncharacter it follows.\n\nFor example, take the following regular expression patterns and compare them \nwith the strings below:\n\n#### Example 1: `xy*z`\n\nMatches:\n```\nxxz\nxyyyzzz\n```\n\nDoes not match:\n```\nyyy\nxyxz\n```\n\n#### Example 2: `x*yz`\n\nMatches:\n```\nxxyz\nyyyzzz\n```\n\nDoes not match:\n```\nxxx\nxyyz\n```\n\n#### Example 3: `xyz*`\n\nMatches:\n```\nxy\nxxyzzz\n```\n\nDoes not match:\n```\nzzz\nxyyz\n```\n\n\n## The ? operator\n\nThe question mark operator denotes that the character preceding `?` is an \n[optional character]. Note that when you want to use a normal question mark as a \nnormal character and NOT as a regular expression operator, you need to escape \nthe character with a forward slash like `\\?`.\n\nTake the following pattern and compare it with the strings below. Notice how \nthe `s?` portion of the expression makes the \"s\" character optional, allowing \nthe pattern to match both \"video\" and \"videos\".\n\n#### Example 1: `videos?`\n\nMatches:\n```\ncat video\ndog videos\n```\n\nDoes not match:\n```\nbird vids\nhedgehog vides\n```\n\n#### Example 2: `videos\\?`\n\nMatches:\n```\ndog videos?\nvideos? hello?\n```\n\nDoes not match:\n```\ncat video\nvideos\n```\n\nNote different effect of the regular expression with an escaped question mark \nverses a non-escaped question mark.\n\n#### Example 3: `videos? watched\\?`\n\nMatches:\n```\ndog video watched?\ncat videos watched?\n```\n\nDoes not match:\n```\nbird video watched\nhedgehog videos not watched\n```\n\n\n## The + operator\n\nThe `+` operator is known as the **Kleene Star Plus**. You use Kleene Star Plus \nto match **one or more** of the character it follows, instead of **zero or more** \nlike the Kleene Star. \n\nFor example, take the following regular expression patterns and strings below:\n\n#### Example 1: `xy+z`\n\nMatches:\n```\nxyyyzzz\nxxxyzz\n```\n\nDoes not match:\n```\nxxz\nxyxz\n```\n\nNote how \"xxz\" is matched by `xy*z` but not by `xy+z`.\n\n#### Example 2: `x+yz`\n\nMatches:\n```\nxyzzz\nxxxyzz\n```\n\nDoes not match:\n```\nyzz\nxyyz\n```\n\n#### Example 3: `xyz+`\n\nMatches:\n```\nxyzzz\nxxyz\n```\n\nDoes not match:\n```\nxy\nxxy\n```\n\n\n## The . operator\n\nThe dot operator matches any **single** character. It acts as a [wildcard] that \ncan match any single number, letter, symbol, or even whitespace. Like the \nquestion mark operator, in order to use `.` as a normal character instead of a \nregular expression operator, you need to escape the character with a forward \nslash (`\\.`).\n\nTake the example expressions and strings below:\n\n#### Example 1: `..a..`\n\nMatches:\n```\n12aa3\nbrains\n```\n\nDoes not match:\n```\n123a4\ncatch\n``` \n\n#### Example 2: `.at.`\n\nMatches:\n```\n?att\ncatch\n```\n\nDoes not match:\n```\n1a1t\natss\n``` \n\nRemember that using a forward slash before a question mark in a regular \nexpression escapes the question mark so that `?` is not interpreted as a \nregular expression operator.\n\n#### Example 3: `...\\?`\n\nMatches:\n```\n123?\n????\n```\n\nDoes not match:\n```\n123\n?cat\n``` \n\n\n## The ^ operator without brackets\n\nThe `^` operator is known as the hat operator. The hat operator can be used in \ntwo ways:\n* Without square brackets to match the start of a line.\n* Within square brackets to denote when you want to exclude characters.\n\nWhen using `^` at the beginning of a regular expression pattern, you are \nindicating a match with statements that begin with the characters in your \npattern. Note the case sensitivity in the examples below.\n\n#### Example 1: `^Dog`\n\nMatches:\n```\nDoggie daycare\nDog food\n```\n\nDoes not match:\n```\ndoG master\npuppy Dog\n``` \n\n#### Example 2: `^dog`\n\nMatches:\n```\ndoggie\ndogs\n```\n\nDoes not match:\n```\nhotdog\nsmall dog\n``` \n\n#### Example 3: `^\\?`\n\nMatches:\n```\n? hello\n???\n```\n\nDoes not match:\n```\nhi?\n\\?bye\n``` \n\n\n## The $ operator\n\nThe dollar sign operator is used to define the end of a line. Like how the `^` \nhat operator is used to specifically match the beginning characters of a line, \nthe `$` dollar sign operator is used to specifically match the end of a line. \n\nTake the following patterns and strings below:\n\n#### Example 1: `smell$`\n\nMatches:\n```\ndoggie smell\ndoggie has an interesting smell\n```\n\nDoes not match:\n```\ndoggie smells\ndoggie is smelling\n``` \n\n#### Example 2: `dog.$`\n\nMatches:\n```\nsit, dog.\ngood dog!\n```\n\nDoes not match:\n```\nsit, doggie\ndogs.\n``` \n\nIn the example below, the hat and dollar sign operators are used together to \ncreate a pattern that matches the entire \"doggie smell\" string from beginning \nto end.\n\n#### Example 3: `^doggie smell$`\n\nMatches:\n```\ndoggie smell\n```\n\nDoes not match:\n```\nbig doggie smell\ndoggie has an interesting smell\ndoggie smells\n``` \n\n\n## The [] bracket expression\n\nYou use square brackets in regular expressions to match and include characters. \nYou can do so by listing out specific characters or using an alphanumeric range. \nYou can also use the square brackets in conjunction with a hat operator to \nexclude characters.\n\nTake the following patterns that include characters in the strings below:\n\n#### Example 1: `[aei]n`\n\nMatches:\n```\nban\nhen\n```\n\nDoes not match:\n```\nundo\non\n``` \n\n#### Example 2: `robot [0-9]`\n\nMatches:\n```\nrobot 7\nbrobot 180\n```\n\nDoes not match:\n```\nrobots 7\nrobot seven\n``` \n\n#### Example 3: `\\.[dw]`\n\nMatches:\n```\n.whale\n.dog\n```\n\nDoes not match:\n```\n.cat\nwhale\n``` \n\n\n### The - inside brackets\n\nYou use the dash character to create [character ranges] within square brackets. \nMultiple ranges can be set in the same square brackets. For example, the \nexpression `[A-Za-z0-9_]` is often used to match all alphanumeric characters \nin the English language.\n\nTake the following expressions and strings below:\n\n#### Example 1: `[0-5] cats`\n\nMatches:\n```\n3 cats\n33 cats\n```\n\nDoes not match:\n```\n336 cats\n3cats\n``` \n\n#### Example 2: `[A-D][l-p][o-s]`\n\nMatches:\n```\nApple\nDose\n```\n\nDoes not match:\n```\napple\nbone\n``` \n\n#### Example 3: `[a-z][0-9][A-Z]`\n\nMatches:\n```\nh4T\nbl7XYZ\n```\n\nDoes not match:\n```\nh44T\nXYZ7bl\n``` \n\n\n### The ^ inside brackets\n\nWhen using `^` inside of square brackets, you are denoting that you want to \n[exclude characters]. In order to exclude characters, you need to wrap the \noperator and the characters you want to exclude within square brackets.\n\n#### Example 1: `[^b]`\n\nMatches:\n```\nhog\ndog\n```\n\nDoes not match:\n```\nbog\nblog\n``` \n\n#### Example 2: `[^bc]at`\n\nMatches:\n```\nchat\nrat\n```\n\nDoes not match:\n```\nhat\ncat\n``` \n\n#### Example 3: `[^bc]o[^g]`\n\nMatches:\n```\nhot\npot\n```\n\nDoes not match:\n```\ncog\nblog\n``` \n\n[Kleene operators]: https://regexone.com/lesson/kleene_operators\n[optional character]: https://regexone.com/lesson/optional_characters\n[wildcard]: https://regexone.com/lesson/wildcards_dot\n[exclude characters]: https://regexone.com/lesson/excluding_characters\n[character ranges]: https://regexone.com/lesson/character_ranges\n"
  },
  "success": true
}