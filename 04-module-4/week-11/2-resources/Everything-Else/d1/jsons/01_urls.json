{
  "template": {
    "taskId": "d4247afb-dc26-46d6-9fdc-08a8a51b17d3",
    "name": "URLs",
    "repo": "Modular-Curriculum",
    "path": "content/purely-web/topics/http-fullstack/readings/reading-five-parts-of-a-url.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "urls"
    ],
    "topic": "Monday - Node HTTP Servers",
    "subtopic": "Practices",
    "body": "# The Uniform Resource Locator (URL)\n\nWe use URLs all the time. Now, it's time to really understand how they work.\n\nFrom this reading, you should be able to\n\n* Recall where to find the definition of a URL,\n* Identify and recall the five components of a URL, and\n* Identify properly formatted URLs\n\n## The specification\n\nAlmost all good things that define how the Internet works has one or more things\ncalled IETF RFCs which define how they work. There are two acronyms there:\n\n* **IETF**: Internet Engineering Task Force\n* **RFC**: Request For Comments\n\nThe IETF is an open standards organization that creates voluntary standards to\nmaintain and improve the usability and interoperability of the Internet. Things\nlike the way travels across the Internet is created an maintained by the IETF.\nIn particular, the _Simple Mail Transfer Protocol_ is now governed by [RFC\n5321]. RFC 5321 made obsolete RFC 2821 which, in turn, made obsolete RFC 821.\nThe IETF is always working to make the Internet better with respect to its\ngrowth and usage.\n\nAn RFC is a document usually created by programmers, engineers, and scientists\nin the form of a memorandum. They publish the RFC for peer review. When enough\npeople have reviewed it, and it seems worthy of adoption, the IETF will change\nits status to \"Internet Standard\" which means that everyone should comply with\nit if they implement that standard.\n\nThe [RFC 3986], _Uniform Resource Identifier (URI): Generic Syntax_, is an\n\"Internet Standard\". That means that software applications that use URLs need to\nconform to the specification found in that document lest they be publicly shamed\nby computer programmers trying to use the non-conforming software.\n\n## What is this \"resource\" thing?\n\nWell, the standard doesn't do much for you in providing a definition of this\nword \"resource\".\n\n> This specification does not limit the scope of what might be a resource;\n> rather, the term \"resource\" is used in a general sense for whatever might be\n> identified by a URI. Familiar examples include an electronic document, an\n> image, a source of information with a consistent purpose (e.g., \"today's\n> weather report for Los Angeles\"), a service (e.g., an HTTP-to-SMS gateway),\n> and a collection of other resources. A resource is not necessarily accessible\n> via the Internet; e.g., human beings, corporations, and bound books in a\n> library can also be resources. Likewise, abstract concepts can be resources,\n> such as the operators and operands of a mathematical equation, the types of a\n> relationship (e.g., \"parent\" or \"employee\"), or numeric values (e.g., zero,\n> one, and infinity).\n\nThat influence comes from one of the authors, Dr. Roy Fielding. He has some\nstrong ideas about how the Internet works and, much to his disappointment, it\ncontinues to move away from his ideals.\n\nFor your purposes, a URL points to a (hopefully) accessible resource that can\nbe accessed, like HTML, CSS, JavaScript, and pure data in the form of JSON.\n\n## The components of a URL\n\nIn Section 3, _Syntax Components_, of RFC 3986 contains this helpful ASCII art\ngraphic to show you the components of a URL.\n\n```\n  foo://example.com:8042/over/there?name=ferret#nose\n  \\_/   \\______________/\\_________/ \\_________/ \\__/\n   |           |            |            |        |\nscheme     authority       path        query   fragment\n```\n\nHere's an explanation of each of those components.\n\n### The \"scheme\" of a URL\n\nThis section used to be called \"the protocol\", but was updated when URLs became\npart of a larger family known as URIs, Uniform Resource Identifiers, which is\nwhat RFC 3986 actually covers.\n\nYou've actually used three schemes already in class! Can you remember them?\n\nIf you replied \"http\" and \"https\", that's right! When you type an authority in\nthe browser, like \"duckduckgo.com\" or \"localhost:3000\", the browser _assumes_ that\nyou want to use HTTP, so it prepends that scheme to the authority. The browser\nwould then make requests to \"http://duckduckgo.com\" or \"http://localhost:3000\".\n\nWhen you double click on an HTML file and it opens locally in your browser, that\nis using the \"file\" scheme, meaning that it is looking for a file local to the\ncomputer! You've done this countless times during this course. You may have\nnoticed the \"file\" part in the address bar. That's the scheme it used to access\nlocal files as opposed to making an HTTP request.\n\nThis is why it was once named \"protocol\", because it was the protocol that the\nbrowser would use to _locate the resource_ using a Uniform Resource Locator.\n\n### Stuff between the scheme and authority\n\nThe standard tells us that for URLs that have an authority, the characters \"://\"\nmust exist between the scheme and the authority. That's why you have to type\nthose characters. You can blame Sir Tim Berners-Lee for that because he defined\nit in the original RFC for this subject, RFC 1738, _Uniform Resource Locators\n(URL)_.\n\n### The authority\n\nThis part of as URL is normally the domain name of the resource that has the\nresource that you're trying to access.\n\nSometimes it has a port number, too, like when you start a local HTTP server\nwith Node.js. Then, you type \"http://localhost:3000\". The authority is the\nentire \"localhost:3000\". That means that, even if \"http://localhost:3000\" and\n\"http://localhost:8081\" return the exact same content, they're considered to be\ntwo different URLs to the same content.\n\n### The path\n\nPaths are in the first part of an HTTP request, if you recall. When you click on\na link in your browser that takes you to \"https://duckduckgo.com/about\", that\nresults in an HTTP request that begins with the following line:\n\n```\nGET /about HTTP/1.1\n```\n\nThat's the path.\n\nIf the path is omitted from a URL, it is assumed to be \"/\".\n\n### The query\n\nThis is extra information sent to the browser meant for the processing of the\nrequest. For example, when you go to DuckDuckGo and perform a search for \"RFC\n3986\" by typing it into the search box, the URL that your browser is directed to\nreads \"https://duckduckgo.com/?q=RFC+3986\".\n\nThe question mark and everything that comes after it (up to the _fragment_) is\nconsidered the \"query\" of the URL. Because it's part of the URL, it means that\ndifferent values of the query part of the URL points to different resources even\nif the exact same content is returned.\n\nWith respect to URLs used for the World Wide Web, queries generated by browsers\n(and possibly by your code) will have the following format:\n\n* Entries in the query are \"URL encoded\" key-value pairs with an equal sign\n  between them\n* Entries are concatenated with the ampersand symbol\n\nWhen the key or value of an entry in a query contains a character that is not\none of the reserved or unreserved characters, then it gets \"URL encoded\". That\nprocess replaces each character a percent sign and its hexadecimal [ASCII Code].\n\nFor example, when your provide the value \"Mary$quite/contrary\" for your query\nin DuckDuckGo, the browser \"URL encodes\" the \"$\" and \"/\" because those\naren't allowable characters. Those characters' ASCII Code values are 24 and 2F,\nrespectively. That transforms the string to \"Mary%24quite%2Fcontrary\".\n\nLuckily, JavaScript has built-in methods called `encodeURI` ([link][link to\nencodeURI]) and `decodeURI` ([link][link to decodeURI]) that handles that transformation for you!\n\n### The fragment\n\nThe fragment is never sent to the server. Instead, it tells the browser to\naccess a specific section of the page after it loads. For example, if you look\nat the following link\n\nhttps://en.wikipedia.org/wiki/URL#Protocol-relative_URLs\n\nyou can see that there is a fragment value of \"#Protocol-relative_URLs\". If you\nclick on that link, the browser will load that page and, then, scroll that\nsection into view for you.\n\nUnlike with changing values in _any_ of the other sections, if you change the\nvalue in the fragment, the browser will _not_ reload the page.\n\n## Reading RFCs\n\nUnfortunately, RFCs tend to be very unappealing and technical, not fun to read\nat all. However, you should try reading them when you have a question about how\nsomething works that's governed by the IETF. You will gain insight that only\ncomes from technical documentation.\n\nAs a side note, it is a common thing for programmers to publish April Fool's\nRFCs. Their sense of humor is ... shockingly technical and dry. Here are some\ninteresting ones, for example.\n\n* [Hypertext Jeopardy Protocol (HTJP/1.0)]\n* [Design Considerations for Faster-Than-Light (FTL) Communication]\n* [TCP Option to Denote Packet Mood]\n\nYep, that's the kind of humor in deeply computer science-y groups.\n\n¯\\\\(◉◡◔)/¯\n\n## What you've learned\n\nYou learned that the five parts of a URL are\n\n1. The scheme (required),\n2. The authority (required),\n3. The path (optional),\n4. The query (optional), and\n5. The fragment (optional, not sent to the server).\n\nYou were reminded that you actually know three schemes: http, https, and file.\n\nAnd, that's it for URLs. :-)\n\n\n[RFC 3986]: https://tools.ietf.org/html/rfc3986\n[RFC 5321]: https://tools.ietf.org/html/rfc5321\n[Hypertext Jeopardy Protocol (HTJP/1.0)]: https://tools.ietf.org/html/rfc8565\n[Design Considerations for Faster-Than-Light (FTL) Communication]: https://tools.ietf.org/html/rfc6921\n[TCP Option to Denote Packet Mood]: https://tools.ietf.org/html/rfc5841\n[ASCII Code]: https://en.wikipedia.org/wiki/ASCII#Character_set\n[link to encodeURI]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n[link to decodeURI]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n"
  },
  "success": true
}