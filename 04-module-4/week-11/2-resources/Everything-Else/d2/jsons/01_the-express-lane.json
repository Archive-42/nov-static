{
  "template": {
    "taskId": "6c751593-89d1-4b37-85ec-e87daab48798",
    "name": "The Express Lane",
    "repo": "Modular-Curriculum",
    "path": "content/express/topics/routing/readings/reading-moving-into-the-express-lane-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "the-express-lane"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Moving Into the Express Lane\n\nIn an earlier lesson, you created a simple HTTP server using JavaScript and\nNode.js. That HTTP server, or web application, returned a simple response based\nupon the incoming request's URL (and HTTP method in one case). For example, a\nrequest to the URL `http://localhost:300/OK` returned a `200 OK` HTTP response\nstatus code.\n\nOverall, this was easy to do using Node's native APIs, though the requirements\nwere relatively straightforward. Using Node to create a web application with\nfeatures commonly found in websites unfortunately requires a fair amount of\nboilerplate code (i.e. verbose, repetitive code). This can slow down and\ndistract developers from working on more important tasks.\n\nEnter Express, a popular Node.js framework for building web applications.\nExpress aims to make common web development tasks easier to implement by\nreducing the amount of boilerplate code you need to write. This allows you to\nfocus on the things that makes your web application special. At the same time,\nExpress is, in its own words, unopinionated and minimalistic, giving you the\nflexibility to decide what's best for your situation.\n\nAs an introduction to Express, let's create a simple web application. Your\napplication will return a plain text response containing \"Hello from Express!\"\nfor any request to `http://localhost:8081/`.\n\nWhen you finish this article, you should be able to:\n\n* Use the `express()` function to create an Express application;\n* Recall that routing is determining how an application responds to a client\n  request to a specific URI (or path) and HTTP method combination;\n* Use the Application `get()` method to define a route that handles `GET`\n  requests;\n* Use the Response object `res.send()` method to send a plain text response to a\n  client; and\n* Use the `app.listen()` method to start a server listening for HTTP connections\n  on a specific port.\n\n## Installing Express\n\nBefore you can use Express to create a web application, you need to install it\nusing npm. Open a terminal or command prompt window, browse to your project's\nfolder, and initialize npm by running the following command:\n\n```\nnpm init -y\n```\n\nYou'll now have `package.json` and `package-lock.json` files in the root of your\nproject. The `package.json` file keeps track of your application's\ndependencies—npm packages that your application needs to successfully start and\nrun.\n\nRun the following command to install Express 4.0:\n\n```\nnpm install express@^4.0.0\n```\n\nThe `package.json` file will now list Express as a dependency:\n\n```json\n{\n \"name\": \"my-project-folder-name\",\n \"version\": \"1.0.0\",\n \"description\": \"\",\n \"main\": \"index.js\",\n \"scripts\": {\n   \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n },\n \"keywords\": [],\n \"author\": \"\",\n \"license\": \"ISC\",\n \"dependencies\": {\n   \"express\": \"^4.17.1\"\n }\n}\n```\n\n> At the time of this writing, the latest version of Express 4.0 is `4.17.1`.\n> While newer minor or patch versions of Express 4.0 should work fine, newer\n> major versions (5.0+) might not work as expected. The caret character (`^`)\n> the precedes the version number in the `package.json` file (`^4.17.1`)\n> instructs npm to allow versions greater than `4.17.1` and less than `5.0.0`.\n\n### Git and the `node_modules` folder\n\nIn an earlier lesson, you learned that when using `npm install` to install an\nnpm package locally into your project, npm downloads and installs the specified\npackage to the `node_modules` folder. Over time, as you install dependencies,\nthe `node_modules` folder tends to grow to be very large, containing many\nfolders and files.\n\nIf you're using Git for source control, it's important to add a `.gitignore`\nfile to the root of your project and add the entry `node_modules/` so that the\n`node_modules` folder won't be tracked by Git.\n\n> As alternative to creating your own `.gitignore` file, you can use GitHub's\n> comprehensive [`.gitignore` file for Node.js projects][github node gitignore].\n\n## Creating an Express application\n\nNow you're ready to create your Express application!\n\nAdd a file named `app.js` to your project folder and open it in your code\neditor. Use the `require` directive to import the `express` module and assign it\nto a variable named `express`. The `express` variable references a function\n(exported by the `express` module) that you can call to create an Express\napplication. Assign the return value from the `express` function call to a\nvariable named `app`:\n\n```js\nconst express = require('express');\n\n// Create the Express app.\nconst app = express();\n```\n\nThe `app` variable holds a reference to an Express Application (`app`) object.\nYou'll call methods on the `app` object as you build out your web application.\n\n## Handling requests\n\nNext, you need to configure the routing for your application.\n\nThe process of configuring routing is determining how an application should\nrespond to a client request to an endpoint—a  specific URI (or path) and HTTP\nmethod combination. For example, when a client makes a `GET` request to your\napplication by browsing to the URL `http://localhost:8081/`, it should return\nthe plain text response \"Hello from Express!\".\n\n> **Do you remember the parts of a URL?** In the URL `http://localhost:8081/`,\n> the protocol is `http`, the domain is `localhost`, the port is `8081` (we'll\n> see in a bit how to configure the port for your application), and the path is\n> `/`.\n\nThe Express Application (`app`) object contains a collection of methods for\ndefining an application's routes:\n\n* `get()` - to handle `GET` requests\n* `post()` - to handle `POST` requests\n* `put()` - to handle `PUT` requests\n* `delete()` - to handle `DELETE` requests\n\n`GET` and `POST` are two of the most commonly used HTTP methods, followed by\n`PUT` and `DELETE`.\n\n> See the Express documentation for a [complete list of the available routing\n> methods][routing methods].\n\nTo define a route to handle `GET` requests, call the `app.get()` method passing\nin the route path and a route handler function:\n\n```js\napp.get('/', (req, res) => {\n  // TODO Send a response back to the client.\n});\n```\n\nExpress provides a lot of flexibility with the format of the route path. A route\npath can be a string, string pattern, regular expression, or an array containing\nany combination of those. For now, you'll just use a string, but in later\narticles you'll see how to use the other options.\n\nThe route handler function is called by Express whenever an incoming request\nmatches the route. The function defines two parameters, `req` and `res`, giving\nyou access respectively to the Request and Response objects. The Request (`req`)\nobject is used to get information about the client request that's currently\nbeing processed. The Response (`res`) object is used to prepare a response to\nreturn to the client.\n\nTo send a plain text response to the client, call the `res.send()` method\npassing in the desired content:\n\n```js\napp.get('/', (req, res) => {\n  res.send('Hello from Express!');\n});\n```\n\nHere's the code for your application so far:\n\n```js\nconst express = require('express');\n\n// Create the Express app.\nconst app = express();\n\n// Define routes.\n\napp.get('/', (req, res) => {\n  res.send('Hello from Express!');\n});\n```\n\n## Listening for HTTP connections\n\nGreat job so far! Now you need to start the server listening for HTTP\nconnections from clients. To do that, call the `app.listen()` method passing in\nthe desired port to use and an optional callback function:\n\n```js\nconst port = 8081;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\nThe callback function will be called when the server has started listening for\nconnections. Logging a message to the console gives you an easy way to see when\nthe server is ready for testing.\n\nHere's the complete code for your application:\n\n```js\nconst express = require('express');\n\n// Create the Express app.\nconst app = express();\n\n// Define routes.\n\napp.get('/', (req, res) => {\n  res.send('Hello from Express!');\n});\n\n// Define a port and start listening for connections.\n\nconst port = 8081;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\n## Testing your application\n\nTo test your application, open a terminal or command prompt window, browse to\nyour project's folder, and run the following command:\n\n```\nnode app.js\n```\n\nIf your application starts successfully, you'll see the text \"Listening on port\n8081…\" displayed in the terminal or command prompt window. Next, open a web\nbrowser and browse to the address `http://localhost:8081/`. You should see the\ntext \"Hello from Express!\" displayed in the browser.\n\nIf you see the expected text, congrats! If you don't, double check the\nfollowing:\n\n* Make sure that you started your application by running the command `node\n  app.js`.\n* Double check that the URL you entered into your browser's address bar is\n  `http://localhost:8081/`.\n* Check the terminal or command prompt window to see if an error is occurring.\n\n## What you learned\n\nIn this article, you learned\n\n* how to use the `express()` function to create an Express application;\n* that routing is determining how an application responds to a client request to\n  a specific URI (or path) and HTTP method combination;\n* how to use the Application `get()` method to define a route that handles `GET`\n  requests;\n* how to use the Response object `res.send()` method to send a plain text\n  response to a client; and\n* how to use the `app.listen()` method to start a server listening for HTTP\n  connections on a specific port.\n\n## See also…\n\nAs you learn about Express, you'll find it helpful to explore Express' official\ndocumentation at [expressjs.com][express website].\n\n[routing methods]: https://expressjs.com/en/4x/api.html#routing-methods\n[express website]: https://expressjs.com/\n[github node gitignore]: https://github.com/github/gitignore/blob/master/Node.gitignore\n"
  },
  "success": true
}