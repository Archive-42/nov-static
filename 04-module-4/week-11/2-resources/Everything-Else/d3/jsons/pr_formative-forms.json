{
  "template": {
    "taskId": "8d67df0b-d19a-458f-b180-8ac357c8c055",
    "name": "Formative Forms Project",
    "repo": "Modular-Curriculum",
    "path": "content/express/topics/html-forms/projects/html-forms/README.md",
    "type": "Project",
    "timeEstimate": 14400,
    "urls": [
      "formative-forms"
    ],
    "topic": "Wednesday - Form Handling",
    "subtopic": "Practices",
    "download": "",
    "solution": "",
    "body": "# Formative Forms\n\nToday you'll be going through the formative experience of building out an\nExpress application that uses HTML forms!\n\nThis application allows users to create two types of user accounts: a normal\nuser account and an interesting user account. It keeps track of all of the users\nin a table on the home page.\n\nWhen you're done with the project, your web application should have the\nfollowing features:\n\n1. Site-wide navigation elements that allows users to navigate between the home\n   page and the two other pages.\n2. A table that shows all of the existing users.\n3. A form that can be used to create a normal user account.\n4. A form that can be used to create an interesting user account.\n\n## Getting started\n\n* Clone the starter project from\n  https://github.com/appacademy-starters/formative-forms-starter\n* Run `npm install` to install the dependencies\n* Run `npm test` to run the tests for the project\n\n## Phase 0: Intro to the skeleton directory\n\nThe skeleton directory has a bare bone `index.js` file that renders \"Hello\nWorld!\" when a user land on `localhost:3000/`. There's also a `users` array that\nalready has one user created for you. Throughout the project, as you add new\nusers, you'll do so by pushing the new users into this array.\n\nIt also has a `layout.pug` template that your other templates can extend. The\n`layout.pug` imports Bootstrap stylesheets in the `head` element. Feel free to\nmake your website look fancy with the available Bootstrap styling by adding\nBootstrap class names to your elements.\n\nFor example, here is the documentation on how to\n[add Bootstrap styles to a form element] by adding the Bootstrap classes to each\nelement.\n\n## Phase 1: Home page\n\nPass each of the specs in `01_home.test.js` file. Running `npm test` will run\nevery single test across all five test files. If you only want to run the specs\nin `01_home.test.js`, run `npm test -- --grep home`. The `--grep` flag only\nexecutes tests with names that match the passed in option value.\n\nOverall, this project will give you ample opportunity to get familiar with\nreading specs and then building out features to satisfy those specs. Be sure to\ncheck the specs often for guidance!\n\nIn this first phase, create an `index.pug` template and update the `app.get(\"/\")`\nroute so that it renders the index template. Remember to render the `users`\narray so that it's available in the `index.pug` template.\n\n[Extend] the `index.pug` template to inherit from `layout.pug`. Declare a block\nnamed \"content\" and add a table to render existing users. Follow the specs to\ncreate an `h2` header for the table.\n\n> **Hint:** Read the error messages to see the expected header name.\n\nCreate table headers and columns for each user's information.\n\n> **Hint:** Take a look at 01_home.test.js to view what columns are expected in\n> the table.\n\nAt the top of the `body` element in `layout.pug`, add navigation links so that\nusers can easily navigate between the home page (\"/\" route), normal user\ncreation form (\"/create\" route), and interesting user creation form\n(\"/create-interesting\" route).\n\n## Phase 2: Create the normal user form\n\nPass each of the specs in `02_create_form.test.js`. You can run the specs in\nthis file by running `npm test -- --grep create-normal`.\n\nIn this phase, go ahead and set up this route to use the [csurf] middleware to\nrender a CSRF token in a hidden input field. Be sure to in the `{cookie: true}`\noptions when creating the middleware function.\n\nBecause your application will be using cookies to store the secret CSRF value,\ngo ahead and also set up the [cookie-parser] middleware as an application-wide\nmiddleware function.\n\nSet up a route so that when users land on `/create`, a form renders with the\nfollowing fields:\n\n- `_csrf` **(hidden field)**\n- `firstName`\n- `lastName`\n- `email`\n- `password`\n- `confirmedPassword`\n\nBe sure to set correct input `type` and `name` attributes, and also remember to\n[add a label] correlating to each input field's `name`.\n\nMake sure your `_csrf` field has an appropriate value from your middleware. At\nthis point, remove some duplication from your Pug template by leveraging\n[mixins]. Create a mixin to easily generate `label` and `input` element pairs.\nThink of how you would create a mixin using `input` attributes as parameters.\n\n## Phase 3: Submitting the form\n\nPass each of the specs in `03_form_submit.test.js`. You can run the specs in\nthis file by running `npm test -- --grep form-submit`.\n\nBegin by setting up a `\"/create\"` route to handle POST requests. Now that you\nare handling POST requests, you'll need access to `req.body`. Have your\napplication use the `express.urlencoded` middleware to decode the form's request\nbody string into data that can be accessible in `req.body`.\n\nThe next step is to protect this route from CSRF attacks by using the middleware\nfunction that you set up using the [csurf] library. Make sure you've included\nthe middleware function in both of the GET and POST `\"/create\"` routes.\n\nNow set up data validations and create an `errors` array within the\n`app.post(\"/create\")` route. You want to validate whether the user has provided\na `firstName`, `lastName`, `email`, and `password`. Read the error messages from\nthe specs to determine what messages to `push` into your `errors` array.\n\nTime to update the `create.pug` template to render the error messages. Start by\ncreating an unordered list at the top of your `create-form.pug` block. Inside of\nthe unordered list, add a paragraph element with the following content:\n`The following errors were found:`. Now, iterate through each error to create\nlist items with the error messages. Only render errors if they are present in\nthe `errors` array. How can you determine if there are errors present?\n\nYou'll want to be sure that you're pre-filling each input field with\nalready-submitted values so that users don't have to fill out all of the fields\nagain whenever there are errors. How can you update your `input` elements so\nthat already-submitted values are still showing even after a form submission\nfails a data validation?\n\n## Phase 4: Create interesting user form\n\nPass each of the specs in `04_create_interesting_form.test.js`. You can run the\nspecs in this file by running `npm test -- --grep create-interesting`.\n\nNotice how this form includes all of the fields from the first form. Reduce code\nduplication by leveraging the Pug [includes] feature.\n\nOne way you could refactor is to create an `includes` directory inside your\nviews and make the following files:\n\n- `views/includes/errors.pug`\n- `views/includes/form-inputs.pug`\n\nNow create a `create-interesting.pug` template for your \"interesting user form\"\nand refactor your `create.pug` template to leverage the Pug `includes` feature.\nStart by dividing your existing `create.pug` template into `errors.pug` and\n`form-inputs.pug`. Think of how to use the templates to keep your code DRY.\n\n## Phase 5: Submit create interesting user form\n\nPass each of the specs in `05_interesting_form_submit.test.js`. You can run the\nspecs in this file by running `npm test -- --grep submit-interesting`.\n\nGo ahead and add validations and write error messages for this new form. Because\nthis new form still has the same base fields as the other form, be sure to still\nrun the same validations that you are currently running for the\n`app.post('/create')` route. If you have not done so already, go ahead and move\nall of the validations for the first form into a custom middleware function that\nboth `app.post('/create')` and `app.post('/create-interesting`) can use. Be sure\nto store those errors on the `req` object so that they can be used in a later\nmiddleware function.\n\nOnce you've ensured that your base fields are being validated, go ahead and add\nvalidations for the new `age` and `favoriteBeatle` fields. Follow the error\nmessages in the specs to determine what your error messages should be. Please\nwrite these new validations in a custom middleware function.\n\nCreate [mixins] for the `favoriteBeatle` options. How can you make sure that a\nuser's `favoriteBeatle` is automatically selected when a form with errors\nre-renders upon submission?\n\nHow can you make sure a user's `iceCream` checkbox accurately renders whether\nthe user likes ice cream upon an unsuccessful form submission? When saving the\nuser, be sure to use the checkbox's value (ex: \"on\") to convert the\n`user.iceCream` property to a boolean.\n\nFinally, make sure your `index.pug` template is also rendering your new user\nproperties.\n\nYou've made it! Confirm that your whole app works as expected by running\n`npm test`.\n\n## Bonus\n\nIn a production-level Express application, you'll likely use a library to help\nhandle most of your data validation. One of the most popular data validation\nlibraries is the [express-validator] library, which gives you a wide range of\nrobust validations right out of the box.\n\nInstall this dependency and use it to add a validation to check that the user\npassword being submitted is at least 5 characters long and that it at least has\none number in it.\n\nThen, go ahead and migrate any validations that you had on the `age` and\n`favoriteBeatle` fields to use the [express-validator] library instead.\n\nOnce you're done with those fields, continue migrating all other validations to\nuse [express-validator] and add validations to check _all_ user input (e.g,\nchecking that a valid email is submitted).\n\n[add bootstrap styles to a form element]: https://getbootstrap.com/docs/4.4/components/forms/\n[extend]: https://pugjs.org/language/inheritance.html\n[add a label]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\n[csurf]: https://www.npmjs.com/package/csurf\n[cookie-parser]: https://www.npmjs.com/package/cookie-parser\n[mixins]: https://pugjs.org/language/mixins.html\n[includes]: https://pugjs.org/language/includes.html\n[express-validator]: https://express-validator.github.io/docs/\n"
  },
  "success": true
}