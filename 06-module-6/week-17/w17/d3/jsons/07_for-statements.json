{
  "template": {
    "taskId": "8516deb9-7b63-471f-8391-a46510c0bfa0",
    "name": "For Statements",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/structures/readings/reading-for-statements-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "for-statements"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# The For Loop\n\nJavaScript has three versions of the `for` loop for you to use. Those are\n\n* `for (;;)` which allows you to loop while counting\n* `for (..in..)` which allows you to loop over the indices of a list\n* `for (..of..)` which allows you to loop over the entries of a list\n\nPython says, \"That's just too much.\" In this article, you learn about the\nhumble `for` loop that Python has.\n\n## The for loop in general\n\nIn Python, there is only one `for` loop. In code, a `for` statement always\nincludes the following:\n\n* The `for` keyword\n* A variable name\n* The `in` keyword\n* An iterable of some kind\n* A colon\n* Starting on the next line, an indented block of code (called the `for` clause)\n\nThe `for` loop in Python is very much like the `for (..of..)` loop in\nJavaScript. There is _no_ counting version of the `for` loop in Python like the\n`for(;;)` version in JavaScript. Instead, you use the `range` function to create\nan iterable \"filled\" with numbers. The following sections show how to use the\n`for` loop with different kinds of iterables.\n\nJust like with the `while` loop, you can use `break` and `continue` statements\ninside `for` loops as well. The `continue` statement will continue to the next\nvalue of the `for` loop’s counter, as if the program execution had reached the\nend of the loop and returned to the start. In fact, you can use `continue` and\n`break` statements only inside `while` and `for` loops. If you try to use these\nstatements elsewhere, Python will give you an error.\n\n\n## The for loop and the range function\n\nRecall that the `range` function returns something like a list of numbers. The\nfollowing code uses the `range` function as the iterable for the `for` loop. See\nif you can figure out what it does.\n\n```python\nprint('My name is')\nfor i in range(5):\n   print('Carlita Cinco (' + str(i) + ')')\n```\n\nThe code in the `for` loop’s clause is run five times. The first time it is run,\nthe variable `i` is set to 0. The `print` function in the clause will print\n\"Carlita Cinco (0)\". After Python finishes an iteration through all the code\ninside the `for` loop’s clause, the execution goes back to the top of the loop,\nand the `for` statement gets the next value from the `range` and sets it to `i`.\nThis is why `range(5)` results in five iterations through the clause, with `i`\nbeing set to 0, then 1, then 2, then 3, and then 4.\n\nAs another `for` loop example, consider this story about the mathematician Karl\nFriedrich Gauss. When Gauss was a boy, a teacher wanted to give the class some\nbusywork. The teacher told them to add up all the numbers from 0 to 100. Young\nGauss came up with a clever trick to figure out the answer in a few seconds, but\nyou can write a Python program with a `for` loop to do this calculation for you.\n\n```python\ntotal = 0\nfor num in range(101):\n    total += num\nprint(total)\n```\n\nThe result should be 5,050. When the program first starts, the `total` variable\nis set to 0. The `for` loop then executes `total = total + num` 100 times. By\nthe time the loop has finished all of its 100 iterations, every integer from 0\nto 100 will have been added to total. At this point, `total` is printed to the\nscreen. Even on the slowest computers, this program takes less than a second to\ncomplete.\n\n## The for loop with a list\n\nNow that you've seen lists in Python, you probably wondered how you loop over\nthem because, as you've come to find out in programming, looping over a list is\na really common thing. Here's how you do it, once with a list literal (which\nwon't happen often), and once with a variable that contains a list (which you'll\ndo _very_ often).\n\n```python\nfor c in ['a', 'b', 'c']:\n    print(c)\n\nlst = [0, 1, 2, 3]\nfor i in lst:\n    print(i)\n```\n\nWhat the previous `for` loop actually does is loop through its clause with the\nvariable `i` set to a successive value in the `[0, 1, 2, 3]` list in each\niteration.\n\nA common Python technique is to use `range(len(someList))` with a `for` loop to\niterate over the indexes of a list. Here's an example of that.\n\n```python\nsupplies = ['pens', 'staplers', 'flame-throwers', 'binders']\nfor i in range(len(supplies)):\n    print('Index ' + str(i) + ' in supplies is: ' + supplies[i])\n```\n\nThat will print out the following.\n\n```\nIndex 0 in supplies is: pens\nIndex 1 in supplies is: staplers\nIndex 2 in supplies is: flame-throwers\nIndex 3 in supplies is: binders\n```\n\nUsing `range(len(supplies))` in the previously shown `for` loop is handy because\nthe code in the loop can access the index (as the variable `i`) and the value at\nthat index (as `supplies[i]`). Best of all, `range(len(supplies))` will iterate\nthrough all the indexes of supplies, no matter how many items it contains.\n\nSometimes you will have a list of lists. You can loop over those _and_\ndestructure at the same time just like you can do in JavaScript. As a matter of\nfact, Python has had this feature since its inception whereas JavaScript only\nrecently got it.\n\n```python\nl = [[1, 2], [3, 4], [5, 6]]\nfor a, b in l:\n    print(a, ', ', b)\n\n# Prints 1, 2\n# Prints 3, 4\n# Prints 5, 6\n```\n\n## The for loop with a dictionary\n\nThere are three dictionary methods that will return list-like values of the\ndictionary’s keys, values, or both keys and values: `keys()`, `values()`, and\n`items()`. The values returned by these methods are not true lists, they cannot\nbe modified and do not have an append() method. But, like the `range`, they're\n_list-like_ and can be used with a `for` loop.\n\nHere, a `for` loop iterates over each of the values in the spam dictionary.\n\n```python\nspam = {'color': 'red', 'age': 42}\nfor v in spam.values():\n    print(v)\n\n# Prints red\n# Prints 42\n```\n\nA `for` loop can also iterate over the keys.\n\n```python\nfor k in spam.keys():\n    print(k)\n\n# Prints color\n# Prints age\n```\n\nFinally, a `for` loop can iterate over both keys and values. In this next code,\nthe `items()` method returns a list-like object that contains _tuples_ that\ncontain each key and value. That means you can assign a single variable to the\ntuple, or destructure it.\n\n```python\n# Getting tuples\nfor i in spam.items():\n    print(i)\n\n# Prints ('color', 'red')\n# Prints ('age', 42)\n\n\n# Destructuring to values\nfor k, v in spam.items():\n    print('Key: ' + k + ' Value: ' + str(v))\n\n# Prints Key: age Value: 42\n# Prints Key: color Value: red\n```\n\n## The for loop with a string\n\nBecause strings are also iterable, you can easily loop over every character in\na string.\n\n```python\nfor c in \"abcdefg\":\n    print(c)\n\n# Prints a\n# Prints b\n# Prints c\n# Prints d\n# Prints e\n# Prints f\n# Prints g\n```\n\n## What you've learned\n\nWorking with `for` loops in Python is easier than in JavaScript because there\nis only one kind of `for` loop. It merely loops over each of the values in an\n_iterable_, which is just a list-like object. You can destructure in the\nassignment of the variables if the iterable contains things that can be\ndestructured. Overall, the `for` loop in Python is pretty handy.\n"
  },
  "success": true
}