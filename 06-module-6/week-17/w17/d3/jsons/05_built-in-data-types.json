{
  "template": {
    "taskId": "9286f0ab-9a9c-4a59-bc13-ac63c4f30a33",
    "name": "Built-In Data Types",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/structures/readings/reading-data-types-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "built-in-data-types"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Built-in Data Types\n\nWhen you complete this lesson, you should be able to\n- Declare a `list`, `tuple`, `range`, `dict`ionary and `set` in Python\n\n## Lists\n\nLists in Python are very similar to arrays in JavaScript. They are typically\nused to store a sequences of items that are all the same type (homogeneous).\n\nLists are mutable, meaning they can be changed. Primarily this means sorting,\nas well as adding and removing items.\n\nLists can be instantiated with square brackets.\n```python\nempty_list = []\ndepartments = ['HR','Development','Sales','Finance','IT','Customer Support']\n```\n\nOften you will see an empty list instantiated using the _list_ built-in.\n```python\nspecials = list()\n```\n\nYou can test if a value is in a list by using the `in` operator.\n\n```python\nprint(1 in [1, 2, 3]) #> True\nprint(4 in [1, 2, 3]) #> False\n```\n\n## Tuples\n\nTuples are very similar to lists in Python. The primary difference is that they\nare _immutable_, which means the tuple cannot be changed after creation.\n\nTuples are instantiated using parentheses.\n```python\ntime_blocks = ('AM','PM')\n```\n\nAlthough sometimes you may see tuples instantiated without parentheses.\n```python\ncolors = 'red','blue','green'\nnumbers = 1, 2, 3\n```\n\nThe _tuple_ built-in may be used to convert another iterable (like string or\nlist) to a tuple.\n```python\ntuple('abc')        # returns ('a', 'b', 'c')\ntuple([1,2,3])      # returns (1, 2, 3)\n```\n\nCommon use cases for _tuples_ may remind you of constants.\n```python\nweekdays = ('M','T','W','Th','F')\ncontactMethods = ('Email', 'SMS (Text)', 'Both')\n```\n\nYou can test if a value is in a tuple by using the `in` operator.\n\n```python\nprint(1 in (1, 2, 3)) #> True\nprint(4 in (1, 2, 3)) #> False\n```\n\n## Ranges\n\nA _range_ is simply a list of numbers in order which can't be changed\n(immutable). Ranges are often used with `for` loops.\n\nA `range` is declared using one to three parameters\n* start - optional (`0` if not supplied) - first number in the sequence\n* stop - required - next number past the last number in the sequence\n* step - optional (`1` if not supplied) - the difference between each number in\n  the sequence\n\nFor example\n```python\nrange(5)            # [0, 1, 2, 3, 4]\nrange(1,5)          # [1, 2, 3, 4]\nrange(0, 25, 5)     # [0, 5, 10, 15, 20]\nrange(0)            # [ ]\n```\n\nNotice that the _stop_ number is NOT in the range. This sometimes trips up\ndevelopers when they first start working in Python, so it may be worth\nadding to your notes.\n\nPython is very friendly to negative numbers, and that also applies to ranges.\n\n```python\nrange(0, -5, -1)    # [0, -1, -2, -3, -4]\nrange(5, 0, -1)     # [5, 4, 3, 2, 1]\n```\n\n## Dictionaries\n\nA _dictionary_ is a mappable collection where a hashable value (a.k.a. **hash**)\nis used as a key to reference an object stored in the dictionary. Dictionaries\noften hold arbitrary objects which are quite different (heterogenous).\nDictionaries are mutable and may be changed at any time.\n\nOften a dictionary is declared with curly braces or the `dict` built-in.\n```python\na = {'one':1, 'two':2, 'three':3}\nb = dict(one=1, two=2, three=3)\n```\n\nNotice in the example above how the `dict` built-in can is using named\nparameters as the keys.\n\nSometimes you will have tuples you want to put into a dictionary. That is also\ndone with the `dict` built-in. Here's an example using a list of tuples.\n```python\nc = dict([('two', 2), ('one', 1), ('three', 3)])\n```\n\nA useful benefit of dictionaries in Python is that it doesn't matter how the\ndictionary is defined, if the keys and values are the same, the dictionaries\nare considered equal. Using a, b and c from above...\n```python\nprint(a == b)        # => True\nprint(a == c)        # => True\nprint(b == c)        # => True\nprint(a == b == c)   # => True\n```\n\nRemember dictionaries can store any kind of data.\n```python\ncomplex = {\n   'name': 'Bob Smith',                                  # string\n   'age': 57,                                            # integer\n   'weight': 215.4,                                      # float\n   'height': (5, 9.5),                                   # tuple (feet, inches)\n   'hobbies': {'biking', 'reading', 'playing guitar'},   # set\n   'exercise_routine': [                                 # list of tuples\n        ('Monday','Riding','1 hour'),\n        ('Tuesday','Weightlifting','45 minutes'),\n        ('Wednesday','Riding','1 hour 30 minutes'),\n        ('Thursday','Walking','30 minutes'),\n        ('Friday','Weightlifting','45 minutes'),\n        ('Saturday','Riding','3 hours'),\n        ('Sunday','',''),\n    ]\n}\n```\n\nYou can test if a key exists in a dictionary by using the `in` operator.\n\n```python\nprint(1 in {1: \"one\", 2: \"two\"})    #> True\nprint(\"1\" in {1: \"one\", 2: \"two\"})  #> False\nprint(4 in {1: \"one\", 2: \"two\"})    #> False\n```\n\n## Sets\n\nA set is an unordered collection of distinct objects. Specifically, the\nobjects need to hashable. And they will always be unique, meaning duplicate\nitems are automatically dropped from the set.\n\nBecause of their special properties, sets have three common uses in Python\n* removing duplicates\n* membership testing (that is, finding out if an object is included)\n* mathematical operators: intersection, union, difference, symmetric difference\n\n(You'll learn more about how to use sets in the next lesson.)\n\nA standard _set_ is mutable. Python has an immutable variation called _frozenset_.\n\nSets can be created by putting comma-separated values inside braces.\n```python\nschool_bag = {'book','paper','pencil','pencil','book','book','book','eraser'}\nprint(school_bag)           # => {'book','pencil','eraser','paper'}\n```\n\nNotice how there's no `:` like dictionaries use.\n\nWhen using the `set` constructor on a string, the letters are automatically\nput into the set.\n\n```python\nletters = set('abracadabra')\nprint(letters)              # {'a', 'r', 'b', 'c', 'd'}\n```\n\n**Note:** You are not guaranteed the order of the values in the set.\n\nYou can test if a value is in a set by using the `in` operator.\n\n```python\nprint(1 in {1, 1, 2, 3})  #> True\nprint(4 in {1, 1, 2, 3})  #> False\n```\n\n## What you've learned\n\n- Declare a `list`, `tuple`, `range`, `dict`ionary and `set` in Python\n- How to use the `in` operator to test if something exists in a list or set\n- How to use the `in` operator to test if something exists as a key in a\n  dictionary\n"
  },
  "success": true
}