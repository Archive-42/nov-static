{
  "template": {
    "taskId": "e4802ee0-42be-403d-9f4a-986046d32a38",
    "name": "Functions",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-functions-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "functions"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Functions\n\nFunctions are the fundamental building blocks of Python and mastering them is a\nbig step on the road to Python mastery.\n\nWhen you finish this article, you should be able to\n- Describe how to define a function in Python\n- Demonstrate how to invoke a function\n- Write a function which accepts parameters and returns a value\n\n## Writing functions\n\nAs in JavaScript, a *function* is a set procedure that will run when called\nby name. Functions are **defined** once and **invoked** as many times as needed.\n\nA **function definition** consists of\n- The `def` keyword\n- The *name* of the function\n- A list of **parameters** to the function enclosed in parentheses, `()`\n- A colon, `:`,  at the end of the line\n- One tab indentation for the block of code to run (one or more lines)\n\n```python\ndef printCopyright():\n    print(\"Copyright 2020. Me, myself and I. All rights reserved.\")\n```\n\nIn other words JavaScript developers can remember this as follows:\n- `function` is replaced by `def`, the `{ }` are replaced with `:`\n- indentation is critical to the program running properly\n\n## Passing parameters and returning a value\n\nAs in JavaScript, parameters can be passed in and a value returned. Invoking\na function is as simple as calling it with the proper number of arguments.\n\n```python\ndef average(num1, num2):\n    return (num1/num2)\n\nprint(average(6, 2))        # => 3.0\n```\n\nThe invocation `average(6, 2)` is known as _positional arguments_ usage because\nyou rely on the position of the argument to specify which parameter it is, 6 is\nfor `num1` and 2 is for `num2`.\n\n## Default parameter values\n\nLike JavaScript, Python can have default values for the parameters of its\nmethods. The following function has a default parameter for the \"saying\"\nparameter of the `greeting` function.\n\n```python\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(\"Monica\")\n# Hello Monica\n\ngreeting(\"Barry\", \"Hey\")\n# Hey Barry\n```\n\nParameters with default values must _always_ come after parameters that do not\nhave default values. The following code results in a `SyntaxError`.\n\n```python\n# THIS IS BAD CODE AND WILL NOT RUN\ndef increment(delta=1, value):\n    return delta + value\n```\n\n## Keyword arguments (named parameters)\n\nUnlike JavaScript, Python has the built-in ability to specify arguments _by\nname_ without resorting to destructuring. You can just write the name of the\nparameter and an equal sign before the value you pass as a parameter. By\nspecifying the names of the arguments, you can provide them in any order.\n\n```python\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(name=\"Monica\")\n# Hello Monica\n\ngreeting(name=\"Barry\", saying=\"Hey\")\n# Hey Barry\n\ngreeting(saying=\"Hey\", name=\"Barry\")\n# Hey Barry\n```\n\n**Pro-tip:** Idiomatic Python will see developers use positional arguments for\nthe values of parameters with no default values, and keyword arguments for\nparameters that do have default values. For example, the above `greeting`\nfunction would normally be seen used like this.\n\n```python\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\n# name has no default value, so just provide the value\n# saying has a default value, so use a keyword argument\ngreeting(\"Monica\", saying=\"Hi\")\n```\n\n## Anonymous functions\n\nIn JavaScript, you could just create functions and assign them to variables.\nPython has a special keyword, `lambda`, to allow you to create anonymous\nfunctions that you can assign to variables.\n\nThe so-called `lambda` functions in Python act like arrow functions in\nJavaScript.\n\nIn JavaScript, to create a function that uppercases a string, you could do\nsomething like this:\n\n```js\nconst toUpper = s => s.toUpperCase();\n```\n\nIn Python, you would do something similar, but with the `lambda` keyword.\n\n```python\ntoUpper = lambda s: s.upper()\n```\n\nLambda functions are _meant to be one-line functions_. The only way to spread\nthem across lines is to wrap them in parentheses. However, it is greatly\ndiscouraged to do so.\n\n```python\ntoUpper = (\n    lambda s:\n        s.upper())\n```\n\n## Errors\n\nLike elsewhere in Python, if you make a mistake, then an error will be thrown.\n\nFor example, if the number of arguments sent in doesn't match the number of\nparameters in the definition, then a `TypeError` occurs.\n\nNot enough arguments:\n```plaintext\nTypeError: average() missing 1 required positional argument: 'num2'\n```\n\nToo many arguments:\n```plaintext\nTypeError: average() takes 2 positional arguments but 3 were given\n```\n\n## What you learned\n\n- Describe how to define a function in Python\n- Demonstrate how to invoke a function\n- Write a function which accepts parameters and returns a value\n"
  },
  "success": true
}