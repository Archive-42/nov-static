{
  "template": {
    "taskId": "7e25d63c-9de1-4b5d-8385-379ba10044f9",
    "name": "String Data Type",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-strings-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "string-data-type"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# The String Data Type\n\nStrings in Python are very similar to strings in JavaScript.\n\nWhen you finish this article, you should be able to:\n- Write strings using the correct syntax\n- Use `len()` to obtain a count of the number of characters in a string\n- Refer to one or more characters in a string\n- Concatenate strings together\n\n## Writing a valid string\n\nStrings are wrapped with single quotation marks (`'`) or double quotation marks\n(`\"`). In between you can put any characters except that same quotation mark\nor line break (ENTER key).\n\nValid strings\n```python\n\"This is cool!\"\n'a1b2c3'\n```\n\nInvalid string\n```python\n\"Tom shouted, \"Go outside!\"\"\n```\n\nTo use a double quote as a character of a string, simply\nenclose the string in single quotes, and vice versa.\n\n### Escaping characters\n\nSometimes you need both single and double quotes within a string. In that case\nyou can indicate that a quote is not the end of a string by using a backslash\n(\\\\) immediately before it.\n```python\n'Jodi asked, \"What\\'s up, Sam?\"'\n```\n\n### Multiline strings\n\nPython allows strings to span multiple lines using what's called\n**triple quotes** (`'''`). That is three apostrophes (or single quotation marks)\nin a row to start the string and another three to end the string.\n\nFor example\n```python\nprint('''My instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!''')\n```\n\nProduces this output\n```plaintext\nMy instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!\n```\n\n> Warning: Don't get this confused with three double quotes used for comments!\n\n## Calculating length\n\nA single string can contain many characters. It may be useful to know how long\na string is, so Python offers the `len()` function.\n\n```python\nprint(len(\"Spaghetti\"))    # => 9\n```\n\n## Indexing a string\n\nLike JavaScript, Python starts counting at zero. This is called\n*zero-based indexing*. A character in a string can be accessed with square\nbrackets.\n\n```python\nprint(\"Spaghetti\"[0])    # => S\nprint(\"Spaghetti\"[4])    # => h\n```\n\nPython allows negative indexes to access a character from the end of the string.\nThe last character is at index -1.\n\n```python\nprint(\"Spaghetti\"[-1])    # => i\nprint(\"Spaghetti\"[-4])    # => e\n```\n\nAdditionally, Python gives shortcuts to get a series of characters by using\na *range*. A range consists of a start value followed by a colon then an end\nvalue.\n\n> Important: The series returned does not include the end value.\n\n```python\nprint(\"Spaghetti\"[1:4])  # => pag\nprint(\"Spaghetti\"[4:-1])    # => hett\nprint(\"Spaghetti\"[4:4])  # => (empty string)\n```\n\nA shortcut for the beginning of the string is to omit the first number.\n\n```python\nprint(\"Spaghetti\"[:4])  # => Spag\nprint(\"Spaghetti\"[:-1])    # => Spaghett\n```\n\nA shortcut for the end of the string is to omit the second number.\n\n```python\nprint(\"Spaghetti\"[1:])  # => paghetti\nprint(\"Spaghetti\"[-4:])    # => etti\n```\n\nIf a single index is requested which is not in the string, then an error occurs.\n```python\nprint(\"Spaghetti\"[15])    # => IndexError: string index out of range\nprint(\"Spaghetti\"[-15])    # => IndexError: string index out of range\n```\n\nHowever, ranges do not error.\n```python\nprint(\"Spaghetti\"[:15])    # => Spaghetti\nprint(\"Spaghetti\"[15:])    # => (empty string)\nprint(\"Spaghetti\"[-15:])    # => Spaghetti\nprint(\"Spaghetti\"[:-15])    # => (empty string)\nprint(\"Spaghetti\"[15:20])    # => (empty string)\n```\n\n## Using string functions\n\n### Function: index\n\nThe `index` function in Python is similar to the `indexOf` function in\nJavascript.\n\nCalculate the first position of a character within a string using `index`.\n\n```python\nprint(\"Spaghetti\".index(\"h\"))    # => 4\nprint(\"Spaghetti\".index(\"t\"))    # => 6\n```\n\nIf the character is not found an error occurs.\n(In JavaScript. a -1 was returned.)\n\n```python\nprint(\"Spaghetti\".index(\"s\"))    # => ValueError: substring not found\n```\n\n### Function: count\n\nFind out how many times a substring appears in the primary string using `count`.\nIt returns zero if the substring is not there.\n\n```python\nprint(\"Spaghetti\".count(\"h\"))    # => 1\nprint(\"Spaghetti\".count(\"t\"))    # => 2\nprint(\"Spaghetti\".count(\"s\"))    # => 0\nprint('''We choose to go to the moon in this decade and do the other things,\nnot because they are easy, but because they are hard, because that goal will\nserve to organize and measure the best of our energies and skills, because that\nchallenge is one that we are willing to accept, one we are unwilling to\npostpone, and one which we intend to win, and the others, too.\n'''.count('the '))                # => 4\n```\n\n## Concatenation\n\nLike Javascript, Python uses the addition operator (`+`) to stitch strings\ntogether.\n\n```python\nprint(\"gold\" + \"fish\")    # => goldfish\n```\n\nUnlike Javascript, Python also uses the multiplication operator (`*`) to\nrepeat a string a given number of times.\n\n```python\nprint(\"s\"*5)              # => sssss\n```\n\nThis can be very helpful when you want to quickly create a billion dollars. ;)\n\n```python\nprint(\"$1\" + \",000\"*3)     # => $1,000,000,000\n```\n\n## Formatting\n\nWhen debugging in Python it can be very helpful to put together strings and\ndata to figure out what's going on.\n\nOne way to do this is with the `format` function. You will find this in many\nexamples and Q&A sites online. First, use placeholders in the string where you\nwant the data to go. A placeholder is a number inside braces like this `{0}`.\nStart at zero and each placeholder gets the next number. The use the `format`\nfunction on your string and pass in the data to substitute.\n\n```python\nfirst_name = \"Billy\"\nlast_name = \"Bob\"\nprint('Your name is {0} {1}'.format(first_name, last_name))  # => Your name is Billy Bob\n```\n\nThe format function is very powerful and can do much more with strings. These\ntopics will be introduced as needed.\n\nFor simple uses, a fast way to apply formatting is using the 'f' flag on the\nstring. This means putting using single quotes with an `f` at the start.\n\n```python\nprint(f'Your name is {first_name} {last_name}')\n```\n\n## Useful string methods\n\nThe following table shows some very useful string methods on the string object.\n\n| Value               | Method               | Result                    |\n|---------------------|----------------------|---------------------------|\n| `s = \"Hello\"`       | `s.upper()`          | `\"HELLO\"`                 |\n| `s = \"Hello\"`       | `s.lower()`          | `\"hello\"`                 |\n| `s = \"Hello\"`       | `s.islower()`        | `False`                   |\n| `s = \"hello\"`       | `s.islower()`        | `True`                    |\n| `s = \"Hello\"`       | `s.isupper()`        | `False`                   |\n| `s = \"HELLO\"`       | `s.isupper()`        | `True`                    |\n| `s = \"Hello\"`       | `s.startswith(\"He\")` | `True`                    |\n| `s = \"Hello\"`       | `s.endswith(\"lo\")`   | `True`                    |\n| `s = \"Hello World\"` | `s.split()`          | `[\"Hello\", \"World\"]`      |\n| `s = \"i-am-a-dog\"`  | `s.split(\"-\")`       | `[\"i\", \"am\", \"a\", \"dog\"]` |\n\nIn JavaScript, the `join` method was on the `Array` object. In Python, the\n`join` method is on the String object.\n\n```python\ns = \"--\".join([\"it\", \"is\", \"kind\"])\nprint(s)\n\n# Prints it--is--kind\n```\n\nPython also has some handy testing methods for the contents of a string. The\nfollowing table lists some of those.\n\n| Method        | Purpose                                                                                                                     |\n|---------------|-----------------------------------------------------------------------------------------------------------------------------|\n| `isalpha()`   | returns `True` if the string consists only of letters and is not blank.                                                     |\n| `isalnum()`   | returns `True` if the string consists only of letters and numbers and is not blank.                                         |\n| `isdecimal()` | returns `True` if the string consists only of numeric characters and is not blank.                                          |\n| `isspace()`   | returns `True` if the string consists only of spaces, tabs, and newlines and is not blank.                                  |\n| `istitle()`   | returns `True` if the string consists only of words that begin with an uppercase letter followed by only lowercase letters. |\n\n## What you've learned\n\n- Write strings using the correct syntax\n- Use `len()` to obtain a count of the number of characters in a string\n- Refer to one or more characters in a string\n- Concatenate strings together\n"
  },
  "success": true
}