{
  "template": {
    "taskId": "d4a28292-ab5c-4288-8b2f-5b048e28a34b",
    "name": "Boolean Data Type",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-booleans-py.md",
    "type": "Reading",
    "timeEstimate": 300,
    "urls": [
      "boolean-data-type"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# The Boolean Type\n\nThe **Boolean** data type is perhaps the simplest because it has only two \npossible values, `True` and `False`.\n\nWhen you finish this article, you should be able to:\n- Predict the evaluation of expressions that use the boolean operations of \n`and`, `or` and `not`\n- Explain how Python handles non-Boolean objects in conditional statements\n\n## Logical operators\n\nOne of the simplicities that developers like about Python is that it reads more\nlike English than JavaScript - especially with the logical operators.\n\nFor reference, here's a comparison table.\n\n| Python | JavaScript |\n|:------:|:----------:|\n| `and`  |    `&&`    |\n|  `or`  |    `||`    |\n| `not`  |    `!`     |\n\nHere is an example of how Python reads like English.\n\n```python\n# Logical AND\nprint(True and True)    # => True\nprint(True and False)   # => False\nprint(False and False)  # => False\n\n# Logical OR\nprint(True or True)     # => True\nprint(True or False)    # => True\nprint(False or False)   # => False\n\n# Logical NOT\nprint(not True)             # => False\nprint(not False and True)   # => True\nprint(not True or False)    # => False\n```\n\nThe rules of logic apply in Python as in every other language, including \nDeMorgan's Law.\n\n- `not (A or B)` is equivalent to `not A and not B`\n- `not (A and B)` is equivalent to `not A or not B`\n\n## Truth Value Testing\n\n**ANY** object can be tested for a truth value in an `if` statement or \n`while` loop even it is not a **Boolean** type. \n\nPython considers an object to be **true** (notice the lower case 't') \nUNLESS it is one of the following\n- constant: `None` or `False`\n- zero of any numeric type: 0, 0.0\n- empty sequence or collection\n  - string: `''`\n  - list: `[]`\n  - tuple: `()`\n  - dictionary: `{}`\n  - `set()`\n  - `range(0)`\n\nIn other words, all items in this list are `False` and everything else is true.\n\n## Solving common mistakes\n\nCapitalization is crucial to Python. The items `true` and `false` are \nconsidered to be variables with those names, not the special values you'd expect \nfrom JavaScript. If you accidentally make this typo you'll probably see an \nerror like this:\n```plaintext\nNameError: name 'true' is not defined\n```\n\nSimply change `true` to `True` and your problem will be solved.\n\nLikewise, `&&`, `||` and `!` by itself have no meaning. If you accidentally\nuse one like this:\n```python\nprint (True && False)\n```\n\nThen you'll receive this error:\n```plaintext\nSyntaxError: invalid syntax\n```\n\nAgain, it's an easy fix to change `&&` to `and`.\n\nIn short, don't let errors get you down! They are a natural and common part \nof the coding process - especially when learning the habits of a new-to-you\nlanguage!\n\nAs a wise and well-respected senior developer once said:\n> Change little, test often. That way you can find your mistakes quickly and \n> no one will know!\n\n## What you learned\n\n- Predict the evaluation of expressions that use the boolean operations of \n`and`, `or` and `not`\n- Explain how Python handles non-Boolean objects in conditional statements\n\nIn the next lesson, you'll get to see how comparison operators are similar\nbetween JavaScript and Python as well as some pitfalls to avoid and tricks to \nemploy to get extra value from them in Python."
  },
  "success": true
}