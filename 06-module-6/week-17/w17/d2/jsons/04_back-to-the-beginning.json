{
  "template": {
    "taskId": "2c9d6f44-f4ea-4ed9-9227-91c0230d6a33",
    "name": "Back To The Beginning",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-beginning-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "back-to-the-beginning"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Back to the Beginning: Hello World\n\nIn the next few sections, you'll be learning the fundamentals of the Python\nprogramming language. You will find you can use many of the principles (and even\nsome of code) that you learned in JavaScript to help you progress more quickly.\n\nWhen you finish this article, you should be able to\n- Use PEP 8 as a reference for how to write your code\n- `print` messages to the console terminal\n- Use `#` and `\"\"\"` to write code comments\n\n## The style guide for Python\n\nUnlike JavaScript, where everybody can have their own \"style\" of writing it\n(with parentheses, without parentheses, long lines, lots of line breaks), the\nPython community has spent a lot of time creating and curating a style guide so\nthat everyone in the Python community can code in ways that look like each\nother's code. The guide is known as [PEP 8][1] and one of its main authors is\nthe creator of Python, Guido van Rossum.\n\nA \"PEP\" is a \"Python Enhancement Proposals\", kind of like an RFC specifically\nfor Python. There's an entire index of PEPs at the [Index of Python Enhancement\nProposals][4].\n\n## Visual feedback in your programs\n\nIn JavaScript, you became very familiar with `console.log`. But did you ever\nwonder why it wasn't just \"print to the screen\"?\n\nThe term **print** comes from other languages, like Python, which were developed\nfor use primarily in a terminal window or running as a server. **Print**\ncommands cause messages to show in the terminal. You can also use it to write\ncontent to files! Terminals are generally interactive. You can open one up, type\ncommands in it, and get responses back from the programs that you run, like\n`git clone` or `npx create-react-app`.\n\nOn the other hand, JavaScript was first developed as a front-end language where\nit was running in browsers instead of terminals. The original browser with\nJavaScript, Netscape, offered a read-only **console** for reading messages put\nthere for debugging purposes. There was _no_ interactivity in that early\nconsoles (and aren't in many things still called \"consoles\"). Traditionally,\nwriting to a console is called **logging**. You're just creating a message in\nthe overall log (like a diary or \"Captain's Log\" if you know Star Trek). Hence\nthe birth of `console.log`. The development team creating Node.js kept\nJavaScript's `console.log` for consistency.\n\nAll this history is simply to help you remember that the `print` function in\nPython has the same effect as `console.log` in JavaScript. Therefore, it is a\nway you can see output from your programs.\n\nImagine this is your first program:\n\n```python\nprint(\"hello world\")\n```\n\nExecuting this program would print out the following\n\n```\nhello world\n```\n\n### About semicolons\n\nNothing too groundbreaking here, but notice how there are no semicolons at then\nend of lines in Python. If you include them you probably won't break anything.\nHowever, your coding tool may show warnings, unit tests that include syntax\nchecking will fail, and your developer buddies may tease you for not being a\n\"real\" Python developer.\n\n## Code comments\n\nSingle-line or inline comments in Python use the hash symbol \"#\", also known as\n**hashtag**, **pound sign**, **number symbol**, **octothorpe**, or simply\n**hatch**.\n\n> Fun fact: It is possible to guess the prior experience of a developer by term\n> they use for the comment character in Python.\n\nMost comments appear on a single line before the code they describe\n\n```python\n# Here's my question for the day\nprint(\"What is the meaning of life?\")\n```\n\nSometimes it is useful to include a short comment at the end of a line\n\n```python\nwait_time = 60000 # milliseconds\n```\n\n## Built-in documentation\n\nPython has a built-in way to document functions so you don't have to look at the\ncode's source files to see the description of it!\n\nExtensive comments for documentation purposes, such as description of a class or\nfunction can be spread across multiple lines using three quotes. That means the\ncomment both begins and ends with a triple quote (`\"\"\"`).\n\nFor example, here's a function with some documentation.\n\n```python\ndef foo():\n    \"\"\"\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n    \"\"\"\n    secretThing()\n```\n\nWhen you define that function, you can use the built-in `help` function to get\nthe function's definition back!\n\n```\n>>> help(foo)\nHelp on function foo in module __main__:\n\nfoo()\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n```\n\nThis means that documentation for built-in functions and libraries are _always_\navailable to you, even if you don't have access to the big PDF, online, or an\noffline documentation viewer.\n\n## Optional reading\n\n- Interesting article on [Octothorpe]\n- Best practices for [Commenting Python Code]\n\n## What you've learned\n\n- `print` messages to the console terminal\n- Use `#` to write code comments\n- Use `\"\"\"` to document things\n\n\n[1]: https://www.python.org/dev/peps/pep-0008/\n[Octothorpe]: https://time.com/2870942/hashtag-oed-oxford-english-dictionary/\n[Commenting Python Code]: https://www.digitalocean.com/community/tutorials/how-to-write-comments-in-python-3\n[4]: https://www.python.org/dev/peps/\n"
  },
  "success": true
}