{
  "template": {
    "taskId": "9be85260-5089-4a01-bd70-4fde284a7e9b",
    "name": "Variables",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-variables-py.md",
    "type": "Reading",
    "timeEstimate": 300,
    "urls": [
      "variables"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Variables and Expressions\n\n*Variables* are used to label and store data in memory to be referenced and \nused in a computer program.\n\nWhen you finish this article, you should be able to\n- Explain **duck-typing**\n- Predict when errors will be thrown when using variables and expressions\n- Explain the meaning of `None` in Python\n\n## Duck-typing\n\n> If it looks like a duck and quacks like a duck, then it must be a duck.\n\n**Duck typing** is a programming style which avoids checking an object's \n\"type\" to figure out what it can do. In other words, duck-typing avoids tests \nfor `type()` or `isinstance()`.\n\nInstead a method or attribute is simply called or used in the code. If \nnecessary a check would be for `hasattr()`. This approach is also known as \n[EAFP]: **E**asier to **a**sk for **f**orgiveness than **p**ermission\n\nBy focusing on interfaces, duck-typing makes well-designed code more flexible.\n\nPython uses *duck-typing* as its fundamental approach.\n\n## Assigning variables\n\nPython has no variable declaration keyword such as `let`, `var` or `const`. \nInstead, the assignment of a value automatically declares a variable.\n\n```python\na = 7\nb = 'Marbles'\nprint(a)         # => 7\nprint(b)         # => Marbles\n```\n\nVariable assignment can be chained to give several variables the same initial\nvalue.\n\n```python\ncount = max = min = 0\nprint(count)           # => 0\nprint(max)             # => 0\nprint(min)             # => 0\n```\n\nOften assignment chaining makes code less readable, so use it with caution.\nHowever, many online examples will include it so now you know how to read it.\n\n## Manipulating variables\n\nThe value - and even the type - of a variable can be reassigned at any time.\n\n```python\na = 17\nprint(a)         # => 17\na = 'seventeen'\nprint(a)         # => seventeen\n```\n\nPython will not throw any errors. That means it is very important to name \nvariables clearly so you don't accidentally reassign one causing errors or \nconfusion.\n\nThe assignment shorthand operators from JavaScript also work in Python:\n- `+=`\n- `-=`\n- `*=`\n- `/=`\n\nIn fact, all the arithmetic operators have shorthand counterparts:\n- `**=` (exponent)\n- `//=` (integer division)\n- `%=` (modulo)\n\n## What about NaN\n\nUnlike JavaScript, Python will not return NaN as the result of calculations;\ninstead, it throws exceptions.\n\nHere's an example\n```python\na = '7'\na /= 2\nprint(a)\n```\n\nWhere the output is\n\n```plaintext\nTypeError: unsupported operand type(s) for /=: 'str' and 'int'\n```\n\nIf you absolutely have to have it, you can create \"not a number\" by sending the \nstring `\"nan\"` into the float constructor.\n\n```python\nprint(float(\"nan\"))\n```\n\n## None\n\nPython's replacement for `null` is `None`. It is used to indicate a variable has \nno value.\n\n`None` is very special because it is actually an object (of type `NoneType`). \nThat means it can be used wherever other objects are used.\n\nAssigning a variable the value `None` is as easy as it sounds.\n\n```python\nmy_var = None\n```\n\nAnd it is just as easy to find out if the value of a variable is `None`.\n\n```python\nprint(my_var is None)     # => True\n```\n\n### Why use Python's `None` type?\n\nThere are many cases when you may use `None`.\n\nOften you will want to perform an action that may or may not work. Using `None` \nis one way you can check what happened.\n\nFor example, maybe you are loading optional instructions from a file. \nIf that file in not found, the `instructions` variable's value \ncould remain `None`. Then later in your code you check \n`instructions is not None` so the program knows whether to display those \ninstructions or skip that step.\n\n## What you've learned\n\n- Explain **duck typing**\n- Predict when errors will be thrown when using variables and expressions\n- Explain the meaning of `None` in Python\n\n[EAFP]: https://docs.python.org/3/glossary.html#term-eafp"
  },
  "success": true
}