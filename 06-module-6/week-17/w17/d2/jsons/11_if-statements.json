{
  "template": {
    "taskId": "53e37f3b-0a67-47d7-9ef5-c5d06759d38d",
    "name": "If Statements",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-if-statements-py.md",
    "type": "Reading",
    "timeEstimate": 300,
    "urls": [
      "if-statements"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Python If Statements\n\nAlmost every programming language has the ability to conditionally evaluate a\nblock of code, and normally, that's called an `if` statement. In this article,\nyou will learn how to write conditional statements in Python.\n\n## The if statement\n\nThe most common type of flow control statement is the if statement. An if\nstatement’s clause (that is, the block following the if statement) will execute\nif the statement’s condition is `True`. The clause is skipped if the condition\nis `False`.\n\nIn plain English, an `if` statement could be read as, “If this condition is\ntrue, execute the code in the clause.” In Python, an `if` statement consists of\nthe following:\n\n* The if keyword\n* A condition (that is, an expression that evaluates to `True` or `False`)\n* A colon\n* Starting on the next line, an indented block of code (called the `if` clause)\n\nFor example, say you have some code that checks to see whether someone’s name is\nMonica. (Pretend name was assigned some value earlier.)\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\n```\n\nAll flow control statements end with a colon and are followed by a new block of\ncode (the clause). This `if` statement’s clause is the block with `print('Hi,\nMonica.')`.\n\nPlease note, _no parentheses_ around the conditional for the `if` statement.\nThis vastly differs from JavaScript. In Python, you just don't need them, unless\nyou want to have some special order of operations.\n\nIt doesn't _hurt_ to write them. This, too, is valid Python.\n\n```python\nif (name == 'Monica'):\n  print('Hi, Monica.');\n```\n\nIt's just, nobody writes it like that, so you probably shouldn't, either.\n\n## The else statement\n\nAn `if` clause can optionally be followed by an `else` statement. The `else`\nclause is executed only when the `if` statement’s condition is `False`. In plain\nEnglish, an `else` statement could be read as, “If this condition is true,\nexecute this code. Or else, execute that code.” An `else` statement doesn’t have\na condition, and in code, an `else` statement always consists of the following:\n\n* The `else` keyword\n* A colon\n* Starting on the next line, an indented block of code (called the `else`\n  clause)\n\nReturning to the Monica example, have a look at some code that uses an `else`\nstatement to offer a different greeting if the person’s name isn’t Monica.\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\nelse:\n    print('Hello, stranger.')\n```\n\n## The elif statement\n\nWhile only one of the `if` or `else` clauses will execute, you may have a case\nwhere you want one of many possible clauses to execute. The `elif` statement is\nan “else if” statement that always follows an `if` or another `elif` statement.\nIt provides another condition that is checked only `if` any of the previous\nconditions were `False`. In code, an `elif` statement always consists of the\nfollowing:\n\n* The `elif` keyword\n* A condition (that is, an expression that evaluates to `True` or `False`)\n* A colon\n* Starting on the next line, an indented block of code (called the `elif`\n  clause)\n\nThe following code adds an `elif` to the name checker to see this statement in\naction.\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age < 12:\n    print('You are not Monica, kiddo.')\n```\n\nThis time, the code checks the person’s age, and will tell them something\ndifferent if they’re younger than 12. The `elif` clause executes if `age < 12`\nis `True` and `name == 'Monica'` is `False`. However, if both of the conditions\nare `False`, then both of the clauses are skipped. It is not guaranteed that at\nleast one of the clauses will be executed. When there is a chain of `elif`\nstatements, only one or none of the clauses will be executed. Once one of the\nstatements’ conditions is found to be `True`, the rest of the `elif` clauses are\nautomatically skipped. For example, have a look at the following code:\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age < 12:\n    print('You are not Monica, kiddo.')\nelif age > 2000:\n   print('Unlike you, Monica is not an undead, immortal vampire.')\nelif age > 100:\n   print('You are not Monica, grannie.')\n```\n\nThe order of the `elif` statements does matter, however. The following\ndiscussion rearranges them to introduce a bug. Remember that the rest of the\n`elif` clauses are automatically skipped once a `True` condition has been found,\nso if you swap around some of the clauses, you run into a problem.\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age < 12:\n    print('You are not Monica, kiddo.')\nelif age > 100:\n    print('You are not Monica, grannie.')\nelif age > 2000:\n    print('Unlike you, Monica is not an undead, immortal vampire.')\n```\n\nSay the `age` variable contains the value 3000 before this code is executed. You\nmight expect the code to print the string `'Unlike you, Monica is not an undead,\nimmortal vampire.'`. However, because the `age > 100` condition is `True` (after\nall, 3000 is greater than 100), the string `'You are not Monica, grannie.'` is\nprinted, and the rest of the `elif` statements are automatically skipped.\nRemember, at most only one of the clauses will be executed, and for `elif`\nstatements, the order matters!\n\nOptionally, you can have an `else` statement after the last `elif` statement. In\nthat case, it is guaranteed that at least one (and only one) of the clauses will\nbe executed. If the conditions in every `if` and `elif` statement are `False`,\nthen the `else` clause is executed. For example, here's the Monica program that\nuses `if`, `elif`, and `else` clauses.\n\n```python\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age < 12:\n    print('You are not Monica, kiddo.')\nelse:\n    print('You are neither Monica nor a little kid.')\n```\n\nIn plain English, this type of flow control structure would be, “If the first\ncondition is true, do this. Else, if the second condition is true, do that.\nOtherwise, do something else.” When you use all three of these statements\ntogether, remember these rules about how to order them to avoid bugs like the\none from earlier.\n\nFirst, there is always exactly one `if` statement. Any `elif` statements you\nneed should follow the `if` statement. Second, if you want to be sure that at\nleast one clause is executed, close the structure with an `else` statement.\n\n## What you learned\n\nIn this article, you learned that Python has an `if` and an `else`, just like\nJavaScript. Instead of `else if`, Python has the shorter (and admittedly\nweirder) `elif`. Finally, no parentheses needed! Wow!\n"
  },
  "success": true
}