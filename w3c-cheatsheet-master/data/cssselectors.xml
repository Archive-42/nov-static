<infosets>
<!-- Manually extracted from http://www.w3.org/TR/CSS2/selector.html
 Is there any way to avoid redundancy? -->
  <infoset technology="css">
    <item type="selector" name="selectors">
      <context>
	<property type="selector" infoset="css" name="Pattern"><content>*</content></property>
	<property name="name"><content>Universal selector</content></property>
	<property name="description"><content>Matches any element</content></property></context>
<context>
<property name="Pattern"><content>E</content></property>
<property name="name"><content>Type selector</content></property>
<property name="description"><content>Matches any E element (i.e., an element of type E)</content></property></context>
<context><property name="Pattern"><content>E F</content></property>
<property name="name"><content>Descendant selector</content></property>
<property name="description"><content>Matches any F element that is a descendant of an E element</content></property></context>
<context><property name="Pattern"><content>E > F</content></property>
<property name="name"><content>Child selector</content></property>
<property name="description"><content>Matches any F element that is a child of an E element</content></property></context>
<context><property name="Pattern"><content>E + F</content></property>
<property name="name"><content>Adjacent selector</content></property>
<property name="description"><content>Matches any F element immediately preceded by a sibling element E</content></property></context>
<context><property name="Pattern"><content>#myid</content></property>
<property name="name"><content>ID selector</content></property>
<property name="description"><content>Matches any element with ID equal to "myid".</content></property>
</context>
<context><property name="Pattern"><content>.warning</content></property>
<property name="name"><content>Class selector</content></property>
<property name="description"><content>In HTML, matches any element whose <span type='attribute' infoset='html'>class</span> attribute is a list of space-separated values, one of which is exactly equal to "warning"</content></property></context>

<context><property name="Pattern"><content>E[foo]</content></property>
<property name="name"><content>Attribute selector</content></property>
<property name="description"><content>Matches any E element with the "foo" attribute set (whatever the value)</content></property></context>
<context><property name="Pattern"><content>E[foo="warning"]</content></property>
<property name="name"><content>Attribute selector</content></property>
<property name="description"><content>Matches any E element whose "foo" attribute value is exactly equal to "warning"</content></property></context>
<context><property name="Pattern"><content>E[foo~="warning"]</content></property>
<property name="name"><content>Attribute selector</content></property>
<property name="description"><content>Matches any E element whose "foo" attribute value is a list of space-separated values, one of which is exactly equal to "warning"</content></property></context>
<context><property name="Pattern"><content>E[lang|=en]</content></property>
<property name="name"><content>Attribute selector</content></property>
<property name="description"><content>Matches any E element whose "lang" attribute has a hyphen-separated list of values beginning (from the left) with "en"</content></property></context>
<context><property name="Pattern"><content>E<span type='selector' infoset='css'>:first-child</span></content></property></context>
<context><property name="Pattern"><content>E<span type='selector' infoset='css'>:link</span></content></property></context>
<context><property name="Pattern"><content>E<span type='selector' infoset='css'>:visited</span></content></property></context>
<context><property name="Pattern"><content>E<span type='selector' infoset='css'>:active</span> | E<span type='selector' infoset='css'>:hover</span> | E<span type='selector' infoset='css'>:focus</span></content></property></context>
<context><property name="Pattern"><content>E<span type='selector' infoset='css'>:lang()</span></content></property></context>
</item>
<item type="selector" name="*">
<context>
<property name="name"><content>Universal selector</content></property>
<property name="description"><content>matches the name of any element type</content></property>
</context>
</item>
<item type="selector" name=":lang()">
<context>
<property name="Pattern"><content>E:lang(c)</content></property>
<property name="name"><content>lang() pseudo-class</content></property>
<property name="description"><content>Matches element E if it is in (human) language c (the document language specifies how language is determined)</content></property>
<property name="Internationalization"><content link="http://www.w3.org/International/questions/qa-css-lang">Styling using the lang attribute</content></property>
</context>
</item>
<item type="selector" name=":first-child">
<context>
<property name="Pattern"><content>E:first-child</content></property>
<property name="name"><content>first-child pseudo-class</content></property>
<property name="description"><content>Matches element E when E is the first child of its parent</content></property>
</context>
</item>
<item name=":link" type="selector">
<context>
<property name="Pattern"><content>E:link</content></property>
<property name="name"><content>link pseudo-class</content></property>
<property name="description"><content>Matches element E if E is the source anchor of a hyperlink of which the target is not yet visited</content></property>
</context>
</item>
<item name=":visited" type="selector">
<context>
<property name="Pattern"><content>E:visited</content></property>
<property name="name"><content>link pseudo-class</content></property>
<property name="description"><content>Matches element E if E is the source anchor of a hyperlink of which the target is already visited</content></property>
</context>
</item>
<item type="selector" name=":active">
<context>
<property name="Pattern"><content>E:active</content></property>
<property name="name"><content>dynamic pseudo-class</content></property>
<property name="description"><content>Matches E when E is activated by the user</content></property>
</context>
</item>
<item type="selector" name=":hover">
<context>
<property name="Pattern"><content>E:hover</content></property>
<property name="name"><content>dynamic pseudo-class</content></property>
<property name="description"><content>Matches E while the user designates an element (with some pointing device), but does not activate it</content></property>
</context>
</item>
<item type="selector" name=":focus">
<context>
<property name="Pattern"><content>E:focus</content></property>
<property name="name"><content>dynamic pseudo-class</content></property>
<property name="description"><content>Matches E while while it has the focus</content></property>
</context>
</item>

<item type="at-rule" name="at-rules">
<context>
<property type="at-rule" infoset="css" name="Rules" list="block">
<content>@media</content>
<content>@import</content>
<content>@page</content>
<content>@charset</content>
<content>@supports</content>
<content>@keyframes</content>
</property>
</context>
</item>
<item type="at-rule" name="@import">
<context>
<property name="name"><content>@import</content></property>
<property name="description"><content>The @import rule allows to import style rules from other style sheets. Any @import rules must precede all other rules (except @charset)</content></property>
<property name="Syntax"><content>The @import keyword must be followed by the URI of the style sheet to include. A string is also allowed; it will be interpreted as if it had url(...) around it. Media-dependent import can be specified with comma-separated media types after the URI.</content></property>
<property name="Example"><content>@import url("mystyle.css) screen</content></property>
</context>
</item>
<item name="@page" type="at-rule">
<context>
<property name="description"><content>An @page rule consists of the keyword "@page", followed by an optional page selector, followed by a block of declarations. The declarations in an @page rule are said to be in the page context and are useful to write CSS rules for paged media (e.g. for printing on paper).</content></property>
<property name="Example"><content>@page {margin: 3cm;}</content></property>
</context>
</item>
<item name="@media" type="at-rule">
<context>
<property name="description"><content>An @media rule specifies the target media types (separated by commas) of a set of statements (delimited by curly braces)</content></property>
<property name="values"><content>all, braille, embossed, handheld, print, projection, screen, speech, tty, tv</content></property>
</context>
</item>
<item name="@charset" type="at-rule">
  <context>
  <property name="description"><content>The @charset rule defines the encoding used in a linked style sheet. An @charset rule must be placed at the very beginning of the style sheet, preceded by no characters, and the name of the encoding should follow in quotes.</content></property>
  <property name="Example"><content>@charset "ISO-8859-1"</content></property>
  <property name="Internationalization"><content link="http://www.w3.org/International/techniques/authoring-html#css">Declaring the character encoding for a CSS style sheet</content></property>
</context>
</item>
<item name="@supports" type="at-rule">
<context>
<property name="description"><content>The ‘@supports’ rule is a conditional group rule whose condition tests whether the user agent supports CSS property:value pairs.</content></property>
<property name="Example"><content>@supports ( display: flexbox ) {  body, #navigation, #content { display: flexbox; }  #navigation { background: blue; color: white; }  #article { background: white; color: black; } }</content></property>
</context>
</item>
<item name="@keyframes" type="at-rule">
<context>
  <property name="description"><content>Keyframes are used to specify the values for the animating properties at various points during the animation. The keyframes specify the behavior of one cycle of the animation; the animation may iterate zero or more times.</content></property>
  <property name="Syntax">
    <content>@keyframes = @keyframes &lt;<span type="value space" infoset="css">keyframes-name</span>> { &lt;rule-list> }</content>
    <content>The &lt;rule-list> inside of @keyframes can only contain &lt;<span type="value space" infoset="css">keyframe-block</span>> rules.</content>
  </property>

</context>
</item>

<item name="string" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>CSS Strings consist of a sequence of characters delimited by double quotes or single quotes.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#strings" />
  </context>
</item>
<item name="url" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>A URL is a pointer to a resource with the following syntax:  url( &lt;<span type="value space" infoset="css">string</span>&gt; &lt;url-modifier&gt;* )</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#url" />
  </context>
</item>
<item name="integer" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>&lt;integer&gt; denotes integer values. When written literally, an integer is one or more decimal digits 0 through 9. The first digit of an integer may be immediately preceded by - or + to indicate the integer’s sign.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#integers" />
  </context>
</item>
<item name="number" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;number&gt; type  represents real numbers, possibly with a fractional component. When written literally, a number is either an <span type="value space" infoset="css">integer</span>, or zero or more decimal digits followed by a dot (.) followed by one or more decimal digits and optionally an exponent composed of "e" or "E" and an <span type="value space" infoset="css">integer</span>. As with integers, the first character of a number may be immediately preceded by - or + to indicate the number’s sign.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#numbers" />
  </context>
</item>
<item name="percentage" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;percentage&gt; type  represents percentage values, indicating a value that is some fraction of another reference value. When written literally, a percentage consists of a <span type="value space" infoset="css">number</span> immediately followed by a percent sign %.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#percentages" />
  </context>
</item>
<item name="dimension" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;dimension&gt; type refers to a <span type="value space" infoset="css">number</span> with a unit attached to it. When written literally, a dimension is a number immediately followed by a unit identifier.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#dimensions" />
  </context>
</item>
<item name="length" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;length&gt; type refers to distance measurements. A length is a <span type="value space" infoset="css">dimension</span>. However, for zero lengths the unit identifier is optional i.e. can be syntactically represented as 0.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#lengths" />
    <property name="units" list="inline" type="unit" infoset="css">
      <content>em</content>
      <content>ex</content>
      <content>ch</content>
      <content>ic</content>
      <content>rem</content>
      <content>vw</content>
      <content>vh</content>
      <content>vi</content>
      <content>vb</content>
      <content>vmin</content>
      <content>vmax</content>
      <content>cm</content>
      <content>mm</content>
      <content>q</content>
      <content>in</content>
      <content>pt</content>
      <content>pc</content>
      <content>px</content>
    </property>
  </context>
</item>
<item name="length-percentage" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>Equivalent to [ &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>> ], where the &lt;<span type="value space" infoset="css">percentage</span>> will resolve to a &lt;<span type="value space" infoset="css">length</span>>.</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#typedef-length-percentage" />  </context>
</item>
  <item name="angle" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;angle&gt; type refers to angle values. An angle is a <span type="value space" infoset="css">dimension</span>. However, for zero angles the unit identifier is optional i.e. can be syntactically represented as 0.</content></property>
    <property name="units" list="inline" type="unit" infoset="css">
      <content>deg</content>
      <content>grad</content>
      <content>rad</content>
      <content>turn</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#angles" />
  </context>
</item>
<item name="time" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;time&gt; type refers to time values.</content></property>
    <property name="units" list="inline" type="unit" infoset="css">
      <content>s</content>
      <content>ms</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#time" />
  </context>
</item>
<item name="frequency" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;frequency&gt; type refers to frequency values.</content></property>
    <property name="units" list="inline" type="unit" infoset="css">
      <content>Hz</content>
      <content>kHz</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#frequency" />
  </context>
</item>
<item name="resolution" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;resolution&gt; type refers to resolution values.</content></property>
    <property name="units" list="inline" type="unit" infoset="css">
      <content>dpi</content>
      <content>dpcm</content>
      <content>dppx</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-values/#resolution" />
  </context>
</item>
<item name="color" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>A &lt;color&gt; is either a keyword or a numerical specification.</content></property>
    <!-- @@@ list color keywords and numerical specification syntaxes -->
    <property name="Specification" link="https://drafts.csswg.org/css-color-3/#valuea-def-color" />
  </context>
</item>
<item name="image" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;<span type="value space" infoset="css">url</span>&gt; | &lt;<span type="value space" infoset="css">image()</span>&gt; | &lt;<span type="value space" infoset="css">image-set()</span>&gt; | &lt;<span type="value space" infoset="css">element()</span>&gt; | &lt;<span type="value space" infoset="css">cross-fade()</span>&gt; | &lt;<span type="value space" infoset="css">gradient</span>&gt;</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#typedef-image" />
  </context>
</item>
<item name="image()" type="value space">
  <context>
    <property name="description"><content>The image() function allows an author to use media fragments to clip out a portion of an image, use a solid color as an image, fallback to a solid-color image, when the image at the specified url can’t be downloaded or decoded, automatically respect the image orientation specified in the image’s metadata.</content></property>
    <property name="Syntax"><content>image() = image( [ [ &lt;<span type="value space" infoset="css">image</span>> | &lt;<span type="value space" infoset="css">string</span>> ]? , &lt;<span type="value space" infoset="css">color</span>>? ]! )</content></property>
    <!-- @@@ list color keywords and numerical specification syntaxes -->
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#image-notation" />
  </context>
</item>
<item name="image-set()" type="value space">
  <context>
    <property name="description"><content>The image-set() function allows an author to provide multiple resolutions of an image and let the UA decide which is most appropriate in a given situation.</content></property>
    <property name="Syntax">
      <content>image-set() = image-set( &lt;image-set-option># )</content>
      <content>&lt;image-set-option&gt; = [ &lt;<span type="value space" infoset="css">image</span>> | &lt;<span type="value space" infoset="css">string</span>> ] &lt;<span type="value space" infoset="css">resolution</span>></content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#image-set-notation" />
  </context>
</item>
<item name="cross-fade()" type="value space">
  <context>
    <property name="description"><content>The cross-fade() function  indicates the two images to be combined and how far along in the transition the combination is when transitioning between images.</content></property>
    <property name="Syntax">
      <content>cross-fade() = cross-fade( &lt;cf-mixing-image> , &lt;cf-final-image>? )</content>
      <content>&lt;cf-mixing-image> = &lt;<span type="value space" infoset="css">percentage</span>>? &amp;&amp; &lt;<span type="value space" infoset="css">image</span>></content>
      <content>&lt;cf-final-image> = &lt;<span type="value space" infoset="css">image</span>> | &lt;<span type="value space" infoset="css">color</span>></content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#cross-fade-function" />
  </context>
</item>
<item name="gradient" type="value space" noindex="noindex">
  <context>
  <property name="description"><content>A gradient is an image that smoothly fades from one color to another. </content></property>
  <property name="Syntax">
    <content>&lt;gradient> =  &lt;<span type="value space" infoset="css">linear-gradient()</span>> | &lt;<span type="value space" infoset="css">repeating-linear-gradient()</span>> |  &lt;<span type="value space" infoset="css">radial-gradient()</span>> | &lt;<span type="value space" infoset="css">repeating-radial-gradient()</span>></content>
  </property>
  <property name="Specification" link="https://drafts.csswg.org/css-images-3/#typedef-gradient" />
  </context>
</item>
<item name="linear-gradient()" type="value space">
  <context>
    <property name="description"><content>A linear gradient produces a smooth fade from each color to the next, progressing in the specified direction.</content></property>
    <property name="Syntax">
      <content>linear-gradient() = linear-gradient(  [ &lt;<span type="value space" infoset="css">angle</span>> | to &lt;side-or-corner> ]? ,  &lt;<span type="value space" infoset="css">color-stop-list</span>>)</content>
      <content>&lt;side-or-corner> = [left | right] || [top | bottom]</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#linear-gradients" />
  </context>
</item>
<item name="repeating-linear-gradient()" type="value space">
  <context>
    <property name="description"><content>A repeating linear gradient produces an indefinitely repeating smooth fade from each color to the next, in both directions, shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.</content></property>
    <property name="Syntax">
      <content>repeating-linear-gradient() = repeating-linear-gradient(  [ &lt;<span type="value space" infoset="css">angle</span>> | to &lt;side-or-corner> ]? ,  &lt;<span type="value space" infoset="css">color-stop-list</span>>)</content>
      <content>&lt;side-or-corner> = [left | right] || [top | bottom]</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#repeating-gradients" />
  </context>
</item>
<item name="radial-gradient()" type="value space">
  <context>
    <property name="description"><content>A radial gradient produces a smooth fade from a single point spreading outward in a circular or elliptical shape, in both directions, shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.</content></property>
    <property name="Syntax">
      <content>radial-gradient() = radial-gradient(  [ &lt;ending-shape> || &lt;size&gt; ]? [ at &lt;<span type="value space" infoset="css">position</span>> ]?, &lt;<span type="value space" infoset="css">color-stop-list</span>>)</content>
      <content>&lt;ending-shape> = circle | ellipse</content>
      <content>&lt;size> = &lt;<span type="value space" infoset="css">length</span>> || &lt;<span type="value space" infoset="css">length-percentage</span>>{2} || &lt;extent-keyword></content>
      <content>&lt;extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#radial-gradients" />
  </context>
</item>
<item name="repeating-radial-gradient()" type="value space">
  <context>
    <property name="description"><content>A repeating radial gradient produces an indefinitely repeating smooth fade from a single poit spreading outward in a circular or elliptical shape.</content></property>
    <property name="Syntax">
      <content>radial-gradient() = radial-gradient(  [ &lt;ending-shape> || &lt;size&gt; ]? [ at &lt;<span type="value space" infoset="css">position</span>> ]?, &lt;<span type="value space" infoset="css">color-stop-list</span>>)</content>
      <content>&lt;ending-shape> = circle | ellipse</content>
      <content>&lt;size> = &lt;<span type="value space" infoset="css">length</span>> || &lt;<span type="value space" infoset="css">length-percentage</span>>{2} || &lt;extent-keyword></content>
      <content>&lt;extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-images-3/#radial-gradients" />
  </context>
</item>
<item name="color-stop-list" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The colors in gradients are specified using color stops. A color stop is a combination of a color and a position. Color stops are organized into a color stop listcolor stop list, which is a list of one or more color stops.</content></property>
    <property name="Syntax">
      <content>&lt;color-stop-list> = &lt;color-stop>{2,}</content>
      <content>&lt;color-stop> = &lt;<span type="value space" infoset="css">color</span>> &lt;<span type="value space" infoset="css">length-percentage</span>>?</content>
    </property>
  </context>
</item>
<item name="absolute-size" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>&lt;absolute-size&gt; refers to one of 6 font sizes computed and kept by the browser.</content></property>
    <property name="Syntax">
      <content>&lt;absolute-size> = xx-small | x-small | small | medium | large | x-large | xx-large</content>
    </property>
  </context>
</item>
<item name="relative-size" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>A &lt;relative-size&gt; is interpreted relative to the table of font sizes and the font size of the parent element.</content></property>
    <property name="Syntax">
      <content>&lt;relative-size> = larger | smaller</content>
    </property>
  </context>
</item>
<item name="box" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>&lt;box&gt; determines what serves as  boundaries to the box.</content></property>
    <property name="Syntax">
      <content>&lt;box> = border-box | padding-box | content-box</content>
    </property>
    <property name="Specification" link="/TR/css3-background/#ltboxgt"/>
  </context>
</item>
<item name="shape-box" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>&lt;shape-box&gt; defines which boundaries are used to define the shape of the box.</content></property>
    <property name="Syntax">
      <content>&lt;shape-box> = &lt;<span type="value space" infoset="css">box</span>&gt; | margin-box</content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#typedef-shape-box"/>
  </context>
</item>
<item name="basic-shape" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>&lt;basic-shape&gt; defines which the geometric shape of the box.</content></property>
    <property name="Syntax">
      <content>&lt;basic-shape> = &lt;<span type="value space" infoset="css">inset()</span>&gt; | &lt;<span type="value space" infoset="css">circle()</span>&gt; | &lt;<span type="value space" infoset="css">ellipse()</span>&gt; | &lt;<span type="value space" infoset="css">polygon()</span>&gt; </content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#typedef-basic-shape"/>
  </context>
</item>
<item name="inset()" type="value space">
  <context>
    <property name="description"><content>Defines an inset rectangle: the first four arguments represent the top, right, bottom and left offsets, following the syntax of the <span type="property" infoset="css">margin</span> shorthand with one, two or four values. The optional border-radius argument defines rounded corners.</content></property>
    <property name="Syntax">
      <content>inset() = inset( &lt;shape-arg>{1,4} [round &lt;<span type="property" infoset="css">border-radius</span>>]? )</content>
      <content>&lt;shape-arg> = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>></content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#funcdef-inset"/>
  </context>
</item>
<item name="circle()" type="value space">
  <context>
    <property name="description"><content>Defines a circle</content></property>
    <property name="Syntax">
      <content>circle() = circle( &lt;shape-radius>? [at &lt;<span type="value space" infoset="css">position</span>>]? )</content>
      <content>&lt;shape-radius> = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>> | closest-side | farthest-side </content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#funcdef-circle"/>
  </context>
</item>
<item name="ellipse()" type="value space">
  <context>
    <property name="description"><content>Defines an ellipse, with the radius defined in the order of rx, ry.</content></property>
    <property name="Syntax">
      <content>ellipse() = ellipse( [&lt;shape-radius>{2}]? [at &lt;<span type="value space" infoset="css">position</span>>]? )</content>
      <content>&lt;shape-radius> = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>> | closest-side | farthest-side </content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#funcdef-ellipse"/>
  </context>
</item>
<item name="polygon()" type="value space">
  <context>
    <property name="description"><content>Defines a polygonal shape, with each pair argument in the list represents xi and yi - the x and y axis coordinates of the i-th vertex of the polygon</content></property>
    <property name="Syntax">
      <content>polygon() = polygon( [&lt;fill-rule,>]? [&lt;shape-arg> &lt;shape-arg>]# )</content>
      <content>&lt;shape-arg> = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>></content>
    </property>
    <property name="Specification" link="/TR/css-shapes-1/#funcdef-ellipse"/>
  </context>
</item>
<item name="bg-image" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;bg-image> = &lt;<span type="value space" infoset="css">image</span>> | none</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#bg-image" />  </context>
</item>
<item name="attachment" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;attachment> = scroll | fixed | local</content></property>
    <property name="description">
      <content>fixed: The background is fixed with regard to the viewport. In paged media where there is no viewport, a ‘fixed’ background is fixed with respect to the page box and therefore replicated on every page.</content>
      <content>local: The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's content.</content>
      <content>scroll: The background is fixed with regard to the element itself and does not scroll with its contents.</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#attachment" />  </context>
</item>
<item name="bg-size" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;bg-size> = [ &lt;<span type="value space" infoset="css">length-percentage</span>> | auto ]{1,2} | cover | contain</content></property>
    <property name="description">
      <content>contain: Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.</content>
      <content>cover: Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#bg-size" />
  </context>
</item>
<item name="bg-layer" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;bg-layer> = &lt;<span type="value space" infoset="css">bg-image</span>> || &lt;<span type="value space" infoset="css">position</span>> [ / &lt;<span type="value space" infoset="css">bg-size</span>> ]? || &lt;<span type="value space" infoset="css">repeat-style</span>> || &lt;<span type="value space" infoset="css">attachment</span>> || &lt;<span type="value space" infoset="css">box</span>> || &lt;<span type="value space" infoset="css">box</span>></content></property>
    <property name="description">
      <content>contain: Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.</content>
      <content>cover: Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#bg-layer" />
  </context>
</item>
<item name="final-bg-layer" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;bg-layer> = &lt;<span type="value space" infoset="css">bg-image</span>> || &lt;<span type="value space" infoset="css">position</span>> [ / &lt;<span type="value space" infoset="css">bg-size</span>> ]? || &lt;<span type="value space" infoset="css">repeat-style</span>> || &lt;<span type="value space" infoset="css">attachment</span>> || &lt;<span type="value space" infoset="css">box</span>> || &lt;<span type="value space" infoset="css">box</span>> | &lt;<span type="property" infoset="css">background-color</span>></content></property>
    <property name="description">
      <content>contain: Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.</content>
      <content>cover: Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#bg-layer" />
  </context>
</item>
<item name="position" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;position> = [  [ left | center | right | top | bottom | &lt;<span type="value space" infoset="css">length-percentage</span>> ] |  [ left | center | right | &lt;<span type="value space" infoset="css">length-percentage</span>> ]  [ top | center | bottom | &lt;<span type="value space" infoset="css">length-percentage</span>> ] |  [ center | [ left | right ] &lt;<span type="value space" infoset="css">length-percentage</span>>? ] &amp;&amp;  [ center | [ top | bottom ] &lt;<span type="value space" infoset="css">length-percentage</span>>? ] ]</content></property>
    <property name="description"><content>If only one value is specified, the second value is assumed to be ‘center’. If two values are given, a length or percentage as the first value represents the horizontal position (or offset) and a length or percentage as the second value represents the vertical position (or offset). &lt;percentage> and &lt;length> values here represent an offset of the top left corner of the background image from the top left corner of the background positioning area.</content> </property>
  </context>
</item>
<item name="box" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;box> = border-box | padding-box | content-box</content></property>
    <property name="description">
      <content>border-box: The background is painted within the border box.</content>
      <content>padding-box: The background is painted within the padding box.</content>
      <content>content-box: The background is painted within the content box. </content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#box" />
  </context>
</item>
<item name="repeat-style" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;repeat-style> = repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}</content></property>
    <property name="description">
      <content>repeat: The image is repeated in this direction as often as needed to cover the background painting area.</content>
      <content>space: The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.</content>
      <content>round: The image is repeated as often as will fit within the background positioning area. If it doesn't fit a whole number of times, it is rescaled so that it does.</content>
      <content>no-repeat: The image is placed once and not repeated in this direction.</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#repeat-style" />
  </context>
</item>
<item name="blend-mode" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The blend mode defines the formula that must be used to mix the colors with the backdrop.</content></property>
    <property name="Syntax"><content>&lt;blend-mode> = normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity</content></property>
    <property name="Specification" link="https://drafts.fxtf.org/compositing-1/#ltblendmodegt" />
  </context>
</item>
<item name="isolation-mode" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;isolation-mode> = auto | isolate</content></property>
    <property name="Specification" link="https://drafts.fxtf.org/compositing-1/#isolated-propid" />
  </context>
</item>

<item name="id" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The &lt;id> value is an ID selector</content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-ui/#typedef-id" />
  </context>
</item>

<item name="shadow" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;shadow> = inset? &amp;&amp; &lt;<span type="value space" infoset="css">length</span>>{2,4} &amp;&amp; &lt;<span type="value space" infoset="css">color</span>>?</content></property>
    <property name="description">
      <content>1st length: horizontal offset of the shadow </content>
      <content>2nd length: vertical offset of the shadow</content>
      <content>3rd length: blur radius</content>
      <content>4th length: spread distance</content>
      <content>color: color of the shadow</content>
      <content>inset: if present, changes the drop shadow from an outer box-shadow to an inner box-shadow (as if the box were cut out of the canvas and shifted behind it)</content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#shadow" />
  </context>
</item>
<item name="family-name" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The name of a font family of choice.</content></property>
    <property name="Specification" link="https://www.w3.org/TR/CSS2/fonts.html#value-def-family-name" />
  </context>
</item>
<item name="generic-family" type="value space" noindex="noindex">
  <context>
    <property name="description"><content>The name of a generic font family, one of 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'.</content></property>
    <property name="Specification" link="https://www.w3.org/TR/CSS2/fonts.html#value-def-family-name" />
  </context>
</item>
  
<!-- this is a dup of line-width ; @@@ TODO: remove once merging versions is solved -->
 <item name="border-width" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;border-width> = thin | medium | thick | &lt;<span type="value space" infoset="css">length</span>></content></property>
    <property name="Specification" link="/TR/CSS2/box.html#value-def-border-width"/>
  </context>
 </item>
 <item name="line-width" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;line-width> = thin | medium | thick | &lt;<span type="value space" infoset="css">length</span>></content></property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#line-width"/>
  </context>
 </item>

 <!-- this is a dup of line-style ; @@@ TODO: remove once merging versions is solved -->
 <item name="border-style" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;border-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset</content></property>
    <property name="description">
      <content>none:     No border</content>
      <content>hidden: Same as 'none', except in terms of border conflict resolution for table elements</content>
      <content>dotted:     The border is a series of dots. </content>
      <content>dashed:     The border is a series of short line segments. </content>
      <content>solid:     The border is a single line segment. </content>
      <content>double:     The border is two solid lines. The sum of the two lines and the space between them equals the value of <span type="property" infoset="css">border-width</span>. </content>
      <content>groove:     The border looks as though it were carved into the canvas. </content>
      <content>ridge:     The opposite of 'groove': the border looks as though it were coming out of the canvas. </content>
      <content>inset:     The border makes the box look as though it were embedded in the canvas. </content>
      <content>outset:     The opposite of 'inset': the border makes the box look as though it were coming out of the canvas. </content>
    </property>
    <property name="Specification" link="/TR/CSS2/box.html#value-def-border-style"/>
  </context>
 </item>
 <item name="line-style" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;border-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset</content></property>
    <property name="description">
      <content>none:     No border</content>
      <content>hidden: Same as 'none', except in terms of border conflict resolution for table elements</content>
      <content>dotted:     The border is a series of dots. </content>
      <content>dashed:     The border is a series of short line segments. </content>
      <content>solid:     The border is a single line segment. </content>
      <content>double:     The border is two solid lines. The sum of the two lines and the space between them equals the value of <span type="property" infoset="css">border-width</span>. </content>
      <content>groove:     The border looks as though it were carved into the canvas. </content>
      <content>ridge:     The opposite of 'groove': the border looks as though it were coming out of the canvas. </content>
      <content>inset:     The border makes the box look as though it were embedded in the canvas. </content>
      <content>outset:     The opposite of 'inset': the border makes the box look as though it were coming out of the canvas. </content>
    </property>
    <property name="Specification" link="https://drafts.csswg.org/css-backgrounds-3/#line-style"/>
  </context>
 </item>


 <item name="margin-width" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;margin-width&gt; = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>> | auto</content></property>
    <property name="Specification" link="/TR/CSS2/box.html#value-def-margin-width"/>
  </context>
 </item>
 <item name="padding-width" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;padding-width&gt; = &lt;<span type="value space" infoset="css">length</span>> | &lt;<span type="value space" infoset="css">percentage</span>></content></property>
    <property name="Specification" link="/TR/CSS2/box.html#value-def-padding-width"/>
  </context>
 </item>
 <item name="shape" type="value space" noindex="noindex">
  <context>
    <property name="Syntax">
      <content>&lt;shape&gt; = rect(&lt;top>, &lt;right>, &lt;bottom>, &lt;left>)</content>
      <content>&lt;top> = &lt;<span type="value space" infoset="css">length</span>> | auto</content>
      <content>&lt;right> = &lt;<span type="value space" infoset="css">length</span>> | auto</content>
      <content>&lt;bottom> = &lt;<span type="value space" infoset="css">length</span>> | auto</content>
      <content>&lt;left> = &lt;<span type="value space" infoset="css">length</span>> | auto</content>
    </property>
    <property name="description">
      <content>top and bottom:     offsets from the top border edge of the box. Negative lengths are permitted.</content>
      <content>right and left:     offsets from the left border edge of the box. Negative lengths are permitted.</content>
    </property>
    <property name="Specification" link="/TR/CSS2/box.html#value-def-shape"/>
  </context>
  </item>
  <item name="identifier" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_)</content></property>
    <property name="Specification" link="/TR/CSS2/syndata.html#value-def-identifier"/>
  </context>
  </item>
  <item name="counter" type="value space" noindex="noindex">
    <context>
      <property name="Syntax"><content>&lt;counter> =  &lt;<span type="value space" infoset="css">counter()</span>> | &lt;<span type="value space" infoset="css">counters()</span>></content></property>
      <property name="Specification" link="/TR/CSS2/syndata.html#value-def-counter"/>
  </context>
  </item>
  <item name="counter()" type="value space">
    <context>
      <property name="description"><content>Refers to the value of the identified counter in the optional list-style-type.</content></property>
      <property name="Syntax"><content>&lt;counter()> = counter(&lt;<span type="value space" infoset="css">identifier</span>> [, &lt;<span type="property" infoset="css">list-style-type</span>>]?)</content></property>
      <property name="Specification" link="/TR/CSS2/syndata.html#value-def-counter"/>
  </context>
  </item>
  <item name="counters()" type="value space">
    <context>
      <property name="description"><content>Refers to the nested value of the identified counter, with &lt;string> as a separators of levels, in the optional list-style-type.</content></property>
      <property name="Syntax"><content>&lt;counters()> = counters(&lt;<span type="value space" infoset="css">identifier</span>>, &lt;<span type="value space" infoset="css">string</span>> [, &lt;<span type="property" infoset="css">list-style-type</span>>]?)</content></property>
      <property name="Specification" link="/TR/CSS2/syndata.html#value-def-counter"/>
  </context>
  </item>

  <item name="alphavalue" type="value space" noindex="noindex">
    <context>
      <property name="description"><content>Syntactically a &lt;<span type="value space" infoset="css">number</span>>. The uniform opacity setting to be applied across an entire object. Any values outside the range 0.0 (fully transparent) to 1.0 (fully opaque) will be clamped to this range</content></property>
      <property name="Specification" link="/TR/css3-color/#alphavalue-def"/>
  </context>
  </item>
  <item name="keyframes-name" type="value space" noindex="noindex">
    <context>
      <property name="Syntax"><content>&lt;keyframes-name> = &lt;<span type="value space" infoset="css">custom-ident</span>> | &lt;<span type="value space" infoset="css">string</span>></content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-keyframes-name"/>
  </context>
  </item>
  <item name="custom-ident" type="value space" noindex="noindex">
    <context>
      <property name="description"><content>Any valid CSS identifier that would not be misinterpreted as a pre-defined keyword in that property’s value definition.</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-values-4/#identifier-value"/>
  </context>
  </item>
  <item name="keyframe-block" type="value space" noindex="noindex">
    <context>
      <property name="Syntax"><content>&lt;keyframes-block> = &lt;<span type="value space" infoset="css">keyframe-selector</span>># { &lt;declaration-list&gt; }</content></property>
      <property name="description"><content>The &lt;declaration-list> inside of &lt;keyframe-block> accepts any CSS property except those defined in CSS Animations. None of the properties interact with the cascade so using !important on them is invalid and will cause the property to be ignored.</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-keyframes-name"/>
  </context>
  </item>
  <item name="single-animation" type="value space" noindex="noindex">
    <context>
      <property name="Syntax"><content>&lt;single-animation> = &lt;<span type="value space" infoset="css">time</span>> || &lt;<span type="value space" infoset="css">single-timing-function</span>> || &lt;<span type="value space" infoset="css">time</span>> || &lt;<span type="value space" infoset="css">single-animation-iteration-count</span>> || &lt;<span type="value space" infoset="css">single-animation-direction</span>> || &lt;<span type="value space" infoset="css">single-animation-fill-mode</span>> || &lt;<span type="value space" infoset="css">single-animation-play-state</span>> || [ none | &lt;<span type="value space" infoset="css">keyframes-name</span>> ]</content></property>
      <property name="description"><content>The first value in each &lt;single-animation> that can be parsed as a &lt;time> is assigned to the animation-duration, and the second value in each &lt;single-animation> that can be parsed as a &lt;time> is assigned to animation-delay.</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-animation"/>
  </context>
  </item>
  <item name="keyframe-selector" type="value space" noindex="noindex">
    <context>
      <property name="Syntax"><content>&lt;keyframe-selector> = from | to | &lt;<span type="value space" infoset="css">percentage</span>></content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-keyframes-name"/>
  </context>
  </item>
<item name="single-timing-function" type="value space" noindex="noindex">
    <context>
      <property name="description"><content>The values and meaning of &lt;single-timing-function> are identical to those of lt;<span type="value space" infoset="css">single-transition-timing-function</span>>. The timing function specified applies to each iteration of the animation, not the entire animation in full..</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-timing-function"/>
  </context>
</item>

<item name="single-animation-iteration-count" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-animation-iteration-count> = infinite | &lt;<span type="value space" infoset="css">number</span>></content></property>
    <property name="description">
      <content>infinite: the animation will repeat forever.</content>
      <content>&lt;number&gt;: The animation will repeat the specified number of times. If the number is not an integer, the animation will end partway through its last cycle. Negative numbers are invalid.</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-animation-iteration-count"/>
  </context>
  </item>
<item name="single-animation-direction" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-animation-direction> = normal | reverse | alternate | alternate-reverse </content></property>
    <property name="description">
      <content>normal: All iterations of the animation are played as specified.</content> 
      <content>reverse: All iterations of the animation are played in the reverse direction from the way they were specified. </content>
      <content>alternate: The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.</content>
      <content>alternate-reverse: The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.</content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-animation-direction"/>
  </context>
</item>
<item name="single-animation-fill-mode" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-animation-fill-mode> = none | forwards | backwards | both </content></property>
    <property name="description">
      <content>none:      The animation has no effect when it is applied but not executing. .</content> 
      <content>forwards: After the animation ends, the animation will apply the property values for the time the animation ended</content>
      <content>backwards: During the period defined by animation-delay, the animation will apply the property values defined in the keyframe that will start the first iteration of the animation.</content>
      <content>both: The effects of both forwards and backwards fill apply. </content></property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-animation-fill-mode"/>
  </context>
  </item>
<item name="single-animation-play-state" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-animation-play-state> = running | paused </content></property>
    <property name="description">
      <content>running:      While this property is set to running, the animation proceeds as normal. </content> 
      <content>paused: While this property is set to paused, the animation is paused. </content>
    </property>
      <property name="Specification" link="https://drafts.csswg.org/css-animations-1/#typedef-single-animation-play-state"/>
  </context>
</item>
<item name="single-transition" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-transition> =  [ none | &lt;<span type="value space" infoset="css">single-transition-property</span>> ] || &lt;<span type="value space" infoset="css">time</span>> || &lt;<span type="value space" infoset="css">single-transition-timing-function</span>> || &lt;<span type="value space" infoset="css">time</span>></content></property>
    <property name="description">
      <content>Note that order is important within the items in this property: the first value that can be parsed as a time is assigned to the transition-duration, and the second value that can be parsed as a time is assigned to transition-delay.</content>
    </property>
      <property name="Specification" link="https://drafts.csswg.org/css-transitions-1/#single-transition"/>
  </context>
</item>
<item name="single-transition-property" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-transition-property> = all | &lt;<span type="value space" infoset="css">custom-ident</span>>;</content></property>
    <property name="description">
      <content>the keyword all indicates that all properties are to be transitioned.</content>
    </property>
      <property name="Specification" link="https://drafts.csswg.org/css-transitions-1/#single-transition-property"/>
  </context>
</item>
<item name="single-transition-timing-function" type="value space" noindex="noindex">
  <context>
    <property name="Syntax"><content>&lt;single-transition-timing-function> = ease | linear | ease-in | ease-out | ease-in-out | step-start | step-end | steps(&lt;<span type="value space" infoset="css">integer</span>>[, [ start | end ] ]?) | cubic-bezier(&lt;<span type="value space" infoset="css">number</span>>, &lt;<span type="value space" infoset="css">number</span>>, &lt;<span type="value space" infoset="css">number</span>>, &lt;<span type="value space" infoset="css">number</span>>)</content></property>
    <property name="description">
      <content>ease: The ease function is equivalent to cubic-bezier(0.25, 0.1, 0.25, 1). </content>
      <content>linear: The linear function is equivalent to cubic-bezier(0, 0, 1, 1).</content>
      <content>ease-in: The ease-in function is equivalent to cubic-bezier(0.42, 0, 1, 1).</content>
      <content>ease-out:  The ease-out function is equivalent to cubic-bezier(0, 0, 0.58, 1).</content>
      <content>ease-in-out: The ease-in-out function is equivalent to cubic-bezier(0.42, 0, 0.58, 1). </content>
      <content>step-start:  The step-start function is equivalent to steps(1, start). </content>
      <content>step-end: The step-end function is equivalent to steps(1, end). </content>
      <content>steps(&lt;integer>[, [ start | end ] ]?): Specifies a stepping function. The first parameter specifies the number of intervals in the function. The second parameter, which is optional, is either the value start or end, and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value end.</content>
      <content>cubic-bezier(&lt;number>, &lt;number>, &lt;number>, &lt;number>): Specifies a cubic-bezier curve. The four values specify points P1 and P2 of the curve as (x1, y1, x2, y2). Both x values must be in the range [0, 1] or the definition is invalid. The y values can exceed this range.</content>
    </property>
      <property name="Specification" link="https://drafts.csswg.org/css-transitions-1/#single-transition-timing-function"/>
  </context>
</item>


 <item name="em" type="unit">
  <context>
    <property name="description"><content>Equal to the computed value of the <span type="property" infoset="css">font-size</span> property of the element on which it is used. </content></property>

  </context>
</item>
<item name="ex" type="unit">
  <context>
    <property name="description"><content>Equal to the used x-height of the first available font. </content></property>
  </context>
</item>
<item name="ch" type="unit">
  <context>
    <property name="description"><content>Equal to the used advance measure of the “0” glyph in the font used to render it. The advance measure of a glyph is its advance width or height, whichever is in the inline axis of the element.</content></property>
  </context>
</item>
<item name="ic" type="unit">
  <context>
    <property name="description"><content>Equal to the used advance measure of the “水” (CJK water ideograph, U+6C34) glyph found in the font used to render it.</content></property>
  </context>
</item>
<item name="rem" type="unit">
  <context>
    <property name="description"><content>Equal to the computed value of the <span type="property" infoset="css">font-size</span> on the root element. When specified on the font-size property of the root element, the rem units refer to the property’s initial value. </content></property>
  </context>
</item>
<item name="vw" type="unit">
  <context>
    <property name="description"><content> Equal to 1% of the width of the initial containing block. </content></property>
  </context>
</item>
<item name="vh" type="unit">
  <context>
    <property name="description"><content> Equal to 1% of the height of the initial containing block. </content></property>
  </context>
</item>
<item name="vi" type="unit">
  <context>
    <property name="description"><content>Equal to 1% of the size of the initial containing block in the direction of the root element’s inline axis. </content></property>
  </context>
</item>
<item name="vb" type="unit">
  <context>
    <property name="description"><content>Equal to 1% of the size of the initial containing block in the direction of the root element’s block axis. </content></property>
  </context>
</item>
<item name="vmin" type="unit">
  <context>
    <property name="description"><content>     Equal to the smaller of <span type="unit" infoset="css">vw</span> or <span type="unit" infoset="css">vh</span>.  </content></property>
  </context>
</item>
<item name="vmax" type="unit">
  <context>
    <property name="description"><content>     Equal to the larger of <span type="unit" infoset="css">vw</span> or <span type="unit" infoset="css">vh</span>.  </content></property>
  </context>
</item>
<item name="cm" type="unit">
  <context>
    <property name="description"><content>1cm = 96px/2.54 </content></property>
  </context>
</item>
<item name="mm" type="unit">
  <context>
    <property name="description"><content>1mm = 1/10th of 1<span type="unit" infoset="css">cm</span> </content></property>
  </context>
</item>
<item name="q" type="unit">
  <context>
    <property name="description"><content>1q = 1/40th of 1<span type="unit" infoset="css">cm</span> </content></property>
  </context>
</item>
<item name="in" type="unit">
  <context>
    <property name="description"><content>1in = 2.54<span type="unit" infoset="css">cm</span> = 96<span type="unit" infoset="css">px</span> </content></property>
  </context>
</item>
<item name="pc" type="unit">
  <context>
    <property name="description"><content>1pc = 1/6th of 1<span type="unit" infoset="css">in</span> </content></property>
  </context>
</item>
<item name="pt" type="unit">
  <context>
    <property name="description"><content>1pt = 1/72th of 1<span type="unit" infoset="css">in</span> </content></property>
  </context>
</item>
<item name="px" type="unit">
  <context>
    <property name="description">
      <content>1pt = 1/96th of 1<span type="unit" infoset="css">in</span> </content>
      <content>The reference pixel is the visual angle of one pixel on a device with a pixel density of 96dpi and a distance from the reader of an arm’s length.</content>
    </property>
  </context>
</item>
<item name="deg" type="unit">
  <context>
    <property name="description">
      <content>     Degrees. There are 360 degrees in a full circle. </content>
    </property>
  </context>
</item>
<item name="grad" type="unit">
  <context>
    <property name="description">
      <content>     Gradians, also known as "gons" or "grades". There are 400 gradians in a full circle.  </content>
    </property>
  </context>
</item>
<item name="rad" type="unit">
  <context>
    <property name="description">
      <content>     Radians. There are 2π radians in a full circle.  </content>
    </property>
  </context>
</item>
<item name="turn" type="unit">
  <context>
    <property name="description">
      <content>     Turns. There is 1 turn in a full circle. </content>
    </property>
  </context>
</item>
<item name="s" type="unit">
  <context>
    <property name="description">
      <content> Seconds</content>
    </property>
  </context>
</item>
<item name="ms" type="unit">
  <context>
    <property name="description">
      <content>    Milliseconds. There are 1000 milliseconds in a second. </content>
    </property>
  </context>
</item>
<item name="Hz" type="unit">
  <context>
    <property name="description">
      <content>    Hertz. It represents the number of occurrences per second. </content>
    </property>
  </context>
</item>
<item name="kHz" type="unit">
  <context>
    <property name="description">
      <content>    KiloHertz. A kiloHertz is 1000 <span type="unit" infoset="css">Hz</span>. </content>
    </property>
  </context>
</item>
<item name="dpi" type="unit">
  <context>
    <property name="description">
      <content>    Dots per inch. </content>
    </property>
  </context>
</item>
<item name="dpcm" type="unit">
  <context>
    <property name="description">
      <content>    Dots per centimeter. </content>
    </property>
  </context>
</item>
<item name="dppx" type="unit">
  <context>
    <property name="description">
      <content>    Dots per <span type="unit" infoset="css">px</span> unit. </content>
    </property>
  </context>
</item>
</infoset>
</infosets>
