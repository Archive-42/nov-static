{
  "template": {
    "taskId": "8b8ebd33-a70a-450b-a600-3485e1094b63",
    "name": "Preloaded State",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-preloaded-state-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "preloaded-state"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "\n# Preloaded State\n\nCurrently, when the page in the browser is reloaded, any state data stored in\nthe Redux store is lost. Later in this lesson, you'll learn how to use Redux to\ninteract with an API to persist state data. Until then (or if your React\napplication doesn't use an API), you can use the combination of Redux's ability\nto create a store with _preloaded state_ with the browser's local storage to\npersist store state across page reloads.\n\nWhen you finish this article, you should be able to:\n\n* Create a Redux store with preloaded state\n* Use the browser's local storage to persist a Redux store's state across page\n  reloads\n\n## Creating a store with preloaded state\n\nSo far, your Redux stores have initialized with no initial state. Sometimes,\nthough, you may want to take pre-existing data and pass it into the store upon\ninitialization. Such data can be passed to the `createStore` method using the\n`preloadedState` argument:\n\n```js\nconst preloadedState = {\n  fruit: [\n    'APPLE',\n    'ORANGE',\n  ],\n  farmers: {\n    1: {\n      id: 1,\n      name: 'John Smith',\n      paid: false,\n    },\n    2: {\n      id: 2,\n      name: 'Sally Jones',\n      paid: false,\n    },\n  }\n};\n\nconst store = createStore(rootReducer, preloadedState);\n```\n\nA couple of things to note about preloading state:\n\n* The `preloadedState` must match the state shape (as produced by the reducers).\n* `preloadedState` is not the same as default state. Default state should always\n  be set in your reducers themselves.\n\n## Creating local storage helper functions\n\nTo assist with using the browser's local storage to persist a Redux store's\nstate across page reloads, start with creating a set of helper functions:\n\n```js\n// localStorage.js\n\nconst STATE_KEY = 'fruitstand';\n\nexport const loadState = () => {\n  try {\n    const stateJSON = localStorage.getItem(STATE_KEY);\n    if (stateJSON === null) {\n      return undefined;\n    }\n    return JSON.parse(stateJSON);\n  } catch (err) {\n    console.warn(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const stateJSON = JSON.stringify(state);\n    localStorage.setItem(STATE_KEY, stateJSON);\n  } catch (err) {\n    console.warn(err);\n  }\n};\n```\n\nThe `saveState` function is responsible for converting the `state` parameter\nvalue into JSON (using the `JSON.stringify` method) and saving the state JSON\nstring to the browser's local storage (using the `localStorage.setItem` method).\nA `try...catch` statement is used to catch and log any errors.\n\nThe `loadState` function is responsible for loading the state JSON from the\nbrowser's local storage (using the `localStorage.getItem` method). If the state\nJSON isn't stored in local storage, `undefined` is returned so the store's\nreducer function can initialize the state to its default value. If the state\nJSON is successfully retrieved from local storage, it's parsed into JavaScript\nobjects (using the `JSON.parse` method) and returned to the caller. A\n`try...catch` statement is used to catch and log any errors.\n\n## Saving state to local storage\n\nTo ensure that the persisted state in local storage doesn't get out of sync with\nthe store, you want to persist the state whenever it's updated. Knowing that the\nstore's reducer is called whenever there's an action dispatched to update the\nstate, you might be tempted to update your reducer like this:\n\n```js\nimport {\n  ADD_FRUIT,\n  ADD_FRUITS,\n  SELL_FRUIT,\n  SELL_OUT,\n} from '../actions/fruitActions';\nimport { saveState } from '../localStorage';\n\nconst fruitReducer = (state = [], action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case ADD_FRUIT:\n      const nextState = [...state, action.fruit];\n      saveState(nextState);  // Persist state data to local storage\n      return nextState;\n\n    // Case clauses removed for brevity.\n\n    default:\n      return state;\n  }\n};\n\nexport default fruitReducer;\n```\n\n**But don't do this!** Per the [official Redux docs on\nreducers][redux-js-reducers-handling-actions], reducers should stay _pure_ and\nnot cause _side effects_ (like calling APIs or persisting data to local\nstorage).\n\nTo keep your reducers pure, handle persisting state to local storage in the\nmodule where you create your store (`store.js`) by subscribing to listen for\nstate changes:\n\n```js\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport { saveState } from './localStorage';\n\nconst store = createStore(rootReducer);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;\n```\n\nNow whenever the store's state is updated, the `store.getState` method is called\nto get and pass the current state to the `saveState` method.\n\n## Loading state from local storage\n\nNow that you're persisting state to local storage, you can load state from local\nstorage and pass it to the `createStore` method as preloaded state:\n\n```js\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport { loadState, saveState } from './localStorage';\n\nconst preloadedState = loadState();\n\nconst store = createStore(rootReducer, preloadedState);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;\n```\n\nWith these updates in place, your Redux store's state will persist across page\nreloads.\n\n## What you learned\n\nIn this article, you learned how to create a Redux store with preloaded state.\nYou also learned how to use the browser's local storage to persist a Redux\nstore's state across page reloads.\n\n[redux-js-reducers-handling-actions]: https://redux.js.org/basics/reducers#handling-actions\n"
  },
  "success": true
}