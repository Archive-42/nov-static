{
  "template": {
    "taskId": "4e3c1912-eff5-4a51-9675-8ccc47fb5175",
    "name": "Redux Part 2 Learning Objectives",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/objectives/reading-redux-part-2-objectives.md",
    "type": "Reading",
    "timeEstimate": 0,
    "urls": [
      "redux-part-2-objectives"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Learning Objectives",
    "body": "\n# Redux Learning Objectives: Part 2\n\nTo keep things as simple as possible when initially learning Redux, you started\nwith using Redux independent of React. Now it's time to learn how to use Redux\nwithin a React application!\n\nAfter reading and practicing how to use Redux with React, you should be able to:\n\n* Add Redux actions, reducer(s), and a store to a React project\n* Update a React class component to subscribe to a Redux store to listen for\n  state changes\n* Update a React component to dispatch actions to a Redux store\n* Define multiple reducers to manage individual slices of state\n* Use the Redux `combineReducers` method to combine multiple reducers into a\n  single root reducer\n* Update a reducer to delegate a state update to a subordinate reducer\n* Describe how container components differ from presentational components\n* Write a container component to handle all of the Redux store interaction for\n  one or more presentational components\n* Use `Object.freeze` to prevent the current state within a reducer from being\n  mutated\n* Create a Redux store with preloaded state\n"
  },
  "success": true
}