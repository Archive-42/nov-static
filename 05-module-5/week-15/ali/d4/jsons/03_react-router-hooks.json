{
  "template": {
    "taskId": "0c4120ec-4646-45d7-ad18-692d2f1b20d3",
    "name": "React Router Hooks",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-hooks/readings/reading-intro-to-router-hooks-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "react-router-hooks"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# React Router Hooks\n\nNow it's time to dig into the specifics of how hooks can simplify **React** code\nwhen working with React Router, specifically `react-router-dom`.\n\nWhen you complete this lesson, you should be able to use the hooks that are\nbuilt into the `react-router-dom` package:\n\n* `useParams` for matching parameters in the current route\n* `useHistory` for navigation from code (without `Link` or `NavLink`)\n* `useLocation` for tracking url changes\n* `useRouteMatch` for checking if the current url matches a path format\n\n## `useParams`\n\nThe most common usage of hooks with `react-router-dom` is the case where \na RESTful path has one or more parameters, such as an `id`.\n\nFor example, the `id` in a path like `/user/:id` may be accessed as the \nproperty of an object returned by `useParams()`.\n\nOption 1\n```javascript\nconst params = useParams();\nconsole.log('User id is', params.id);\n```\n\nOption 2 (more common)\n```javascript\nconst { id } = useParams();\nconsole.log('User id is', id);\n```\n\nNow, consider this path `/user/:userId/doc/:docId`. It has two parameters, \n`userId` and `docId`; therefore, they would be accessed using\n`const { userId, docId } = useParams()`. Notice how the variables in the path\nmatch the properties on the objects returned by `useParams()`.\n\nHere's an expanded example showing a basic function component.\n\n```javascript\n// ./src/components/Document.js\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Document = () => {\n    const { userId, docId } = useParams();\n\n    return (\n        <>\n            <h2>Document {docId}</h2>\n            <p>Created by User {userId}</p>\n        </>\n    );\n};\n\nexport default Document;\n```\n\nAs a reminder, you'll need to wrap your components within a `<Router>` in order \nto use the hooks built into the `react-router-dom` package. Perhaps like this...\n\n```javascript\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom';\nimport Document from './components/Document';\n\n// For simplicity, Router and Switch are here instead of the traditional App.js\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route path='/user/:userId/doc/:docId' component={Document} />\n            {/* Other routes also */}\n        </Switch>\n    </Router>,\n  document.getElementById('root')\n);\n```\n\n## `useHistory`\n\nThe `useHistory()` hook gives you access to the **history** object, which is\na record of paths visited on the current browser tab.\n\nWhile there are a number of possibilities for what you can do with `history`, \nsome are more useful than others. Here are the top methods and property.\n\n* `push(path, [state])`\n  * Adds a new path to the history and navigates there\n  * `state` object is optional\n* `replace(path, [state])`\n  * Removes the current path from history before adding the new path\n  and navigating there\n  * `state` object is optional\n  * When the user goes back from the next path, they will skip the replaced path \n   (either with the browser's BACK button or the `goBack()` function)\n* `goBack()`\n  * Returns to the previous path in the history\n* `location` - the current location \n  * `pathname` - the path\n  * `search` - query params (following a `?` in the url), if any\n  * `hash` - value following a `#` in the url, if any\n  * `state` - object provided with `push()` or `replace()`\n\nThe `state` object is a way for you to pass one or more data values between\nroutes. The sender creates the object and passes it as the second argument to\n`history.push` or `history.replace`; the receiver accesses the object using\n`history.location.state`.\n\nFor more capabilities, you can read the [documentation on History], if you so \ndesire.\n\nHere's an example of a function component using history for custom navigation.\n\n```javascript\n// ./src/components/ComingSoon.js\n\nimport React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nconst ComingSoon = () => {\n    const history = useHistory();\n\n    useEffect(() => {\n        const tid = setTimeout(() => {\n            history.replace('/');\n        }, 2000);\n        return () => clearTimeout(tid);\n    });\n\n    return (\n        <h2>Coming Soon</h2>\n    );\n};\n\nexport default ComingSoon;\n```\n\n> ASIDE: This example also makes use of the `useEffect` hook discussed in other\n> lessons in order to automatically redirect the user after a timeout period.\n> In particular, notice how `return` is used to prevent warnings in React\n> if the user chooses to leave the page before the timeout period ends.\n\n## `useLocation`\n\nThe preferred approach to accessing the location from within a component is \nthrough the history object. However, there is a special case where the \n`useLocation` hook is useful - connecting to a service which tracks page loads.\n\nOne example is **Google Analytics**.\n\n```javascript\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    useLocation\n} from 'react-router-dom';\nimport ga from 'react-ga';\n\nconst TrackingWrapper = ({ children }) => {\n    const location = useLocation();\n    React.useEffect(() => {\n        ga.send(['pageview', location.pathname]);\n    }, [location]);\n    return children;\n}\n\nReactDOM.render(\n    <Router>\n        <TrackingWrapper>\n            <Switch>\n                {/* App and/or Routes, etc. */}\n            </Switch>\n        </TrackingWrapper>\n    </Router>,\n  document.getElementById('root')\n);\n\n```\n\nThe setup and usage of Google Analytics is beyond the scope of this lesson. \nHowever, if you'd like to learn more you can search online for examples, such as\n[Google Analytics with React]. In short, the call to `ga.send()` logs whatever\nevent you pass it into your GA account. Then you can sign in to GA to view and\nanalyze the recorded data including days and times when users are most active,\nwhat country your visitors are coming from, and much more.\n\n## `useRouteMatch`\n\nIf you'd like to check for a matching path before rendering a route, then\nturn to `useRouteMatch`. This hook accepts an argument which is compared to the\ncurrent path in the same fashion as `Route` and returns a boolean (`true` or \n`false`).\n\nFor example, `useRouteMatch('/report/advanced')` could be\nused to show (or hide, when not matching) an advanced user interface for \nmodifying a report on the fly.\n\n## Bring it together\n\nHere is an example of a component which lays the framework for a thorough usage\nof React Router hooks (except `location` which is better used elsewhere). Use \nyour detective skills to figure out as much as you can. A thorough explanation \nis provided in one of the video lessons.\n\nImagine the following `Report` component is placed in a router with\n`<Route path={['/report/:date', '/report']} component={Report}/>`.\n\n> BONUS: In case you didn't know already, a router can use an array to specify\n> multiple paths to match with the provided component.\n\n```javascript\n// ./src/components/Report.js\n\nimport React, {useEffect} from 'react';\nimport { useRouteMatch, useHistory, useParams } from 'react-router-dom';\n\nconst Report = () => {\n    const matchUC = useRouteMatch({\n        path: '/REPORT*',\n        strict: true,\n        sensitive: true\n    });\n    const matchAdvanced = useRouteMatch([\n        '/report/advanced',\n        '/report/*/advanced'\n    ]);\n    const matchAll = useRouteMatch('/report/all');\n    const { date } = useParams();\n    const history = useHistory();\n\n    useEffect(() => {\n        if (matchUC)\n            history.replace(history.location.pathname.toLowerCase());\n    }, [matchUC, history])\n\n    if (matchUC)\n        return \"\"\n\n    if (!date) return (\n        <p>Select Report\n            <br/><button onClick={() =>\n                history.push('/report/last-week')\n            }>Last Week</button>\n            <br/><button onClick={() =>\n                history.push('/report/last-month')\n            }>Last Month</button>\n            <br/><button onClick={() =>\n                history.push('/report/all')\n            }>View All</button>\n        </p>\n    );\n\n    if (date === 'advanced') return (\n        <p>Select Report\n            <br/><button onClick={() =>\n                history.push('/report/last-week/'+date)\n            }>Last Week</button>\n            <br/><button onClick={() =>\n                history.push('/report/last-month/'+date)\n            }>Last Month</button>\n            <br/><button onClick={() =>\n                history.push('/report/all/'+date)\n            }>View All</button>\n        </p>\n    );\n\n    if (matchAll) return (\n        <>\n            <h2>Complete Report of Everything</h2>\n            {matchAdvanced && <p>... Alternate Advanced Controls ...</p>}\n        </>\n    )\n\n    return (\n        <>\n            <h2>Report For {date}</h2>\n            {matchAdvanced && <p>... Advanced Controls ...</p>}\n        </>\n    );\n};\n\nexport default Report;\n```\n\nThe various routes to explore include\n\n* `/REPORT` or `/REPORT/SOMETHING/ADVANCED` or any other variation starting with\nREPORT in all caps will redirect to the same url in lowercase\n* `/report` or `/report/advanced` will show a few buttons\n* `/report/all` will show a different title than `/report/something-else`\n(with or without the next option)\n* any url ending in `/advanced` will show \"Advanced Controls\"\n\n## What you've learned\n\nThe `react-router-dom` package comes with hooks you can use to simplify the code \nin your **React** applications. For example, utilizing \n`const { id } = useParams()` within a component displayed in the path \n`/user/:id` give you access to the value that replaces the `:id` parameter. \nNavigating can be accomplished with `const history = useHistory()` followed by \n`history.push('/a/new/path')`, and you can even include a `state` object as \na second parameter. Additionally, `useLocation` can help you connect to tracking \nservices, and `useRouteMatch` might come in handy once in while for pattern \nmatching on the path itself. In short, the handling of RESTful paths in React is \nenhanced when you embrace the hooks available in React Router.\n\nFor future reference, you may want to bookmark the \n[official documentation on React Router Hooks].\n\n\n[documentation on History]: https://reactrouter.com/web/api/history\n[Google Analytics with React]: https://levelup.gitconnected.com/using-google-analytics-with-react-3d98d709399b\n[official documentation on React Router Hooks]: https://reactrouter.com/web/api/Hooks\n"
  },
  "success": true
}