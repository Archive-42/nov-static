{
  "template": {
    "taskId": "883bdcfa-5674-439b-be16-a303b32ba738",
    "name": "Pokedex: React Hooks Project",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-hooks/projects/pokedex-hooks/phase-1-README.md",
    "type": "Project",
    "timeEstimate": 3600,
    "urls": [
      "pokedex--react-hooks"
    ],
    "topic": "Thursday - Hooks",
    "subtopic": "Projects",
    "body": "\n# Pokedex Hooks Project: Phase 1\n\nIn today's project you will refactor class-based components that make use of\nlifecycle methods to function components that make use of React Hooks! At this\npoint, you have already built an application with class components and context\nto manage application state. You've also built the same application to learn\nabout how to use Redux instead of React Context for state-management. \n\nIn this project, you'll build your application with React and Redux hooks! You\nwill implement the:\n\n- `useState` hook to manage a component's state\n- `useEffect` hook to manage a component's side effect operations\n- `useDispatch` hook to dispatch actions from with a component file\n- `useSelector` hook access slices of state from the Redux store\n- `useContext` hook to manage your application with Context instead of Redux\n\n## Phase 1: State-based hooks application\n\nYou'll need the backend for the Pokedex application. Take a moment to clone it\nfrom https://github.com/appacademy-starters/pokedex-backend and get it set up.\n\nThe API for the backend is also documented in repository's README.\n\nOnce you have that up and running, you'll begin working out of the solution for\nthe state-based class components project. Begin by cloning the state-based\napplication from\nhttps://github.com/appacademy-starters/react-hooks-pokedex-starter.git.\n\nThroughout today, you'll work on refactoring each class component in the\napplication to be a function component that makes use of React Hooks!\n\n### Explore the reference application\n\nAs you might remember, your current application comprises of the following\ncomponents:\n\n* `App`: Does the browser routing and top-level fetches of data to draw the data\n* `LoginPanel`: Shows the login panel\n* `PokemonBrowser`: The browser that draws the list on the left after logging in\n   and has a route to the `PokemonDetail` when the route matches \"/pokemon/:id\"\n* `PokemonDetail`: Makes a fetch to the API on mount and update to load the\n   details of the selected Pokemon\n\n### Refactor components\n\nAs you're refactoring your application's components, you'll most likely hit bugs\nand break your application. While you're refactoring each component, make sure\nto test that your refactored code is working before moving on to refactor the\nnext component. As a general guideline, you should refactor each component from\nthe lowest, most nested component up to the top-most parent:\n\n1. `PokemonDetail`\n2. `PokemonBrowser`\n3. `LoginPanel`\n4. `App`\n\nYou'll update how each component sets its default state by using the `useState`\nhook. You'll also refactor the lifecycle methods of each component into side\neffect operations managed by the `useEffect` hook. At the end of this exercise,\nyou should have a good understanding of how to use the basic `useState` and\n`useEffect` hooks to write function components with side effect operations.\n\nTake this project as a way to practice learning new technologies by referencing\nofficial documentation:\n\n* [Using the State Hook]\n* [Using the Effect Hook]\n* [Hooks API Reference]\n\nRemember, Create React App will let your React application use environment\nvariables that start with `REACT_APP_`. Just like with your state-based\napplication built with class components, you can import environment variables\nfrom the `config.js` file to clean up your code for specifying the URL of the\nbackend.\n\nOnce you have finished refactoring, take a moment to commit your changes to the\nmain branch of your `react-hooks-pokedex-starter` project:\n\n```sh\ngit add .\ngit commit -m \"Refactor app to implement hooks\"\n```\n\nIn the next two phases, you'll create two different projects in two different\nbranches that use this commit as a starting point. You'll branch off from this\npoint to create a Redux-based project and a Context-based project (both\nutilizing hooks).\n\n[Using the State Hook]: https://reactjs.org/docs/hooks-state.html\n[Using the Effect Hook]: https://reactjs.org/docs/hooks-effect.html\n[Hooks API Reference]: https://reactjs.org/docs/hooks-reference.html\n"
  },
  "success": true
}