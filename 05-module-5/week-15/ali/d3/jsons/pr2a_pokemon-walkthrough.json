{
  "template": {
    "taskId": "85c2dc01-5579-4cf7-ae08-b101d5af2d93",
    "name": "Pokemon Redux Walk-Through Part 1",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/aggregates/pokedex/redux-based/README-01-first-state.md",
    "type": "Project",
    "timeEstimate": 2700,
    "urls": [
      "walk-through-part-1"
    ],
    "topic": "Wednesday - React + Redux",
    "subtopic": "Pokedex With Redux",
    "body": "# Redux-Based Pokedex Project\n\nInstead of building a new application, you will spend time refactoring an\nexisting application, one that is not yours. Navigating around someone else's\ncode is an interesting way to learn what to do and what _not_ to do. The\nstarter application is in a little bit of a mess and needs your help to get\nunmessed.\n\nBy the end of this walk-through, you will be able to:\n\n* Describe the Redux data cycle\n* Explain a _reducer_\n* Configure a React application to use Redux\n* Use connected components to access Redux state\n* Use composed reducers to simplify state management\n* Configure a React application to use the Redux development tools\n\n## Getting started\n\nYou'll need the backend of the application.\n\nIf you have *not* cloned it, please clone the repository from\nhttps://github.com/appacademy-starters/pokedex-backend.\n\nIf you have cloned it, please get the latest (things sometimes change) by going\nto the repository in your Terminal and typing `git pull origin master`. This\nwill get the latest code for you.\n\nYou'll need the starter application. Please clone the repository from\nhttps://github.com/appacademy-starters/redux-pokedex-starter.\n\n## Tour the application\n\nThis application is a Heroku-deployable React application. Here are the files\nthat are in it. Hopefully, you find nothing surprising about the file layout or\nthe intent of each file. Take a moment to look in each file to get the lay of\nthe land. (Really, take a look in each file. You may feel like jumping right\ninto it, but looking at other people's code is helpful. This is one of the\nbenefits to the pair-programming learning style at App Academy.)\n\n```\n.\n├── package-lock.json        - The NPM lock file\n├── package.json             - The NPM file\n├── public\n│   └── index.html           - The page that gets served to the browser\n├── server.js                - A very light-weight server for Heroku\n└── src\n    ├── App.js               - The main application component\n    ├── Fab.js               - A floating action button component\n    ├── LoginPanel.js        - The form that shows the login\n    ├── LogoutButton.js      - A component for logging out\n    ├── PokemonBrowser.js    - The component that shows the list and detail\n    ├── PokemonDetail.js     - The component that shows the detail of a Pokemon\n    ├── PokemonForm.js       - The form to create a new Pokemon\n    ├── config.js            - Configuration variables\n    ├── index.css            - Styling for the application\n    └── index.js             - The main entry point for Webpack\n```\n\nStart the backend with `npm run dev`. Start the React application with `npm run\ndev`. Make sure it runs. It looks for a local backend at\n`http://localhost:8000`, so make sure that's where the backend is running.\n\n## Install Redux and DevTools\n\nIf you haven't already, install [Redux DevTools][1]. During development, you can\nwatch the Redux store handle actions and change state in the timeline.\n\nTo use Redux in this application, you need to install it and the connector\nbetween Redux and React. You will also want to use asynchronous actions with the\nRedux store, so you'll want a middleware, one like [Redux Thunk][3].\n\n```\nnpm install react-redux redux redux-thunk\n```\n\nThere are more than one asynchronous action-handling middleware out there in\nthe world. Redux Thunk happens to be one of the oldest and widely used.\n\nWhenever you consider installing a library or framework, you should make sure\nthat your existing application meets the expectations. For example, as of the\ntime of this writing, to [install \"react-redux\"][2], your application needs to\nsupport **React 16.8.3** or later. Take a look in the **package.json** file to\nmake sure that an acceptable version of React is listed in there. If not, you\nwill need to upgrade the version of React used by this project by running\nsomething like `npm upgrade`.\n\n## Setting up the store\n\nThe _store_ is the object (and supporting objects and functions) that will\ncontain the state of the application. This centralizes the state so that,\npresumably, you can better reason about it.\n\nThere are a couple of ways to organize your state management code, each with\ntheir own benefits. Redux has a list of different articles about [this very\ntopic][4]. You should choose to organize your code in a way that makes sense to\nyour team (or follow any conventions that already exist). This walk-through will\nfollow the [Ducks][5] approach of layout.\n\nIn the **src** directory, create a new directory named **store**. In that new\ndirectory, create a new file named **configureStore.js**. In that file, put\nthis code. This is boilerplate code and will appear in nearly every application\nthat you have that uses Redux. A description of the contents follows the code\nblock.\n\n```js\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({\n});\n\nconst configureStore = initialState => {\n  return createStore(\n    reducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk)),\n  );\n};\n\nexport default configureStore;\n```\n\n(If you're looking in your console after putting this code in there, you'll\nsee an error about not having any valid reducers. That's true, there are no\nvalid reducers. You'll fix that in just a moment.)\n\nOn those first two lines, the code imports the stuff it will need to create and\nconfigure a store.\n\n* `createStore` is the function from Redux that creates the state-management\n  object\n* `applyMiddleware` allows you to plug in extra functionality into the\n  state-management workflow (in this case, Redux Thunk)\n* `combineReducers` takes many reducers and combines them into a single one\n* `compose` is a function that _composes_ functions from right-to-left, that is,\n  it puts them together, the return value of the right-most getting passed to\n  the second right-most, return values getting passed from that to the third\n  right-most, and so on, until the first function in the list returns its final\n  value to the store ([documentation][7] for compose)\n* `thunk` is the middleware that will allow you to make asynchronous calls\n  because you can't do that in Redux actions\n\nThe fourth line creates a new `composeEnhancers` variable that will be either\nthe Redux DevTools special compose function, or the one from Redux, if DevTools\nis not installed. This allows browsers that have the DevTools installed to take\nadvantage of watching the changes in the store.\n\nThe sixth and seventh lines is just the thing that combines the reducers for\nthe store into a single reducer. More about that later.\n\nThe ninth line declares a function that gets exported at the end of the file\nthat creates and configures the store with the `reducer`, the `initialState`\npassed into the function, and composes the React Thunk middleware and the Redux\nDevTools, if they exist.\n\nTo use this functionality, open **src/index.js** and add two imports to the top\nof the file.\n\n```js\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\n```\n\nThose two lines import a Context Provider from React Redux and the function you\njust created above. Now, under those lines and before the `ReactDOM.render`\nstatement, create a store.\n\n```js\nconst store = configureStore();\n```\n\nFinally, wrap the `App` component in a `Provider` component that has a \"store\"\nproperty assigned the value of `store` that you created in the previous code\nsnippet, just as you saw in the _Passing the Store_ section of the _Usage with\nReact_ article you read in the homework preparing you for these topics.\n\nIf everything works, you should be able to view the Redux DevTools in your\nbrowser's DevTools environment as a new tab. You should see the \"@@INIT\" action\nthat was run and an empty state.\n\n![Redux DevTools initialization][6]\n\n## Your first action workflow\n\nNow, you will refactor the `LoginPanel` component to put the token it receives\nfrom the AJAX call into the Redux store. The rest of the application will remain\nthe same, for now.\n\nOpen `LoginPanel` and review it. There are two \"interesting\" portions of this\ncode, the `render` function which will redirect to the path \"/\" when a token\nexists (and show the login form if it does not), and the `handleSubmit` method\nthat makes the actual AJAX call to get the token. These are the things that you\nwill modify to make this work. It's going to seem like a lot of code replacing\njust a few lines, but this will make your application easier to understand\nbecause all of the state changes will be encapsulated in their own area under\nthe **store** directory. You won't have to search through a bunch of components\nto figure out why the application as a whole is not working.\n\nThe first step is to make `LoginPanel` a _connected component_, that is, connect\nit to the Redux store's pipeline. To do this, follow these steps:\n\n1. Import `connect` from `react-redux` in the import section of the\n   `LoginPanel`.\n2. Remove the `export` line at the bottom and replace it with this.\n\n   ```js\n   const mapStateToProps = state => {\n     return {\n     };\n   };\n\n   const mapDispatchToProps = dispatch => {\n     return {\n     };\n   };\n\n   // Yes, this looks funny, but you will often\n   // see this kind of indentation in others'\n   // code when using React and Redux.\n   export default connect(\n     mapStateToProps,\n     mapDispatchToProps\n   )(\n     LoginPanel\n   );\n   ```\n\nThe last line of the code _connects_ the `LoginPanel` to the Redux store. The\ntwo functions that you created above it, `mapStateToProps` and\n`mapDispatchToProps` are functions that you will write to help in translating\nstate and actions for use in your component. The `mapStateToProps` function maps\nthe state of the Redux store to the values that you want to show up in the\n`props` of the connected component. The `mapDispatchToProps` function maps\ncomplicated action calls to simple ones that your component can use.\n\nThe first thing you'll need is one of those actions. This is going to be\nsomething to let your authentication run to get that token. In the **src/store**\ndirectory, create a new file named **authentication.js** which will contain\nall of the Redux-related stuff to handle authentication:\n\n* the actions,\n* the action types,\n* the thunks (which are just actions that are allowed to perform calls\n  that have use resources _outside_ the function, like AJAX calls or putting\n  something into local storage), and,\n* the reducers.\n\nThe steps that you want the application to go through are:\n\n* Make an AJAX call to sign in (that's a _thunk_)\n* When the token returns, create an _action_ that will send the token to the\n  store\n* Create a reducer to put the token in the store\n\nMost of these steps will need something more, so if you see something not\ndefined in one of these steps, you will get to it in a later step.\n\n### The thunk\n\nIn case you lost track, this goes in **src/store/authentication.js**.\n\nFirst up, _thunks_ are functions that return another function that takes a\nsingle function as its argument. The argument is the `dispatch` method used to\ndispatch actions to Redux. So, for example, the `login` thunk could have this\nform.\n\n```js\nexport const login = (email, password) => async dispatch => {\n  // Dispatch an action, here\n}\n```\n\nThat's pretty weird, if you've never seen that syntax before, those double `=>`\nsigns in there. It's a shortcut to write a function that returns a function. You\ncould also write it like this:\n\n```js\nexport const login = (email, password) => {\n  return async dispatch => {\n    // Dispatch an action, here\n  }\n}\n```\n\nOnce you get used to the double (or triple) `=>` signs, it becomes second nature\nto write functions that return functions, that way.\n\nInside the login method, make a `fetch` call to the API using the same `fetch`\ncall found in `LoginPanel`'s `handleSubmit` method. You'll need to import\n`baseUrl` from the **src/config.js** module. You don't have access to the state\nof the object, just the `email` and `password` that they're passing in through\nyour method call, so change the \"body\" parameter of the `fetch` from\n`JSON.stringify(this.state),` to `JSON.stringify({ email, password }),`.\n\nFor now, if the response from the fetch is ok, just get the token out of the\nresponse object and log it to the console.\n\nNow, to hook up this thunk to your component, open **src/LoginPanel.js** and\nimport the `login` thunk that you just created. At the bottom in the\n`mapDispatchToProps` function, add a \"login\" key that is a function that\ntakes an email and password, and then dispatches the `login` thunk with those\nvalues.\n\n```js\nreturn {\n  login: (email, password) => dispatch(login(email, password))\n};\n```\n\nNow, there's a \"login\" property on the `props` handed to the `LoginPanel`\ncomponent. The value of the \"login\" property is a function that takes an\n_email_ and a _password_. Those then get handed to the `login` thunk which\nreturns a function to the `dispatch` function of Redux. It's functions all the\nway down.\n\nNow, delete everything from the `handleSubmit` method _except_ the line that\nprevents the default action. Replace it with a call to the function in the\n\"login\" property of the `props` like this.\n\n```js\nthis.props.login(this.state.email, this.state.password);\n```\n\nAfter the application refreshes, you should be able to click the _Login_ button\non the screen and see token appear after the AJAX call completes.\n\nNow that you have the token, you need to dispatch another action, one that isn't\ncreated yet, to set the token in the state so it can be used elsewhere. Remove\nthe `console.log` statement in your `login` thunk and replace it with an\ninvocation of the `dispatch` method that your thunk gets, dispatching an action\ncreator named `setToken` with the token as its argument.\n\n```js\ndispatch(setToken(token))\n```\n\nNow, it's time to create that action.\n\n### The action\n\nActions are just plain objects that have, at a minimum, a \"type\" property.\nAction creators are just plain functions that return actions.\n\nBelow your import section and above the `login` thunk of your code in\n**src/store/authentication.js**, create a constant named `SET_TOKEN` and set it\nequal to the string `'pokedex/authentication/SET_TOKEN'`. You could make this\nstring _anything_, it just needs to be unique within your application. This is\nmerely the [Ducks][5] convention.\n\nNow, create a function `setToken` that takes a token as its one parameter, and\nreturns an object that has a \"type\" property set to the `SET_TOKEN` constant and\na \"token\" property set to the value passed into the parameter. Export the\n`setToken` function.\n\nIf you've done everything correctly to this point, when you click the _Login_\nbutton, you should now see an action appear in the Redux DevTools with the\nstring that you set the `SET_TOKEN` constant to.\n\n![Redux DevTools with SET_TOKEN action][8]\n\nNow, you need to tell Redux how to handle that action with a reducer.\n\n## The reducer\n\nSomewhere in the **src/store/authentication.js** file, export a `reducer`\nfunction as the default value of the module. The `state` parameter gets a\ndefault value of an empty object because Redux does not like `undefined` values\nreturned from reducers. Redux _will_ call your reducer when it creates the store\nwith `undefined` just to mess with you.\n\n```js\nexport default function reducer(state = {}, action) {\n  // Your code in here.\n}\n```\n\nIn that reducer, you want to check if the \"type\" property of `action` is equal\nto the `SET_TOKEN` constant. Every reducer is called with every action, so you\nhave to do this check. If it is, then you should return an object with the\ntoken in it. If it doesn't, then just return the state unaltered. Idiomatic\nRedux usually uses a `switch` statement to do this with each `case` statement\nhandling a different action type.\n\n```js\nexport default function reducer(state = {}, action) {\n  switch (action.type) {\n    case SET_TOKEN: {\n      return {\n        ...state,\n        token: action.token,\n      };\n    }\n\n    default: return state;\n  }\n}\n\n```\n\n### Adding the reducer to the store\n\nNow that you have the reducer handling the action, you must add it to the\nreducer in **src/store/configureStore.js**. Open up that file and import the\ndefault value as `authentication` from the **src/store/authentication.js**\nmodule.\n\n```js\nimport authentication from './authentication';\n```\n\nThen, in the `combineReducers` invocation, add `authentication` as a key and\nvalue.\n\n```js\nconst reducer = combineReducers({\n  authentication\n});\n```\n\nAfter the page reloads, when you click the _Login_ button, you should now see\nthe authentication and token appear in the right pane of the Redux DevTools.\n(You may need to select the action in the left pane.)\n\n## Using the token\n\nNow, you've come full circle. You're going to use the token in the store to\ninform the `LoginPanel` that it needs to close. In the `render` function, the\ncode uses `this.state.token` to determine whether or not to redirect. You want\nthat to use `this.props.token`, now, so change it to that.\n\nTo get the token value from the state of the Redux store into the `props`, you\nuse `mapStateToProps` function that you created below. Change it to read like\nthis, now, which takes the value of the token stored in the state and puts it\ninto the \"token\" property of what will be passed to `LoginPanel` in its `props`.\n\n```js\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token,\n  };\n};\n```\n\nNow, when you click the _Login_ button, it redirects the application back to\n\"/\". However, because `App` relies on its own state to get updated from a call\nto its `updateToken` method, it goes into an recursive loop of redirecting back\nand forth between the `App` component and the `LoginPanel`. You'll fix that in\nthe next section.\n\n\n\n[1]: https://github.com/zalmoxisus/redux-devtools-extension#installation\n[2]: https://react-redux.js.org/introduction/quick-start\n[3]: https://github.com/reduxjs/redux-thunk\n[4]: https://redux.js.org/faq/code-structure/\n[5]: https://github.com/erikras/ducks-modular-redux\n[6]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/aggregates/pokedex/redux-based/assets/redux-initial-state-devtools.png\n[7]: https://redux.js.org/api/compose\n[8]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/aggregates/pokedex/redux-based/assets/redux-set-token-action-devtools.png\n"
  },
  "success": true
}