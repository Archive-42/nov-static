{
  "template": {
    "taskId": "80c47ed2-8329-49fb-90b8-2aba1c25b7d4",
    "name": "Redux Developer Tools",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-redux-developer-tools-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "redux-developer-tools"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# Redux Developer Tools\n\nRedux has its own special set of developer tools. They allow you to do things\nlike inspect your application state in real time as you use your app, or cancel\nan action to see a live recalculation of the state as if that action had never\nbeen dispatched. They require only a few minutes of setup, and can be well worth\nthe effort.\n\n## Instructions\n\n1. Install the [chrome extension][chrome_extension].\n\n2. Install the npm package into your project:\n\n```sh\nnpm install redux-devtools-extension\n```\n\n3. Make the following changes to your `./src/store.js` file.\n\n**If you're _not_ using middleware:**\n\n```diff\n  // ./src/store.js\n\n  import { createStore } from 'redux';\n+ import { devToolsEnhancer } from 'redux-devtools-extension';\n\n  import rootReducer from './reducers/rootReducer';\n\n  const configureStore = () => {\n    return createStore(\n      rootReducer,\n+     devToolsEnhancer()\n    );\n  };\n\n  export default configureStore;\n```\n\n**Or if you're using middleware:**\n\n```diff\n  // ./src/store.js\n\n  import { createStore, applyMiddleware } from 'redux';\n  import thunk from 'redux-thunk';\n  import logger from 'redux-logger';\n+ import { composeWithDevTools } from 'redux-devtools-extension';\n\n  import rootReducer from './reducers/rootReducer';\n\n  const configureStore = () => {\n    return createStore(\n      rootReducer,\n+     composeWithDevTools(applyMiddleware(thunk, logger))\n-     applyMiddleware(thunk, logger)\n    );\n  };\n\n  export default configureStore;\n```\n\n## Use\n\nNow that you've set up the Redux dev tools, you can try them out. You'll use one\nof the Fruit Stand application examples. If you haven't already, clone the\n[redux-fruit-stand-examples] repo.\n\nAfter cloning the repo, open a terminal and browse to the\n`fruit-stand-redux-with-react-official-bindings` folder. Run the command `npm\ninstall` to install the project's dependencies. Then use the command `npm start`\nto run the Fruit Stand application.\n\nThis Fruit Stand example application is a React application created by the\nCreate React App tooling. When running the application using `npm start`, the\napplication should automatically open in your default browser. If it doesn't,\nyou can manually browse to `http://localhost:3000/` to view the application.\n\n**Open the project into your code editor and complete the above set up steps.**\n\nYou should see an atom (a nucleus with electrons) icon on your Chrome toolbar,\nand if you've set up the Redux dev tools correctly it should now be green. Click\non it. When the Redux dev tools open, click one of the buttons on the very\nbottom left to open them in a new window.\n\nNow try adding some fruit. This will cause actions to be dispatched. You should\nsee those actions popping up in the Redux dev tools. You can click on them to\ncancel them and you should see the state recalculated in real time.\n\nThe Redux dev tools have some other handy features, so click around and explore!\n\n## Resources\n\n- [Redux Dev Tools - Chrome Extension][chrome_extension]\n- [Redux Dev Tools - Github Page][react_component]\n- [Redux Dev Tools - Demo][redux_demo]\n\n[chrome_extension]: https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\n[react_component]: https://github.com/gaearon/redux-devtools\n[redux_demo]: http://extension.remotedev.io/#demo\n[redux-fruit-stand-examples]: https://github.com/appacademy-starters/redux-fruit-stand-examples\n"
  },
  "success": true
}