{
  "template": {
    "taskId": "83aa3ff3-b4c4-4172-9b37-c896b781885a",
    "name": "Pokemon Redux Walk-Through Part 3",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/aggregates/pokedex/redux-based/README-03-third-state.md",
    "type": "Project",
    "timeEstimate": 2700,
    "urls": [
      "walk-through-part-3"
    ],
    "topic": "Wednesday - React + Redux",
    "subtopic": "Pokedex With Redux",
    "body": "# Making Decisions About State\n\nNow, it's time to log out of the application. Do that with the following\nsteps.\n\nThe steps that the application will take are these:\n\n1. Someone clicks the logout button\n2. The `LogoutButton` component dispatches a thunk\n3. The thunk makes the AJAX call to logout\n4. If that AJAX call succeeds, remove the token from local storage and dispatch\n   an action to remove the token from the store\n5. Redux will invoke a reducer that removes the token from the store\n6. The `LogoutButton` will redirect the application back to \"/login\"\n\nIn **src/store/authentication.js**:\n\n* Create a new action type named `REMOVE_TOKEN`\n* Create a new action creator that returns an action with just the \"type\"\n  property set to the value of `REMOVE_TOKEN`\n* Create a thunk named `logout` that\n  * makes an AJAX call to the API to `DELETE /api/session` (using the token in\n    the state)\n  * if the response is ok, then\n    * removes the item from local storage with the key `TOKEN_KEY`\n    * dispatches the `removeToken` action\n* Handles the `REMOVE_TOKEN` action type in the reducer by creating a new\n  object that does _not_ have the \"token\" key in it and returning that.\n\n  ```js\n  case REMOVE_TOKEN: {\n    const newState = { ...state };\n    delete newState.token;\n    return newState;\n  }\n  ```\n\n  Remember that handlers in reducers _must_ return new objects if they want to\n  modify the state.\n\nIn **src/LogoutButton.js**:\n\n(If you make a mistake with this and get into an inconsistent state, just delete\nall of the contents of your local storage and refresh your browser.)\n\n* Import `connect` from \"react-redux\"\n* Import the `logout` thunk you just created\n* Create the `mapStateToProps` and set a property named `loggedOut` to `true` if\n  the token in the state is empty, and `false` if there is a value for the token\n  in the state\n* Create the `mapDispatchToProps` and set the \"logout\" property equal to a\n  function that dispatches the result of the `logout` thunk you imported\n* In the `LogoutButton`'s method named \"logout\", instead of making an AJAX call,\n  have it call `this.props.logout()`, instead\n* Get rid of the\n* Get rid of initializing the state in the constructor\n* Change the use of `this.state.loggedOut` to `this.props.loggedOut`\n* Remove any unused imports\n\nIf you check the console, now, you'll see that Babel is reporting a \"useless\"\nconstructor. Sure enough, it is. `LogoutButton` no longer has any state, so\nthere's no reason to leave it as a class-based component. Convert it to a\nfunction-based component. If you've followed these instructions, your\n`LogoutButton` should end up looking something like this.\n\n```js\nconst LogoutButton = props =>\n  props.loggedOut ?\n    <Redirect to=\"/login\" /> :\n    <div id=\"logout-button-holder\">\n      <button onClick={props.logout}>Logout</button>\n    </div>\n;\n```\n"
  },
  "success": true
}