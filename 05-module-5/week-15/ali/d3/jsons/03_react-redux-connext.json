{
  "template": {
    "taskId": "5f555abc-23bd-4f24-aed8-c64f8191f38d",
    "name": "React-Redux Connect",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-react-redux-connect-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "react-redux-connect"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# React-Redux: `connect()`\n\nThe React-Redux library allows you to access the store `context` set by the\n`<Provider />` in a powerful and convenient way via the `connect` function.\nUsing `connect`, you can pass specific slices of the store's state and specific\naction-dispatches to a React component as `props`. A component's `props` then\nserve as its API to the store, making the component more modular and less\nburdened by Redux boilerplate.\n\nWhen you finish this article, you should be able to use the `connect` function\nto give a component access to a Redux store.\n\n## Calling `connect`\n\nThe React-Redux `connect` function is a _higher-order function_. It takes two\narguments (plus a couple optional arguments you can read more about in the\n[docs][docs]) and returns a function:\n\n```js\nconst createConnectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n```\n\nThe returned function (`createConnectedComponent`) then takes the React\ncomponent that needs access to the Redux store and returns a new React\ncomponent:\n\n```js\nconst ConnectedComponent = createConnectedComponent(MyComponent);\n\nexport default ConnectedComponent;\n```\n\n`ConnectedComponent` will render `MyComponent`, passing along `props` as\ndetermined by the `mapStateToProps` and `mapDispatchToProps` arguments.\n\nYou can combine these function calls into a single statement by immediately\ncalling the function returned by the `connect` method (similarly to how you\nimmediately call a function expression when defining an [IIFE][mdn-iife]):\n\n```js\nconst ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n\nexport default ConnectedComponent;\n```\n\nTypically, to keep things as concise as possible, the `ConnectedComponent`\nvariable is omitted:\n\n```js\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n```\n\n## Defining `mapStateToProps(state, [ownProps])`\n\nThis first argument to `connect` is a function, `mapStateToProps`. It tells\n`connect` how to map the `state` into your component's `props`.\n\nIt must take as an argument the store's `state` (supplied by the `Provider`'s\nstore `context`) and return an object containing the relevant `props` for your\ncomponent.\n\n```jsx\nconst MyComponent = ({ name }) => (\n  <div>{name}</div>\n);\n\nconst mapStateToProps = (state) => ({\n  name: state.name;\n});\n\nconst ConnectedComponent = connect(mapStateToProps)(MyComponent);\n```\n\nIn the example above, `ConnectedComponent` will render `MyComponent`, passing\n`name` as a prop.\n\n### `ownProps` (optional)\n\nA component with explicit `props` passed down from its parent (e.g.\n`<ConnectedComponent lastName={'Wozniak'}/>`) can merge those `props` with\nslices of `state` via `ownProps`, a optional second argument to\n`mapStateToProps`:\n\n```js\nconst mapStateToProps = (state, ownProps) => ({\n  firstName: state.name,\n  initials: `${state.name[0]}. ${ownProps.lastName[0]}.`\n});\n\nconst ConnectedComponent = connect(mapStateToProps)(MyComponent);\n```\n\nYou can also access React Router props, such `match` and `history` through\n`ownProps`. Imagine you have a `users` slice of state, and you want to pass a\nspecific user's `name` based on a `:userId` parameter. You can access the\nparameter from within the `mapStateToProps` function with\n`ownProps.match.params.userId`:\n\n```js\nconst mapStateToProps = (state, ownProps) => ({\n  name: state.users[ownProps.match.params.userId].name,\n});\n\nconst ConnectedComponent = connect(mapStateToProps)(MyComponent);\n```\n\n## Defining `mapDispatchToProps`\n\n`mapDispatchToProps` is the second argument to `connect`. It's a function that\naccepts the store's `dispatch` method and returns an object containing functions\nthat can be called to dispatch actions to the store. These action dispatchers\nare then passed as `props` to the component.\n\n```js\nconst deleteTodo = (id) => ({ type: 'DELETE_TODO', id }); // action creators\nconst addTodo = (msg) => ({ type: 'ADD_TODO', msg });\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleDelete: (id) => dispatch(deleteTodo(id)),\n  handleAdd: (msg) => dispatch(addTodo(msg))\n});\n\nconst ConnectedComponent = connect(null, mapDispatchToProps)(MyComponent);\n```\n\nNotice that in the example above, the `connect` function is invoked with `null`\nas a placeholder for the `mapStateToProps` function. The `connect` function\nexpects `mapStateToProps` as its first argument and `mapDispatchToProps` as its\nsecond argument.\n\n## Putting it all together\n\n```js\nconst MyComponent = ({ firstName, initials, handleAdd, handleDelete }) => {\n  return <div>...</div>;\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  firstName: state.name,\n  initials: `${state.name[0]}. ${ownProps.lastName[0]}.`\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleDelete: (id) => dispatch(deleteTodo(id)),\n  handleAdd: (msg) => dispatch(addTodo(msg))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyComponent);\n```\n\n`MyComponent` will receive `firstName`, `initials`, `handleDelete`, and\n`handleAdd` as `props`.\n\nAnd remember, unlike the earlier attempt at writing a custom `connect`\nhigher-order component, the React-Redux library's `connect` function **contains\nlogic to optimize the rendering of your connected components**.\n\n## Reviewing a completed Fruit Stand example\n\nTo review and run a completed Fruit Stand example application that utilizes the\nReact-Redux library, clone the [redux-fruit-stand-examples] repo.\n\nAfter cloning the repo, open a terminal and browse to the\n`fruit-stand-redux-with-react-official-bindings` folder. Run the command `npm\ninstall` to install the project's dependencies. Then use the command `npm start`\nto run the Fruit Stand application.\n\nThis Fruit Stand example application is a React application created by the\nCreate React App tooling. When running the application using `npm start`, the\napplication should automatically open in your default browser. If it doesn't,\nyou can manually browse to `http://localhost:3000/` to view the application.\n\n## What you learned\n\nIn this article, you learned how to use the React-Redux library's `connect`\nfunction to give a component access to a Redux store.\n\n[docs]: https://react-redux.js.org/using-react-redux/connect-mapstate#ownprops-optional\n[mdn-iife]: https://developer.mozilla.org/en-US/docs/Glossary/IIFE\n[redux-fruit-stand-examples]: https://github.com/appacademy-starters/redux-fruit-stand-examples\n"
  },
  "success": true
}