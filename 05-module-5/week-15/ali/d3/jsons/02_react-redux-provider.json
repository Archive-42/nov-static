{
  "template": {
    "taskId": "92bea967-4337-4150-ad5f-15cf199ace18",
    "name": "React-Redux Provider",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-react-redux-provider-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "react-redux-provider"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# React-Redux: `<Provider/>`\n\nAs you learned in earlier articles, the integration techniques that you were\ninitially shown were just a starting point with using Redux with React. Now that\nyou've learned the basics of how React components interact with a Redux store,\nit's time to learn how you can use [React-Redux][react-redux], a library from\nthe creators of [Redux][redux], to improve upon those techniques.\n\nTo prepare to use the `connect` function from the [React-Redux\nlibrary][react-redux], you need to first add a `<Provider />` component to your\nReact application. When you finish this article, you should be able to use the\n`<Provider />` component to make your Redux store available to any nested\ncomponents that have been wrapped in the `connect` function.\n\n## Understanding the advantages of the `<Provider />` component\n\nOftentimes, a deeply nested component will need access to the store, while its\nparents do not. Using vanilla React, these parents would have to receive the\n`store` prop in order to pass it down to its child.\n\nConsider the example below:\n\n```js\n// App.js\n\nimport React from 'react';\n\nconst UserInfo = ({ store }) => (\n  <div>\n    {store.getState().username}\n  </div>\n);\n\nconst Header = ({ store }) => (\n  <div>\n    <UserInfo store={store} />\n  </div>\n);\n\nconst App = ({ store }) => (\n  <div>\n    <Header store={store} />\n  </div>\n);\n\nexport default App;\n```\n\n```js\n// index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport reducer from './reducer';\nimport App from './App';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nThe `store` is created in the `index.js` file, but the `UserInfo` component that\nneeds to access it is deeply nested. Thus, the store must be passed as a prop\ndown the entire component tree, even though components such as the `Header` do\nnot need to access the store.\n\nThis pattern, called **prop threading**, is tedious and error-prone. You can\navoid it by using the `<Provider />`/`connect` API provided by React-Redux.\n\n### Preparing your React application for server-side rendering\n\nUsing `<Provider />` also helps to prepare your React/Redux application to\nutilize server-side rendering. Server-side rendering allows you to render\ncomponents to static markup, which can help to reduce the initial loading time\nof your application.\n\n> React server-side rendering is an advanced topic that won't be covered in this\n> course. For more information, see the official [React][react-reactdomserver]\n> and [Redux][redux-server-rendering] docs.\n\n## Adding `<Provider />`\n\nBefore adding `<Provider />` to your React application, use npm to install the\n`react-redux` package:\n\n```sh\nnpm install react-redux\n```\n\nThen, in the entry point for your application (typically the `index.js` file),\nimport the `Provider` component and your Redux `store`:\n\n```js\nimport { Provider } from 'react-redux';\nimport store from './store';\n```\n\nThen use the `Provider` component to wrap your `App` component and set its\n`store` prop to your Redux `store`:\n\n```js\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\nHere's what your completed `index.js` file will look like:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n`<Provider />` is simply a React component in which you wrap the rest of the\napplication. The `Provider` component receives the `store` as a `prop` and sets\na store `context`. Because you wrapped the entire `App` in the `Provider`\ncomponent, all your components can access the store `context`.\n\nComponents that need to access the store `context` have to be wrapped in a\ncontainer component created by the `connect` function, which converts the store\n`context` into a `store` prop. You'll learn how to use the `connect` function in\nthe next article.\n\n## Understanding how `<Provider />` relates to the React Context API\n\nThe store `context` set by `<Provider />` is the _same_ React Context that you\nused in an earlier lesson to manage global state within a React application. You\ncan see this in action by reviewing the `react-redux` source code on GitHub:\n\n```js\n// https://github.com/reduxjs/react-redux/blob/master/src/components/Context.js\n\nimport React from 'react'\n\nexport const ReactReduxContext = /*#__PURE__*/ React.createContext(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactReduxContext.displayName = 'ReactRedux'\n}\n\nexport default ReactReduxContext\n```\n\nAnd while it's rarely used, it's possible to import the context from React-Redux\nand use the `<Consumer />` to access the `store`:\n\n```js\nimport { ReactReduxContext } from 'react-redux';\n\n// in your connected component\nrender() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something with the store here\n      }}\n    </ReactReduxContext.Consumer>\n  );\n}\n```\n\nYou can also connect the Redux `<Provider />` component to the\n`<Context.Provider />` component that passes the `value` of a context object to\nall child components. Redux's `<Provider />` component simply passes the Redux\n`store`, instead of a context `value`.\n\n## What you learned\n\nIn this article, you learned how to use the `<Provider />` component to make\nyour Redux store available to any nested components that have been wrapped in\nthe `connect` function.\n\n[react-redux]: https://react-redux.js.org/\n[redux]: https://redux.js.org/\n[react-reactdomserver]: https://reactjs.org/docs/react-dom-server.html\n[redux-server-rendering]: https://redux.js.org/recipes/server-rendering\n"
  },
  "success": true
}