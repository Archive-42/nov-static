{
  "template": {
    "taskId": "4cef1baa-84ac-444a-a2d2-af22d2a76bae",
    "name": "WebSockets Learning Objectives",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/objectives/reading-websockets-objectives.md",
    "type": "Reading",
    "timeEstimate": 0,
    "urls": [
      "websockets-objectives"
    ],
    "topic": "Homework for Friday",
    "subtopic": "Learning Objectives",
    "body": "\n# WebSockets Learning Objectives\n\nWebSockets enable two-way communication between the user's browser (the client)\nand a server. They can be used to enable dynamic, interactive web experiences.\nAfter reading and practicing, you should be able to:\n\n* Use the WebSockets API to create a new WebSocket connection to a server\n* Create a WebSocket `onopen` event handler function to detect when the\n  connection has been opened\n* Create a WebSocket `onmessage` event handler function to detect and process\n  messages sent by the server\n* Create a WebSocket `onerror` event handler function to detect when an error\n  has occurred\n* Use the WebSocket `send()` method to send messages to the server\n* Recall that WebSocket message data can be sent as JSON formatted string\n* Recall that WebSocket messages usually have a \"type\" associated with them so\n  the client can determine how to process them\n* Use the WebSocket `close()` method to close the connection to the server\n* Create a WebSocket `onclose` event handler function to detect when the\n  connection to the server has been closed\n* Use the `ws` package to create a standalone WebSocket server\n* Use the `ws` package to create a WebSocket server that shares a Node.js `http`\n  server with an Express application\n* Create an `connection` event handler listener method to detect when a client\n  has connected to the WebSocket server\n* Create an `close` event handler listener method to detect when a client has\n  closed the connection to the WebSocket server\n* Use the WebSocket `send()` method to send a message to a client\n"
  },
  "success": true
}