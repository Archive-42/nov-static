{
  "template": {
    "taskId": "d1fde7ad-1f51-4da0-8133-7c4a0530439d",
    "name": "Using Custom CRA Templates",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-class-components/readings/reading-simple-react-project-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "using-custom-cra-templates"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# Simple React Project\n\nWhile creating a new React project using Create React App is easy to do, the\napplication that the default template generates contains items and content that\naren't essential for learning React. Distilling the generated application down\nto its essential items and content removes all distractions and allows you to\nfocus on the basics.\n\nWhen you finish this article, you should be able to:\n\n* Create a simple React application using a custom Create React App template;\n  and,\n* Create a simple React application by removing items and content from a project\n  generated by the Create React App default template.\n\n## Using a custom template\n\nDeleting files from the standard _Create React App_ template can get tedious. To\nhelp save you time, App Academy has a custom template that you can use with\nCreate React App to generate a simple React application!\n\nJust run the following command:\n\n```sh\nnpx create-react-app my-app --template @appacademy/simple\n```\n\nFeel free to change `my-app` to whatever you'd like. Once the command completes,\nbrowse to the generated application folder and run `npm start` to start your\napplication!\n\n## If you like deleting files...\n\nIf you still just want to use the template that comes with _Create React App_\nand want to delete the files yourself, here's that guide for you to follow.\n\nTo start, use Create React App to create a new application:\n\n```sh\nnpx create-react-app simple-project\n```\n\nThen open the `simple-project` folder in your code editor.\n\n### Simplifying the `public` folder\n\nIn the `public` folder, you're only going to keep the `index.html` file, so\nremove all of the following:\n\n* `favicon.ico`\n* `robots.txt`\n* `logo192.png`\n* `logo512.png`\n* `manifest.json`\n\nThe `favicon.ico` and `robots.txt` files are useful for applications that will\nactually be released and used by actual users, but not necessary for learning\nprojects. The `logo192.png` and `logo512.png` image files are referenced in the\n`manifest.json` file and are [the icons that browsers use in various\ncontexts][manifest icons] (home screen, application menu, etc.) The\n[`manifest.json` file][manifest] provides the metadata that's used when your web\napp is installed on a user's mobile device or desktop.\n\nNow you can simplify the content of the `index.html` to this:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>React App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\nTo get to the above HTML, you can:\n\n* Remove the unnecessary lines of code until you're left with the above code; or\n* You can remove all of the code and use the `html:5` Emmet command to generate\n  the boilerplate HTML and add a `<div>` element with an `id` attribute set to\n  `root` (this is the element that your React application will render to).\n\n### Simplifying the `src` folder\n\nIn the `src` folder, you're going to keep the following files:\n\n* `App.js`\n* `index.css`\n* `index.js`\n\nAnd remove all of the following:\n\n* `App.css`\n* `App.test.js`\n* `logo.svg`\n* `serviceWorker.js`\n* `setupTests.js`\n\nThe `App.css` file is where you'd add styles that are scoped to the `App`\ncomponent and the `App.test.js` file is where you'd write unit tests for the\n`App` component. While you're learning React, styling components and writing\nunit tests won't be a focus. If you want to add some basic styles for your\napplication, you can use the `index.css` file to add global styles.\n\nThe `logo.svg` file was part of the visual design of the generated application.\nThe `serviceWorker.js` file contains code that registers a [service worker][mdn\nservice worker] which allows the application load faster on subsequent visits\nif/when the application is released into production. The `setupTests.js` file\ncontains a single import statement for a module that helps make it easier to\nwrite unit test assertions on DOM nodes.\n\nNow you can update the contents of the `App.js`, `index.css`, and `index.js`\nfiles to the following:\n\n```js\n// ./src/App.js\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <h1>Hello world!</h1>\n  );\n}\n\nexport default App;\n```\n\n```css\n/* ./src/index.css */\n\n/* TODO Add site wide styles */\n```\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n> For your reference, here's a repo containing the final simple React project:\n> [react simple project]\n\n## What you learned\n\nIn this article, you learned how to:\n\n* Create a simple React application by removing items and content from a project\n  generated by the Create React App default template; and\n* Create a simple React application using a custom Create React App template.\n\n[manifest icons]: https://developer.chrome.com/extensions/manifest/icons\n[manifest]: https://developers.google.com/web/fundamentals/web-app-manifest/\n[react simple project]: https://github.com/appacademy-starters/react-simple-project\n[mdn service worker]: https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n"
  },
  "success": true
}