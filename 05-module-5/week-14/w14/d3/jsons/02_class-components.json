{
  "template": {
    "taskId": "dea3edeb-5736-40c7-8396-28a730554e54",
    "name": "Class Components",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-class-components/readings/reading-react-class-components-js.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "class-components"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# React Class Components\n\nAs you've learned the fundamentals of React, you've seen how to use functions to\ncreate components to develop the user interface for a frontend application.\nUnsurprisingly, as with most things related to software development, there's\nmore than one way to create components in React.\n\nWhen you finish this article, you should be able to:\n\n* Create a React component using ES2015 class syntax;\n* Describe when it's appropriate to use a class component;\n* Initialize and update state within a class component; and\n* Provide default values for props.\n\n## Hello class components!\n\nUp to this point, you've written components using functions:\n\n```js\n// ./src/Message.js\n\nimport React from 'react';\n\nconst Message = (props) => {\n  return (\n    <div>{props.text}</div>\n  );\n};\n\nexport default Message;\n```\n\nBut React also allows you to create components using ES2015 classes. Here's the\nabove function component rewritten as a class component:\n\n```js\n// ./src/Message.js\n\nimport React from 'react';\n\nclass Message extends React.Component {\n  render() {\n    return (\n      <div>{this.props.text}</div>\n    );\n  }\n}\n\nexport default Message;\n```\n\nEvery class component must extend (i.e. inherit) from `React.Component` and have\na `render` method that returns the element(s) to render for the component.\n\nClass components are used just like function components:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Message from './Message';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Message text='Hello world!' />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nFrom just the above JSX code in the `index.js` file, you can't tell if the\n`<Message>` component is written as a function or class component. Which\napproach that's used is an internal implementation detail of the component. In\nfact, you can switch back and forth between the two approaches provided that you\naren't using a feature that's only available in class components (more about\nthis in just a bit).\n\n### Setting and accessing props\n\nNotice from this example of using the `Message` class component that props are\nset on class components just like you do with function components:\n\n```js\n<Message text='Hello world!' />\n```\n\nTo access props within a class component, use the `this.props` property:\n\n```js\nclass Message extends React.Component {\n  render() {\n    return (\n      <div>{this.props.text}</div>\n    );\n  }\n}\n```\n\nIf your class component defines a `constructor` method that needs access to\nprops, define a `props` parameter:\n\n```js\nclass Message extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // TODO Initialize state, etc.\n  }\n\n  render() {\n    return (\n      <div>{this.props.text}</div>\n    );\n  }\n}\n```\n\nJust be sure to call the `super` method and pass in the `props` parameter!\nFailing to do so will result in the following error:\n\n```\nReferenceError: Must call super constructor in derived class before accessing\n'this' or returning from derived constructor\n```\n\n> Remember, a component, whether it's a function or class component, should\n> never change its own props.\n\n### Legacy class component syntax\n\nIn the early days of React, before using ES2015 classes was commonplace,\ncomponents were usually created using the `React.createclass` function. You'll\nstill sometimes see this syntax in the wild. If in the future you ever find\nyourself needing to create a component using the `React.createclass` function\nwhen targeting newer versions of React, you'll need to install a separate React\nmodule named [`create-react-class`][create-class].\n\n## Stateful components\n\nSo far, the above example class component behaves exactly as its function\ncomponent counterpart. This might leave you wondering why you'd want or need to\ncreate a class component.\n\n**One of the two reasons why you would use a Class component over a Function\ncomponent is to add and manage local or internal state to your component. The \nsecond main reason to use a Class component is to use a component's\nlifecycle methods.** The following sections will focus on how to add and manage\na component's state. You'll learn more about a component's lifecycle (and the \nassociated component lifecycle methods) later in a future reading.\n\n### What is state?\n\nIn contrast to props which are provided by the consumer or caller of the\ncomponent, state is data that's internal to a component. State is owned by the\ncomponent where it's defined and used. That's why we say it's \"internal\" or\n\"local\" to that component. Whereas props are not to be changed by a component,\nstate is intended to be updated or mutated (you'll see how to update state in\njust a bit). Together, props and state represent the data that's used to\ndetermine how the component should behave and render.\n\n### When to use state\n\nState should only be used when it's absolutely necessary. If a bit of data is\nnever going to change or if it is needed across the entire application, use\nprops instead.\n\nWhen you're just learning React, it can be challenging to know when it's okay to\nuse state and when it's not. State is often used when creating components that\nretrieve data from APIs or render forms. You'll see examples of those kinds of\ncomponents later in this lesson. To start, we'll look at simple, contrived\nexample of using state in just a bit.\n\n> Function components are the simplest way to declare a component. If a\n> component doesn't need to use state or lifecycle methods, it should be written\n> as a function component. A new feature in React, [hooks][react hooks], levels\n> the playing field between function and class components, so that everything\n> you can do in a class component can now be done with function components.\n> You'll learn about React hooks in a future lesson.\n\n## Initializing state\n\nWhen creating a stateful class component, you can use a class `constructor`\nmethod to initialize the `this.state` object.\n\nHere's a `RandomQuote` component that initializes two state properties,\n`this.state.quotes` and `this.state.currentQuoteIndex`, within its `constructor`\nmethod:\n\n```js\n// ./src/RandomQuote.js\n\nimport React from 'react';\n\nclass RandomQuote extends React.Component {\n  constructor() {\n    super();\n\n    const quotes = [\n      'May the Force be with you.',\n      'There\\'s no place like home.',\n      'I\\'m the king of the world!',\n      'My mama always said life was like a box of chocolates.',\n      'I\\'ll be back.',\n    ];\n\n    this.state = {\n      quotes,\n      currentQuoteIndex: this.getRandomInt(quotes.length),\n    };\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Random Quote</h2>\n        <p>{this.state.quotes[this.state.currentQuoteIndex]}</p>\n      </div>\n    );\n  }\n}\n\nexport default RandomQuote;\n```\n\nNotice in the `render` method, that the state properties are being accessed\nusing `this.state.quotes` and `this.state.currentQuoteIndex`.\n\nIf you're following along, be sure to update your application's entry point to\nimport and render the `RandomQuote` component:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomQuote from './RandomQuote';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuote />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nIf you run your application (i.e. `npm start`) and view it in the browser,\nyou'll one of the five quotes displayed. Refreshing the page will display a new\nrandom quote.\n\n> Sometimes the same quote will be displayed more than once in a row. You'll see\n> in a bit how to fix that bug.\n\n### Using the React Developer Tools to view a component's state\n\nAssuming you have the [React Developer Tools][react developer tools] installed,\nopen up your browser's developer tools and view the \"Components\" tab. On the\nleft, you can select the `RandomQuote` component to view its current props and\nstate values on the right.\n\n![init state][init state]\n\n## Updating state\n\nRemember earlier when we said that state should only be used if the data is\ngoing to change? Currently, the current quote index doesn't change after it's\nbeen initialized in the `constructor` method. Using state to track this value\nwould make more sense if there was a way to trigger the component to _update_\nthe current quote index.\n\nTo do this, add a `<button>` element just below the `<p>` element with the\nfollowing attributes and content:\n\n```jsx\n<button type='button' onClick={this.changeQuote}>Change Quote</button>\n```\n\nNotice the `onClick={this.changeQuote}` bit? This is how you add an event\nlistener for the `onclick` event. `this.changeQuote` is the event handler method\nand `onClick` is the event to listen for.\n\n> When adding event listeners, be sure to camelCase the event name (i.e.\n> `onClick` instead of `onclick`) and pass a reference to the event handler\n> method instead of calling it (i.e. `this.changeQuote` instead of\n> `this.changeQuote()`). You'll learn more about handling events later in this\n> lesson.\n\nNow add the `changeQuote` event handler method to the `RandomQuote` class:\n\n```js\nchangeQuote = () => {\n  const newIndex = this.getRandomInt(this.state.quotes.length);\n\n  this.setState({\n    currentQuoteIndex: newIndex,\n  });\n}\n```\n\n> Did you notice the slightly odd looking class property syntax (i.e.\n> `changeQuote = () => { ... }`) that's being used to define the `changeQuote`\n> method? Using this experimental syntax for defining a class property in\n> combination with an arrow function ensures that you can reliably use the\n> `this` keyword within the method. You'll learn more about this coding pattern\n> for defining event handlers later in this lesson.\n\nThe `changeQuote` event handler calls the `this.getRandomInt` method to get a\nnew random integer and then calls the `this.setState` method to update the\ncomponent's state. The `this.setState` method accepts an object literal\ncontaining the state properties to update.\n\nAfter updating the state, React re-renders the component and displays the new\nquote (provided that the current quote index actually changed). Because calling\nthe `this.setState` method triggers a re-render, it should not be called from\nwithin the `render` method, as that would trigger an infinite loop.\n\nNotice that the object literal passed into the `this.setState` method only\ncontains the state property that needs to be updated. The `this.setState` method\nmerges state updates into the current state object, so you only need to provide\nthe state properties that need to be updated.\n\nNow, instead of refreshing the page, you can click the \"Change Quote\" button to\ndisplay a new random quote!\n\nFor your reference, here's the updated `RandomQuote` component:\n\n```js\n// ./src/RandomQuote.js\n\nimport React from 'react';\n\nclass RandomQuote extends React.Component {\n  constructor() {\n    super();\n\n    const quotes = [\n      'May the Force be with you.',\n      'There\\'s no place like home.',\n      'I\\'m the king of the world!',\n      'My mama always said life was like a box of chocolates.',\n      'I\\'ll be back.',\n    ];\n\n    this.state = {\n      quotes,\n      currentQuoteIndex: this.getRandomInt(quotes.length),\n    };\n  }\n\n  changeQuote = () => {\n    const newIndex = this.getRandomInt(this.state.quotes.length);\n\n    this.setState({\n      currentQuoteIndex: newIndex,\n    });\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Random Quote</h2>\n        <p>{this.state.quotes[this.state.currentQuoteIndex]}</p>\n        <button type='button' onClick={this.changeQuote}>Change Quote</button>\n      </div>\n    );\n  }\n}\n\nexport default RandomQuote;\n```\n\n### Don't modify state directly\n\nYou should always use the `this.setState` method to update state rather than\nsetting the `this.state` property directly:\n\n```js\nchangeQuote = () => {\n  const newIndex = this.getRandomInt(this.state.quotes.length);\n\n  // Don't set the `this.state` property directly\n  // anywhere outside of the `constructor` method!\n  // this.state = {\n  //   currentQuoteIndex: newIndex,\n  // };\n\n  // Always use the `this.setState` method to update state.\n  this.setState({\n    currentQuoteIndex: newIndex,\n  });\n}\n```\n\nReassigning `this.state` alone won't trigger re-rendering, leaving your\ncomponent out of sync.\n\nIf you used Create React App to create your application and your application is\ncurrently running (using the `npm start` command), you'll receive a warning in\nthe terminal if you reassign `this.state` outside of the constructor:\n\n```sh\nDo not mutate state directly. Use setState()  react/no-direct-mutation-state\n```\n\n## Properly updating state from the previous state\n\nWhen testing the `RandomQuote` component, you might have noticed that sometimes\nthe same quote will display more than once. This is occurring because the\n`this.getRandomInt` method is returning a random integer that's the same as\nthe current quote index value. We can fix this bug by calling the\n`this.getRandomInt` method until we get a random integer that's different from\nthe current quote index value.\n\nOn the surface, this appears to be simple fix--just use a loop to call the\n`this.getRandomInt` method until you get a random integer that's different from\nthe current quote index:\n\n```js\nchangeQuote = () => {\n  const { quotes, currentQuoteIndex } = this.state;\n\n  let newIndex = -1;\n\n  do {\n    newIndex = this.getRandomInt(quotes.length);\n  } while (newIndex === currentQuoteIndex);\n\n  this.setState({\n    currentQuoteIndex: newIndex,\n  });\n}\n```\n\nThe problem with the above solution is that it doesn't take into account that\nstate updates are handled asynchronously by React. When the `currentQuoteIndex`\nvalue is retrieved from state (at the start of the method block), you're not\nguaranteed that it's the latest value. There could be a state update that hasn't\nbeen applied yet.\n\nTo safely update state based upon the previous state, pass an anonymous method\nto the `this.setState` method (instead of an object literal) that defines two\nparameters, `state` and `props`, and returns an object literal containing the\nstate properties to update. The `state` and `props` parameters give you safe,\npredictable access to the previous state and prop values:\n\n```js\nchangeQuote = () => {\n  this.setState((state, props) => {\n    const { quotes, currentQuoteIndex } = state;\n\n    let newIndex = -1;\n\n    do {\n      newIndex = this.getRandomInt(quotes.length);\n    } while (newIndex === currentQuoteIndex);\n\n    return {\n      currentQuoteIndex: newIndex,\n    };\n  });\n}\n```\n\nNow, if you retest your application, clicking the \"Change Quote\" button will\ndisplay a different random quote every time!\n\n## Providing default values for props\n\nCurrently, the list of quotes doesn't change once it's initialized in the\n`constructor` method:\n\n```js\nconstructor() {\n  super();\n\n  const quotes = [\n    'May the Force be with you.',\n    'There\\'s no place like home.',\n    'I\\'m the king of the world!',\n    'My mama always said life was like a box of chocolates.',\n    'I\\'ll be back.',\n  ];\n\n  this.state = {\n    quotes,\n    currentQuoteIndex: this.getRandomInt(quotes.length),\n  };\n}\n```\n\nGiven this, it makes more sense for the quotes to be a prop value. Changing the\nquotes to a prop would also give the consumer or caller of the `RandomQuote`\ncomponent the ability to customize the list of quotes.\n\nHere's an updated version of the `RandomQuote` component that defines the list\nof quotes as a prop:\n\n```js\n// ./src/RandomQuote.js\n\nimport React from 'react';\n\nclass RandomQuote extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentQuoteIndex: this.getRandomInt(props.quotes.length),\n    };\n  }\n\n  changeQuote = () => {\n    this.setState((state, props) => {\n      const { currentQuoteIndex } = state;\n      const { quotes } = props;\n\n      let newIndex = -1;\n\n      do {\n        newIndex = this.getRandomInt(quotes.length);\n      } while (newIndex === currentQuoteIndex);\n\n      return {\n        currentQuoteIndex: newIndex,\n      };\n    });\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Random Quote</h2>\n        <p>{this.props.quotes[this.state.currentQuoteIndex]}</p>\n        <button type='button' onClick={this.changeQuote}>Change Quote</button>\n      </div>\n    );\n  }\n}\n\nexport default RandomQuote;\n```\n\nNotice that the `constructor` method now defines a `props` parameter and passes\nthat parameter into the `super` method call:\n\n```js\nconstructor(props) {\n  super(props);\n\n  this.state = {\n    currentQuoteIndex: this.getRandomInt(props.quotes.length),\n  };\n}\n```\n\nThe `changeQuote` and `render` methods were also updated to reference the quotes\nusing `this.props.quotes` instead of `this.state.quotes`.\n\nNow, in the `index.js` file, the quotes to randomly display can be passed into\nthe `RandomQuote` component:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomQuote from './RandomQuote';\n\nconst quotes = [\n  'Toto, I\\'ve a feeling we\\'re not in Kansas anymore.',\n  'Here\\'s looking at you, kid.',\n  'There\\'s no crying in baseball!',\n  'Elementary, my dear Watson.',\n  'Rosebud.',\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuote quotes={quotes} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nUnfortunately, now the consumer or caller of the component _must_ set the\n`quotes` prop or the component will throw an error. You can retain the previous\nbehavior by defining a default value for the `quotes` prop using the\n`defaultProps` static property:\n\n```js\nimport React from 'react';\n\nclass RandomQuote extends React.Component {\n  // Code removed for brevity.\n}\n\nRandomQuote.defaultProps = {\n  quotes: [\n    'May the Force be with you.',\n    'There\\'s no place like home.',\n    'I\\'m the king of the world!',\n    'My mama always said life was like a box of chocolates.',\n    'I\\'ll be back.',\n  ],\n};\n\nexport default RandomQuote;\n```\n\nThe default `quotes` prop value will be used if the consumer or caller of the\n`RandomQuote` component doesn't provide a value for the `quotes` prop.\n\nNow the `RandomQuote` component can be used without having to provide the\n`quotes` prop:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomQuote from './RandomQuote';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuote />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n## What you learned\n\nIn this article, you learned how to:\n\n* Create a React component using ES2015 class syntax;\n* Describe when it's appropriate to use a class component;\n* Initialize and update state within a class component; and\n* Provide default values for props.\n\n[create-class]: https://reactjs.org/docs/react-without-es6.html\n[react hooks]: https://reactjs.org/docs/hooks-intro.html\n[init state]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-class-components/assets/react-class-components-init-state.png\n[react developer tools]: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\n"
  },
  "success": true
}