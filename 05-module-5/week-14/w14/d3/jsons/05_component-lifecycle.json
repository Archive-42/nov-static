{
  "template": {
    "taskId": "8d415669-5f3b-45f6-8585-4e89493e56cc",
    "name": "Component Lifecycle",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-class-components/readings/reading-component-lifecycle-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "component-lifecycle"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# Component Lifecycle\n\nWhen creating a React class component, you define its props and state, how it'll\nhandle user generated events, and how it'll render, but you don't directly\ncontrol _when_ those things occur. And while you can add your component to\nanother component's `render` method (making it a child of that component), you\ndon't control _when_ your component will be loaded into (or unloaded from) the\ncomponent tree. You also don't control when your component will be updated and\nre-rendered.\n\nThe lifecycle of a component is simply a way of describing the key moments in\nthe lifetime of a component: when it's loading (i.e. mounting), updating, and\nunloading (i.e. unmounting).\n\nWhen you finish this article, you should be able to:\n\n* Describe the lifecycle of a React component;\n* Recall that the commonly used component lifecycle methods include\n  `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`; and\n* Use the `componentDidMount` component lifecycle method to fetch data from an\n  API.\n\n## The lifecycle of a React component\n\nEach class component has several lifecycle methods that you can add to run code\nat specific points in a component's lifetime:\n\n* [`componentDidMount`][react docs componentdidmount] - This method is called\n  after your component has been added to the component tree.\n* [`componentDidUpdate`][react docs componentdidupdate] - This method is called\n  after your component has been updated.\n* [`componentWillUnmount`][react docs componentwillunmount] - This method is\n  called just before your component is removed from the component tree.\n\nLet's take a closer look the process that occurs when a component is mounting,\nupdating, and unmounting.\n\n### Mounting\n\nWhen a class component is being added to the component tree, the following\nprocess occurs:\n\n* The `constructor` method is called;\n* The `render` method is called;\n* React updates the DOM; and\n* The `componentDidMount` lifecycle method is called.\n\n### Updating\n\nA component will update if it receives new props or if the `setState` method is\ncalled.\n\nWhen a component receives new props, the following process occurs:\n\n* The `render` method is called;\n* React updates DOM; and\n* The `componentDidUpdate` lifecycle method is called.\n  \nWhen a the `setState` method is called, the following process occurs:\n\n* The `render` method is called;\n* React updates DOM; and\n* The `componentDidUpdate` lifecycle method is called.\n\n### Unmounting\n\nJust before a class component is removed from the component tree, the\n`componentWillUnmount` lifecycle method is called.\n\n> To see a visual depiction of the above processes, check out this interactive\n> [lifecycle diagram].\n\n### Avoiding the legacy lifecycle methods\n\nIn earlier versions of React, there were additional lifecycle methods that you\ncould use. These methods are now deprecated and are marked as \"unsafe\" to use\n(because they'll eventually be removed from React's API).\n\nThe legacy lifecycle methods are:\n\n* [`UNSAFE_componentWillMount`][react docs componentwillmount]\n* [`UNSAFE_componentWillReceiveProps`][react docs componentwillreceiveprops]\n* [`UNSAFE_componentWillUpdate`][react docs componentwillupdate]\n\nSometimes you'll encounter these lifecycle methods in older articles and code\nexamples when researching React online. To learn more about these lifecycle\nmethods, see the [official React documentation][react docs legacy lifecycle\nmethods].\n\n## Using the class component lifecycle methods\n\nTo see the [`componentDidMount`][react docs componentdidmount],\n[`componentDidUpdate`][react docs componentdidupdate], and\n[`componentWillUnmount`][react docs componentwillunmount] lifecycle methods in\naction, you can create a couple of simple React class components.\n\nFor the first class component, you'll define the `componentDidMount`,\n`componentDidUpdate`, and `componentWillUnmount` lifecycle methods and render an\n`<h2>` element using the `this.props.text` prop for its content:\n\n```js\n// ./src/LifecycleMethods.js\n\nimport React from 'react';\n\nclass LifecycleMethods extends React.Component {\n  componentDidMount() {\n    debugger;\n  }\n\n  componentDidUpdate() {\n    debugger;\n  }\n\n  componentWillUnmount() {\n    debugger;\n  }\n\n  render() {\n    return (\n    <h2>{this.props.text}</h2>\n    );\n  }\n}\n\nexport default LifecycleMethods;\n```\n\nThe `debugger` statements will cause the browser to break within each of the\nlifecycle methods when they're invoked.\n\nFor the second class component, you'll create a component that'll use the\n`LifecycleMethods` component:\n\n```js\n// ./src/Demo.js\n\nimport React from 'react';\nimport LifecycleMethods from './LifecycleMethods';\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      displayComponent: false,\n      componentText: new Date().toLocaleString(),\n    };\n  }\n\n  loadComponent = () => {\n    this.setState({ displayComponent: true });\n  }\n\n  unloadComponent = () => {\n    this.setState({ displayComponent: false });\n  }\n\n  updateComponent = () => {\n    this.setState({\n      componentText: new Date().toLocaleString(),\n    });    \n  }\n\n  render() {\n    return this.state.displayComponent ?\n      (\n        <div>\n          <div>\n            <button type='button' onClick={this.unloadComponent}>Unload Component</button>\n            <button type='button' onClick={this.updateComponent}>Update Component</button>\n          </div>\n          <LifecycleMethods text={this.state.componentText} />\n        </div>\n      ) : (\n        <div>\n          <button type='button' onClick={this.loadComponent}>Load Component</button>\n        </div>\n      );\n  }\n}\n\nexport default Demo;\n```\n\nNotice that the component renders buttons to control when the `LifecycleMethods`\ncomponent is loaded, updated, and unloaded. Having these buttons will allow you\nto interactive trigger each of the lifecycle methods defined within the\n`LifecycleMethods` component.\n\nIf you're following along, be sure to update your React application's entry\npoint to render the `Demo` component:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './Demo';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Demo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nThen run your application (`npm start`) and open the developer tools console in\nyour browser. Here's the application just after clicking the \"Load Component\"\nbutton. Notice that execution is paused within the `LifecycleMethods`\ncomponent's `componentDidMount` lifecycle method!\n\n![component lifecycle demo]\n\n## Fetching data from an API\n\nA common use case for the `componentDidMount` lifecycle method, is to fetch data\nfrom an API after a component has been mounted to the DOM. Here's an example of\na class component that uses the `componentDidMount` lifecycle method to retrieve\nthe public repositories for the provided GitHub username and render the\nrepositories as an unordered list of links:\n\n```js\n// ./src/FetchingData.js\n\nimport React from 'react';\n\nclass FetchingData extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      repositories: [],\n    };\n  }\n\n  componentDidMount() {\n    const url = `https://api.github.com/users/${this.props.gitHubUsername}/repos`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => this.setState({ repositories: data }));\n  }\n\n  render() {\n    const { repositories } = this.state;\n\n    if (repositories.length === 0) {\n      return (\n        <div>Fetching data...</div>\n      );\n    } else {\n     return (\n       <div>\n         <h2>GitHub Repositories for {this.props.gitHubUsername}</h2>\n         <ul>\n           {\n             repositories.map((repo) => (\n               <li key={repo.id}>\n                 <a href={repo.html_url}>{repo.name}</a>\n               </li>\n             ))\n           }\n         </ul>\n       </div>\n     );\n    }\n  }\n}\n\nexport default FetchingData;\n```\n\nIn the above example, the `FetchingData` component initially renders\n`<div>Fetching data...</div>`. Once the component is mounted to the DOM, the\n`componentDidMount` lifecycle method is called, which in turn uses the Fetch API\nto retrieve the public repositories for the provided GitHub username. When the\nfetch HTTP request completes and the JSON response is parsed, the\n`this.setState` method is called to update the `this.state.repositories`\nproperty with the newly acquired data. Updating the state causes React to\nre-render the component which then displays an unordered list of links.\n\nIf you're following along, be sure to update your React application's entry\npoint to render the `FetchingData` component and to set the `gitHubUsername`\nprop on the component to a valid GitHub username:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport FetchingData from './FetchingData';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FetchingData gitHubUsername='appacademy' />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nHere's the component displaying the public repositories for the `appacademy`\nGitHub username:\n\n![component lifecycle fetching data]\n\n## What you learned\n\nIn this article, you learned how to:\n\n* Describe the lifecycle of a React component;\n* Recall that the commonly used component lifecycle methods include\n  `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`; and\n* Use the `componentDidMount` component lifecycle method to fetch data from an\n  API.\n\n## See also...\n\nIn addition to the `componentDidMount`, `componentDidUpdate`, and\n`componentWillUnmount` lifecycle methods, there are additional rarely used\nlifecycle methods. To learn more about these additional lifecycle methods, see\nthe [official React documentation][react docs component lifecycle].\n\n[react docs componentdidmount]: https://reactjs.org/docs/react-component.html#componentdidmount\n[react docs componentdidupdate]: https://reactjs.org/docs/react-component.html#componentdidupdate\n[react docs componentwillunmount]: https://reactjs.org/docs/react-component.html#componentwillunmount\n[react docs legacy lifecycle methods]: https://reactjs.org/docs/react-component.html#legacy-lifecycle-methods\n[react docs componentwillmount]: https://reactjs.org/docs/react-component.html#unsafe_componentwillmount\n[react docs componentwillreceiveprops]: https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\n[react docs componentwillupdate]: https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate\n[lifecycle diagram]: http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n[react docs component lifecycle]: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n[component lifecycle demo]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-class-components/assets/component-lifecycle-demo.png\n[component lifecycle fetching data]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-class-components/assets/component-lifecycle-fetching-data.png\n"
  },
  "success": true
}