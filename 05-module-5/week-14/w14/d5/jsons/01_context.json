{
  "template": {
    "taskId": "752d4924-5317-4d4f-a1c2-545b567d1c9b",
    "name": "Context",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-context/readings/reading-react-context-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "context"
    ],
    "topic": "Homework for Friday",
    "subtopic": "Homework",
    "body": "\n# React Context\n\nAt this point, you know how to manage a component's state and pass information\ndown an application's component tree by threading props from parent components\nto child components. Think of how tedious it could be to pass down information,\nlike current user data or a UI theme, to every component in an application.\nInstead of threading the information as props from a parent component to its\nchildren and grandchildren, you can share information with any of your\napplication's components by using React Context!\n\n[React Context] gives you a way to pass data through the component tree without\nhaving to manually thread props. Context gives developers a convenient way to\nshare and update \"global\" data across a React application. Now it's time to dive\ninto application-wide data management!\n\nWhen you finish this article, you should be able to:\n\n* Use React Context to pass down global information\n* Create a Provider wrapper component to set a default context\n* Create a Consumer wrapper component to allow child components to subscribe to\n  a global context\n* Use the `static contextType` property to access the global context\n* Update the global context from a nested component\n\n> In a future lesson, you'll learn about Redux, a common approach for managing\n> global state in React applications. The React Context can be thought of as a\n> lightweight alternative to using Redux.\n\n## Using Context\n\nIn this demo, you'll create a simple React app that uses Context to allow users\nto choose what puppy picture to render.\n\nBegin by cloning this starter React app with a folder of `pups` photos!\n\n```sh\ngit clone https://github.com/appacademy-starters/react-context-pups-starter.git\n```\n\nNow let's import the pup photos into your `App.js` file and render the `speedy`\npup:\n\n```js\n// App.js\nimport React from 'react';\nimport speedy from './pups/speedy-pup.jpg'\nimport banana from './pups/banana-pup.jpg'\nimport sleepy from './pups/sleepy-pup.jpg'\n\nconst App = () => (\n  <div id=\"app\">\n    <img src={speedy} alt=\"pup\" />\n  </div>\n);\n\nexport default App;\n```\n\nStart your application is you'll see a huge and super happy pup that's running!\nTake a moment to update your `index.css` file so that your pup photo isn't so\nlarge:\n\n```css\n/* index.css */\nbody {\n  padding: 50px;\n}\n\n#app {\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n}\n\nimg {\n  width: 500px;\n}\n```\n\nBeing able to render a pup photo is great, but what about giving your users the\nchance to select a pup photo to render? Let's allow your users to select a pup\nphoto through a form by passing information through Context!\n\n### Creating a Context\n\nYou can use the [React.createContext] method to create a `PupContext`. In order\nto create a context, you can simply import the `createContext()` function from\n`react`, invoke the function to create a Context object, and export the Context!\n\n```js\n// PupContext.js\nimport { createContext } from 'react';\n\nconst PupContext = createContext();\n\nexport default PupContext;\n```\n\nNote that if you invoke the `createContext` method with arguments, those\narguments will be set as the default context. In the next step, you'll set up a\ncomponent's state to use as the default context.\n\n### Adding a Provider to the App component\n\nThe _Provider_ component expects `value` prop to set the context information\npassed throughout your application. You need to wrap your child components with\nprovider component tags to give them access to the context. The context `value`\nwill include information to pass to child components by using context _Consumer_\ncomponents. As a reminder, Consumer components must always be nested under\nProvider components because the Provider must render first (parent components\nalways render before children components).\n\n```jsx\n<MyContext.Provider value={/* some value */}>\n  <ChildComponent />\n</MyContext.Provider>\n```\n\nNow you'll use [Context.Provider] to create a wrapper component to set the\n`value` of your `PupContext`! Let's go into your `App.js` file to create an\n`AppWithContext` wrapper component that will pass a `puppyType` prop to\ndetermine what image your `App` component renders.\n\nYour wrapper component should set up a default `puppyType` state in its\nconstructor. Choose one of your imported pup photos (`banana`, `sleepy`, or\n`speedy`) to set as the default state.\n\n```js\nthis.state = {\n  puppyType: speedy,\n};\n```\n\nNote that you should set the `puppyType` as `speedy` instead of `\"speedy\"`\n(without quotations), or else you'd be setting a string to be the default state,\ninstead of a default pup photo to be rendered.\n\nNow let's visit the `AppWithContext` component's `render()` method! You'll want\nto render the `App` component wrapped with `<PupContext.Provider>` tags to give\n`App` and all of its children components access to the `PupContext`:\n\n```js\nrender() {\n  return (\n    <PupContext.Provider value={}>\n      <App />\n    </PupContext.Provider>\n  );\n}\n```\n\nRemember that provider components expect to receive a `value` prop. The `value`\nprop will hold the context information that will be passed throughout the\napplication. Set the provider component's `value` prop to be the `state` of your\n`AppWithContext` component. As you know, a component re-renders when its state\nis updated. This is how you'll update an application's context from nested\ncomponents. Your `AppWithContext` component's `render()` method should look\nsomething like this:\n\n```js\nrender() {\n  return (\n    <PupContext.Provider value={this.state}>\n      <App />\n    </PupContext.Provider>\n  );\n}\n```\n\nSince you are rendering the pup image from `App`, you can pass in the wrapper\ncomponent's `puppyType` state as a prop:\n\n```jsx\n<App puppyType={this.state.puppyType} />\n```\n\nNow you can refactor your `App` component to use its `puppyType` prop to render\na specific pup photo!\n\n```js\nconst App = ({ puppyType }) => (\n  <div id=\"app\">\n    <PupForm />\n    <img src={puppyType} alt=\"pup\" />\n  </div>\n);\n```\n\nDon't forget to update the `export` statement at the bottom of your `App.js`\nfile. You'll want to export the `AppWithContext` component instead of the `App`\ncomponent. Don't worry about changing the `App` import statement in your\n`index.js` file. Since you are using `export default`, only the component\nexplicitly specified in your file's export statement will be exported from the\nfile. At this point, your full `App.js` file should look something like this:\n\n```js\n// App.js\nimport React from 'react';\nimport PupContext from './PupContext';\nimport banana from './pups/banana-pup.jpg'\nimport sleepy from './pups/sleepy-pup.jpg'\nimport speedy from './pups/speedy-pup.jpg'\n\nconst App = ({ puppyType }) => (\n  <div id=\"app\">\n    <img src={puppyType} alt=\"pup\" />\n  </div>\n);\n\nclass AppWithContext extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      puppyType: speedy,\n    };\n  }\n\n  render() {\n    return (\n      <PupContext.Provider value={this.state}>\n        <App puppyType={this.state.puppyType} />\n      </PupContext.Provider>\n    );\n  }\n}\n\nexport default AppWithContext;\n```\n\nNow start your server and make sure that your cute pup photo is rendering!\n\n### Adding a Consumer to a nested component\n\nBefore setting up a consumer, let's create a nested child component that will\nconsume your `PupContext`! Create a `PupForm` component that will be be rendered\nas a child of your `App` component. Begin by rendering a dropdown menu for users\nto choose which pup photo to render in the app. Feel free to use the `PupForm`\ncomponent defined below:\n\n```js\n// PupForm.js\nimport React from 'react';\nimport banana from './pups/banana-pup.jpg';\nimport sleepy from './pups/sleepy-pup.jpg';\nimport speedy from './pups/speedy-pup.jpg';\n\nclass PupForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPup: 'select', // Set the default select option\n    };\n  }\n\n  // Update state with the user's dropdown selection\n  updateSelection = (e) => {\n    this.setState({ selectedPup: e.target.value });\n  }\n\n  render() {\n    return (\n      <form>\n        <select\n          name=\"pup\"\n          onChange={this.updateSelection}\n          value={this.state.selectedPup}>\n\n          <option value=\"select\">Select a pup!</option>\n          <option value={speedy}>Speedy Pup</option>\n          <option value={banana}>Banana Pup</option>\n          <option value={sleepy}>Sleepy Pup</option>\n        </select>\n        <button onClick={/* TODO: Set up the click handler */}>\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n```\n\nAs you can see, the `PupForm` has a default `selectedPup` state that will set\nthe default select option to be \"Select a pup!\". There is also an\n`updateSelection` method that listens for change events in the dropdown menu to\nupdate the `selectedPup` slice of state. Now that you have a basic dropdown menu\nset up, it's time to create a consumer wrapper so that the `PupForm` component\ncan have access to the `PupContext`!\n\nYou'll want to use a [Context.Consumer] component to wrap your `PupForm`\ncomponent, this way the wrapped component can subscribe to context changes. Note\nthat the `Context.Consumer` component expects a function as a child:\n\n```jsx\n<MyContext.Consumer>\n  {(value) => <Component value={value} />}\n</MyContext.Consumer>\n```\n\nThe function has access to the `value` prop passed into the `Context.Provider`.\nThe `value` prop can then be passed as a render prop into the wrapped component.\n\nImport your `PupContext` into your `PupForm.js` file and use the\n`Context.Consumer` component to create a wrapper for your `PupForm` component\nlike so:\n\n```js\nconst PupFormWithContext = () => {\n  return (\n    <PupContext.Consumer>\n      {(value) => <PupForm value={value} />}\n    </PupContext.Consumer>\n  );\n};\n```\n\nJust as you did with your `AppWithContext` component, you'll want to export the\n`PupFormWithContext` wrapper component in your `PupForm.js` file.\n\n```js\nexport default PupFormWithContext;\n```\n\nNow update your `App` component to render the `PupFormWithContext` component:\n\n```js\nconst App = ({ puppyType }) => (\n  <div id=\"app\">\n    <PupFormWithContext />\n    <img src={puppyType} alt=\"pup\" />\n  </div>\n);\n```\n\nTake a moment to create a `handleClick` function for your submit button's\n`onClick` listener. For now, simply prevent the default re-render of the\nsubmitted form and console log your component's props so that you can examine\nthe `value` prop passed into the `PupForm` component:\n\n```js\nhandleClick = (e) => {\n  e.preventDefault();\n  console.log(this.props);\n}\n```\n\nOpen up your developer tools and click the submit button! You should see the\ncontext `value` prop logged in your console:\n\n```sh\n{value: {...}}\n```\n\nIf you expand the prop, you'll then see the `puppyType`, which is the default\ncontext set by your `AppWithContext` component's state!\n\nNote that you can also use the `static contextType` property to access context\nvalue in class components. Take a moment to set the `contextType` property to\nyour `PupContext` in the `PupForm` class component:\n\n```js\n// Rest of file not shown\nclass PupForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPup: 'select',\n    };\n  }\n\n  static contextType = PupContext;\n// Rest of file not shown\n```\n\nNow update your `handleClick` method to console log `this.context` instead of\n`this.props`:\n\n```js\nhandleClick = (e) => {\n  e.preventDefault();\n  console.log(this.context);\n}\n```\n\nClick the submit button to fire your `handleClick` method and you should see the\ncontext `value` object logged in your console:\n\n```sh\n{puppyType: \"/static/media/speedy-pup.d706601f.jpg\"}\n```\n\nNote that the `static contextType` property only works for class components.\nBecause of this, you'll focus on using `Context.Consumer` components to manually\npass render props.\n\n## Updating the Context from a nested component\n\nNow you can access the context value, but what about updating the context value?\nIt's a common need to update the global context from a child consumer component.\nFor example, if your Context is providing the UI theme or language, you might\nhave a child component that consumes the context and allows a user to select\ntheir preferred theme or language.\n\nOnce a user makes a selection, your application will need a way to update the\ncontext value. From the context update fired from the child component, your\napplication will re-render all of the nested components that depend on that\ndata.\n\nLet's define an `updateContext` method in your `AppWithContext` component! This\nmethod will take care of updating the `puppyType` slice of state:\n\n```js\nupdateContext = (puppyType) => {\n  this.setState({ puppyType });\n}\n```\n\nYou'll then set a reference to the method in the state so that a nested\ncomponent (with access to context) can invoke the `updateContext` method to\nupdate the `AppWithContext` state (and therefore the global context)!\n\n```js\nthis.state = {\n  puppyType: speedy,\n  updateContext: this.updateContext,\n};\n```\n\nAt this point, your complete `AppWithContext` component should look something\nlike this:\n\n```js\nclass AppWithContext extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      puppyType: speedy,\n      updateContext: this.updateContext,\n    };\n  }\n\n  updateContext = (puppyType) => {\n    this.setState({ puppyType });\n  }\n\n  render() {\n    return (\n      <PupContext.Provider value={this.state}>\n        <App puppyType={this.state.puppyType} />\n      </PupContext.Provider>\n    );\n  }\n}\n```\n\nSince your `value` prop is taking in the component's `state`, this means that\nyour `updateContext` method is also available to any components with access to\ncontext. Let's revisit the `PupFormWithContext` component! Update the wrapper\ncomponent to pass the `updateContext` method as a render prop to the `PupForm`:\n\n```js\nconst PupFormWithContext = () => {\n  return (\n    <PupContext.Consumer>\n      {(value) => <PupForm updateContext={value.updateContext} />}\n    </PupContext.Consumer>\n  );\n};\n```\n\nNow if you update your `handleClick` method to console log both `this.props` and\n`this.context`, you'll see the `updateContext` method you just created and\npassed down!\n\n```js\nhandleClick = (e) => {\n  e.preventDefault();\n  console.log(this.props);\n  console.log(this.context);\n}\n```\n\nThis means that you can invoke either `this.props.updateContext` or\n`this.context.updateContext` to update the global context. Take a moment to\nrefactor your `handleClick` method to invoke the `updateContext` method by\npassing in the `selectedPup` from the `PupForm` state:\n\n```js\nhandleClick = (e) => {\n  e.preventDefault();\n  this.props.updateContext(this.state.selectedPup);\n}\n```\n\nNow you should be able to use the dropdown menu to select a pup photo to render!\nCongratulations, you now know how to use React Context to share and update\nglobal information across your application!\n\n## What you learned\n\nIn this article, you learned how to:\n\n* Create a Context to share global information with an application; and\n* Use the `Context.Provider` to create a wrapper and set the default context;\n  and\n* Use the `Context.Consumer` to create a wrapper that shares the global context\n  through render props; and\n* Access the global context through the `contextType` property; and\n* Pass a method to a nested component to update the global context.\n\n[React Context]: https://reactjs.org/docs/context.html\n\n[React.createContext]: https://reactjs.org/docs/context.html#reactcreatecontext\n\n[Context.Provider]: https://reactjs.org/docs/context.html#contextprovider\n\n[Context.Consumer]: https://reactjs.org/docs/context.html#contextconsumer\n"
  },
  "success": true
}