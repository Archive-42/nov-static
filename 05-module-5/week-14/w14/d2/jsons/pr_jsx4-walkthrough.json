{
  "template": {
    "taskId": "15c0a5eb-1e6d-47ea-87be-d8b01ded223d",
    "name": "JSX Walk-Through Practice (Part 4)",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/projects/pet-detail-page-jsx/README-04-owners-list.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "jsx-walk-through-part-4"
    ],
    "topic": "Tuesday - React!",
    "subtopic": "JSX Project",
    "body": "# JSX Walk-Through: Pet Details, Part 2\n\nAll you have left is to create a list of owners with links.\n\n* `PetDetailPage`: Done\n* `Navigation`: Done\n* `PetDetails`: Modified in this step\n* `PetDetailList`: Done\n* `PetInformationItem`: Done\n* `OwnersList`: Created in this step\n* `OwnerLink`Created in this step\n\n![Petrack component analysis]\n\nYou're almost done. Now, you get to handle a collection of data from the owners.\n\n## Stub out the owners list component\n\nYou've done this four other times, so it's pretty straight forward.\n\n* Create the **src/OwnersList.js** file. In it,\n  * Import the React object\n  * Create the function-based component named `OwnersList` with a `props`\n    argument that uses a `React.Fragment` as its element\n  * Add a child that is an 'h2' with the content \"Owners\"\n  * Using `defaultProps`, add a default property value for \"owners\" and set it\n    to an empty array because this component will expect an array of owner data\n  * Export the `OwnersList` as the default export\n* In the **PetDetails.js** file,\n  * Import the `OwnersList` component\n  * Add it as another child element of the `PetDetailPage` component after the\n    `PetDetailList`\n  * Wrap both the `PetDetailList` and `OwnersList` in a `Fragment`.\n  * Pass in the owners to the `OwnersList` component in a property named\n    \"owners\" like this `{props.pet.Owners}` which will pass in the\n    array of owners for the pet\n  * Fix the error with a default value for the \"pet\" property\n\n```jsx\n// src/PetDetails.js\nimport React from 'react';\n\nimport OwnersList from './OwnersList';\nimport PetDetailList from './PetDetailList';\n\nconst PetDetails = props =>\n  <>\n    <PetDetailList pet={props.pet} />\n    <OwnersList owners={props.pet.Owners} />\n  </>\n;\n\nPetDetails.defaultProps = {\n  pet: {\n    PetType: {},\n  },\n};\n\nexport default PetDetails;\n```\n\nRefresh the page and make sure everything still works.\n\n![Petrack with owners headline]\n\n## Dealing with the list\n\n**Note**: This section introduces an error that you will fix. It is a common\nerror about how to create React elements from lists. You may see it often. This\nway, you will know how to fix it, too.\n\nBack in **OwnersList.js**, you want a `ul` to follow the `h2`.\n\n```js\nconst OwnersList = props =>\n  <>\n    <h2>Owners</h2>\n    <ul>\n      {/* Create li elements here */}\n    </ul>\n  </>\n;\n```\n\nHere's the thing. You have an array of owners. You want to turn them into some\nlist items. For each owner, you want to _map_ that to a list item. And, therein\nlies the hint. Since the value in `props.owners` is an array, you can use the\n`map` function to generate another array of React elements and plop them in\nthere! Give it a go with this code. Replace the comment about where list items\ngo above with this line of code.\n\n```jsx\n{ props.owners.map(owner =>\n  <li>{owner.firstName}</li>\n)}\n```\n\nRefresh the page. What happens? You should now see \"Human\" for each of the\nlist items. That's great! In the console, there's an error. That's sad!\n\n![Petrack with owners list and key error]\n\nIn this last step, you've changed the way you're passing children into the\n`React.createElement`. Up until now, you've had discrete single elements as\nchildren, like in **PetDetailList.js** where you have this code.\n\n```jsx\nconst PetDetailList = props =>\n  <>\n    <h2>Details</h2>\n    <dl>\n      <PetInformationItem name=\"Name\" value={props.pet.name}/>\n      <PetInformationItem name=\"Age\" value={props.pet.age}/>\n      <PetInformationItem name=\"Type\" value={props.pet.PetType.type}/>\n    </dl>\n  </>\n;\n```\n\nEach of `PetInformationItem` elements is a different, discrete, and separate\nchild for the `dl` element.\n\nThe code in **OwnersList.js**, this code,\n\n```jsx\nconst OwnersList = props =>\n  <>\n    <h2>Owners</h2>\n    <ul>\n      {props.owners.map(owner =>\n        <li>{owner.firstName}</li>\n      )}\n    </ul>\n  </>\n;\n```\n\nin that, you have created an _array_ of objects. Recall that when you call the\n`map` function on an array, it returns _another array_. React doesn't care\nabout this, but it would like a little help in tracking each of those entries\nin the virtual DOM that it builds. That's what the error message is about,\ngiving React a little help by providing a \"key\" property for each of the\nelements that you're creating in the array. The value of the \"key\" property\nmust be unique and stable, that is, for a given object (like an owner named\n\"Human One\" with an id of 7), the value returned must always be the same.\nLuckily, because you have the id of the owner, you can use that because that id\nvalue is tied to a primary key, somewhere, and should never change for this\nobject. The name can change, of course. But, the id will likely never change.\n\nAdd a \"key\" property to the `li` element and set it equal to the id of the owner\nobject, like this.\n\n```jsx\n<li key={owner.id}>{owner.firstName}</li>\n```\n\nNow, the error in the console goes away.\n\nBack to the `OwnersList` component, look at the formatting, the indentation that\nyou see in the code.\n\n```jsx\nconst OwnersList = props =>\n  <>\n    <h2>Owners</h2>\n    <ul>\n      {props.owners.map(owner =>\n        <li key={owner.id}>\n          {owner.firstName}\n        </li>\n      )}\n    </ul>\n  </>\n;\n```\n\nThat, too, is idiomatic React, the _React_ way of doing things. You'll see that\nkind of code all over the React world.\n\n## The owner link component\n\nWhile it's nice, and all, to see the owner's first name in the list, the actual\npage has a link to the owner page with the format \"last name, first name\". Time\nto create the (last!) component of this walk-through.\n\nCreate a new file named **src/OwnerLink.js**. In it, do the following:\n\n* Import the React object\n* Create a new function-based component named `OwnerLink` that accepts data that\n  has\n  * `a` as its element\n  * An object literal with the property name \"href\" and the value of the\n    \"href\" property passed in through the `props`\n  * A string as its child which contains the last name and the first name\n* Export the component as the default export\n\nOnce you have that, import the `OwnerLink` component into the\n**src/OwnersList.js** file. Now, replace this line in `OwnersList`\n\n```jsx\n{owner.firstName}\n```\n\nwith an `OwnerLink` component with _three_ attributes: \"href\", \"firstName\", and\n\"lastName\". Those are the three properties expected inside the component. Use\nthe curly brace syntax to pass in the appropriate values of the `owner`. This is\nsomething you haven't done, yet. Try to think through the problem of how to pass\nin _multiple_ property values. If you get stuck and can't get it after about ten\nminutes, ask for help!\n\nRefresh the page. If everything works, you're done!\n\n## What you've done, here\n\nIn this part of the walk-through, you used a collection to render a collection\nof React elements. You found out that using a collection like that requires you\nto provide a \"key\" property that has a stable, unique value. Once you had that,\nReact would gladly manage that collection of objects in its virtual DOM.\n\n## What you've done, overall\n\nYou have used JSX to do some amazing things, here.\n\n* You reinforced the best practice of putting one React component in its own\n  file (module) and exporting it as the default value of the module\n* You learned that JSX compiles to `React.createElement`\n* You learned that `<>` and `</>` are shorthand literal for the often-used\n  `React.Fragment` element\n* You used `defaultProps` to make sure that components always had some valid\n  values to work with\n* You used _pure functional components_ all the way through this, which means\n  that none of the components used any other data than what was given to it\n* You are intimately familiar with how React creates its elements, now, which\n  means there will be no magical thinking about JSX when you use it\n\n[Petrack component analysis]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-all-components-with-details-list.png\n[Petrack with owners headline]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-pet-detail-with-owners-headline.png\n[Petrack with owners list and key error]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-pet-detail-owners-list-with-key-error.png\n"
  },
  "success": true
}