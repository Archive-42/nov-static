{
  "template": {
    "taskId": "010d4393-c821-4f6e-a24d-7a0ea56453a3",
    "name": "createElement",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/readings/reading-create-element.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "createelement"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "React Introduction",
    "body": "# From JavaScript To DOM\n\nThe path from JavaScript to actual DOM elements appearing in your HTML document\nis not complex thanks to React. However, it is worth reviewing so that there is\nno mystery about it.\n\nIn this article, you will review how to use `React.createElement` to get what\nyou want into React's virtual DOM so that React will convert into real DOM.\nThere are three steps:\n\n* Invoking `createElement` to build the \"element tree\"\n* Invoking `render` to let React build its virtual DOM\n* \"Waiting\" for React to convert its virtual DOM into real DOM\n\nThis article's goal is for React to create the following HTML in the DOM.\n\n```html\n<ul>\n  <li class=\"selected\">\n    <a href=\"/pets\">Pets</a>\n  </li>\n  <li>\n    <a href=\"/owners\">Owners</a>\n  </li>\n</ul>\n```\n\n## Using React\n\nThere is one method to consider when building interfaces using low-level React.\nFrom the [documentation], the `React.createElement` function has the following\nform:\n\n```js\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nThe arguments for it are\n\n* **type**: the type of element to create, either a string for an HTML element,\n  or a reference to a function or class that is a React component\n* **props**: an object that contains data to render the element, either data to\n  dynamically show or attributes to put on the element in the HTML\n* **children**: the children of the element, as many as you want\n\n## Creating elements\n\nFor each tag that you want to create with React, you will make a call to\n`React.createElement`. In the HTML above, there are five tags to create:\n\n* One `ul` element\n* Two `li` elements\n* Two `a` elements\n\nThree of those tags have attributes that you want to have appear in the DOM:\n\n* One `li` element has a \"class\" attribute (which you _must_ translate to\n  \"className\" when using in React)\n* Both `a` elements have \"href\" attributes\n\nFinally, there is a parent-child relationship between the elements.\n\n* The `ul` element is the parent of both `li` elements\n* Both `li` elements have a single `a` element child\n* Both `a` elements have \"child\" text content\n\nTo summarize, here are the elements and how you would translate them to their\nrespective arguments for `React.createElement`.\n\n| HTML snippet                    | type   | props                       | children                                                    |\n|---------------------------------|--------|-----------------------------|-------------------------------------------------------------|\n| `<ul>...</ul>`                  | `'ul'` | `null`                      | Two calls to `React.createElement`, one for each `li` child |\n| `<li class=\"selected\">...</li>` | `'li'` | `{ className: 'selected' }` | One call to `React.createElement` for the `a` child         |\n| `<li>...</li>`                  | `'li'` | `null`                      | One call to `React.createElement` for the `a` child         |\n| `<a href=\"/pets\">Pets</a>`      | `'a'`  | `{ href: '/pets' }`         | The string `'Pets'`                                         |\n| `<a href=\"/owners\">Owners</a>`  | `'a'`  | `{ href: '/owners' }`       | The string `'Owners'`                                       |\n\nTo create this tree of elements, you will use nested calls to\n`React.createElement`. The standard formatting for this is for elements to have\nchildren, put each argument on its own line, and for elements that have no\nchildren or just text content, put all arguments on a single line.\n\nSince the `ul` has children, it will have its arguments on separate lines.\nReferring to the table above gives you:\n\n```js\nReact.createElement(\n  'ul',\n  null,\n  // First li child,\n  // Second li child,\n);\n```\n\nThe first `li` element has a child. Its call to `React.createElement` will have\nits arguments each go on their own separate lines:\n\n```js\nReact.createElement(\n  'ul',\n  null,\n  React.createElement(\n    'li',\n    { className: 'selected' },\n    // a child\n  ),\n  // Second li child,\n);\n```\n\nThe anchor element for \"Pets\" has only one text child. Its call to\n`React.createElement` will have its arguments on one line:\n\n```js\nReact.createElement(\n  'ul',\n  null,\n  React.createElement(\n    'li',\n    { className: 'selected' },\n    React.createElement('a', { href: '/pets'}, 'Pets'),\n  ),\n  // Second li child,\n);\n```\n\nThe second `li` element has a child. Its call to `React.createElement` will have\nits arguments each go on their own separate lines:\n\n```js\nReact.createElement(\n  'ul',\n  null,\n  React.createElement(\n    'li',\n    { className: 'selected' },\n    React.createElement('a', { href: '/pets'}, 'Pets'),\n  ),\n  React.createElement(\n    'li',\n    null,\n    // a child\n  ),\n);\n```\n\nThe other anchor element, the one for \"Owners\" has only one text child. Its call\nto `React.createElement` will have its arguments on one line:\n\n```js\nReact.createElement(\n  'ul',\n  null,\n  React.createElement(\n    'li',\n    { className: 'selected' },\n    React.createElement('a', { href: '/pets'}, 'Pets'),\n  ),\n  React.createElement(\n    'li',\n    null,\n    React.createElement('a', { href: '/owners'}, 'Owners'),\n  ),\n);\n```\n\nThat's how you translate what you want from simple HTML into well-formatted\ncalls to `React.createElement`. That will build the \"element tree\" for React to\nuse.\n\n## Converting to virtual DOM\n\nTo tell React to start the conversion process, you have to use the\n`React.render` method which takes a value returned from `React.createElement`\nand a DOM node in the actual document where React will insert the result of the\nconversion into real DOM.\n\nIf you wanted to insert what was created in the last section into the `main`\ntag, the most forward way of doing that is like this.\n\n```js\n// Put the element tree in a variable\nconst navList = React.createElement(\n  'ul',\n  null,\n  React.createElement(\n    'li',\n    { className: 'selected' },\n    React.createElement('a', { href: '/pets'}, 'Pets'),\n  ),\n  React.createElement(\n    'li',\n    null,\n    React.createElement('a', { href: '/owners'}, 'Owners'),\n  ),\n);\n\n// Get a DOM node for React to render to\nconst mainElement = document.querySelector('main');\n\n// Give React the element tree and the target\nReactDOM.render(navList, mainElement);\n```\n\nAt this point, you have given the element tree that you want created to React.\nIt will then take that and construct its virtual DOM from it.\n\n![Convert element tree to virtual DOM]\n\nNow that it has built it's own model of the virtual DOM using the elements that\nyou created, it can now take that and turn that into real DOM.\n\n![Convert virtual DOM to real DOM]\n\nIt takes that real DOM and inserts it as the content of the target that you gave\nit which, in this case, is the `main` element in the body of the document.\n\n## Updates\n\nWhen you call `React.render` again for the same component and target, React\ntakes the existing virtual DOM it knows about last time it rendered the element\ntree, compares it to whatever new thing you want to render, and determines which\n(if any) of the living DOM needs to change.\n\nFor example, let's say you constructed the same element tree but left off the\n\"selected\" class for the first list element. Then, when you rendered it, again,\nby calling `React.render`, React would compare the new element tree with the old\nelement tree, figure out that one class was missing on that one `li` element,\nand remove that and only that from the real DOM.\n\n![Virtual DOM diff]\n\n## What you've learned\n\nIn this article, you learned\n\n* To convert desired HTML into properly-formatted nested calls of\n  `React.createElement`\n* How React takes your element tree and builds its virtual DOM from the elements\n  that you created\n* How React takes that virtual DOM and inserts it into the living HTML document\n* How React will compare an old virtual DOM tree with a new virtual DOM tree,\n  figure out what changed, and then change that and only that in the real DOM\n\n\n[documentation]: https://reactjs.org/docs/react-api.html#createelement\n[Convert element tree to virtual DOM]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-example-conversion-virtual-dom.svg\n[Convert virtual DOM to real DOM]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-example-conversion-real-dom.svg\n[Virtual DOM diff]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-example-virtual-dom-diff.svg\n"
  },
  "success": true
}