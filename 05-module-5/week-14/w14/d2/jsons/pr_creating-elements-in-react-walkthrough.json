{
  "template": {
    "taskId": "ba2c17a7-caac-4653-9520-b99688df6ec3",
    "name": "Hello Programmers",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/projects/hello-programmers-create-element/README.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "hello-programmers"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "createElement",
    "body": "# Walk-Through: Creating Elements In React\n\nTo start your React journey, you will build your foundational knowledge by\nstarting out with the basic `React.createElement` and `ReactDOM.render`. One of\nthe compelling features of this type of solution is that you do not need _any_\nextra tools to get your app running in the browser. In the next walk-through,\nyou will have to _install_ a ton of packages just to get React to properly work.\nThis project will walk you through how to use a pure JavaScript version of\nReact. Everything will work right out of the box.\n\n## Getting started\n\nInstall the [React DevTools for Google Chrome].\n\n![React DevTools for Google Chrome screenshot]\n\nCreate a new directory to contain this new project. In that directory, create\ntwo files: an **index.html** file and an **app.js** file. In the **index.html**\nfile, create a standard HTML 5 document. In the HTML `body` (in this order),\ncreate a `main` element and a `script` element for your **app.js** file with\n`type=\"module\"` so you can use ES6 modules.\n\nServe your files with a local Python server by running the `python3 -m\nhttp.server` command in your terminal. Make sure you are running the command\nfrom within your project directory. You should be able to open\nhttp://localhost:8000 to see the page, empty as it is.\n\n## Test that things are working\n\nGet ready! You're going to do the first React thing! You're going to create a\nReact element that will display \"Hello, programmers!\". You will then have React\nrender it to the DOM.\n\nCopy and paste the following JavaScript code into your **app.js**, refresh your\npage, look at the code to get a feel for what it does, try to come up with\nexplanations on your own, and then continue reading.\n\n```js\nimport 'https://unpkg.com/react@16/umd/react.development.js';\nimport 'https://unpkg.com/react-dom@16/umd/react-dom.development.js';\n\nconst HelloWorld = () => React.createElement(\n  'h1',\n  null,\n  'Hello, programmers',\n);\n\nconst target = document.querySelector('main');\nconst app = React.createElement(HelloWorld, null);\nReactDOM.render(app, target);\n```\n\n**Note**: You may want to turn on \"Disable cache\" on the _Network_ tab of your\nDevTools and keep the DevTools open while you're doing this to make sure you\nalways have the newest version of the files.\n\nYou should now have _Components_ and _Profiler_ tabs in your DevTools. If you\nclick on the `HelloWorld` component in the _Components_ tab, you can see that it\nhas no _props_. You'll learn much more about props later. For now, just remember\nthat the React DevTools extension is a helpful tool for you to view information\nabout your components and their props.\n\n## Walking through the code\n\nEven though there are only five statements in that code block, a lot is going\non. This section carefully walks through each of the statements to help you get\na deeper understanding.\n\n### Those wacky import statements\n\nConsider those `import` statements. These differ in two ways from what you've\nseen with ES modules to date.\n\n1. They come from another website altogether. When you use `import` to bring in\n   modules from another domain, that request is governed by CORS; that means the\n   other server _must_ have CORS configured to let you import their code.\n   Luckily, unpkg.com configures CORS to allow any authority to import their\n   script files.\n2. They don't seem to import anything. There is no `import { React } from`\n   there. It's just `import 'url'`. This is called a _side effect_ import and is\n   generally frowned upon in modern Web development. But, React does not package\n   their code in ES6 format. What those `import` statements do is _add variables\n   in the global scope_. The two variables they add are `React` from the first\n   import, and `ReactDOM` from the second import. Those global variables can\n   then be used by your code, which happens with `React.createElement` and\n   `ReactDOM.render`.\n\nIf you were going to move these into production, you would change the URLs that\nyou import from\n\n```js\nimport 'https://unpkg.com/react@16/umd/react.development.js';\nimport 'https://unpkg.com/react-dom@16/umd/react-dom.development.js';\n```\n\nto\n\n```js\nimport 'https://unpkg.com/react@16/umd/react.production.min.js';\nimport 'https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js';\n```\n\nThose files contain the minified \"production\" version of the code, which is just\na smaller version of the \"development\" versions. If you open up the links to the\n[react.development.js] and [react-production.min.js] files in your browser,\nyou'll see JavaScript in both files. Notice how the non-minified version\n([react.development.js]) includes plain JavaScript you're used to seeing. The\nminified version simply compresses that JavaScript.\n\n### The odd-looking function\n\nTurn your attention to this statement.\n\n```js\nconst HelloWorld = () => React.createElement(\n  'h1',\n  null,\n  'Hello, programmers!'\n);\n```\n\nThe statement declares the `HelloWorld` variable and stores a function in it.\nThis is the way that components look in React. It is a function-based component\nbecause it's a function. It returns the value returned from\n`React.createElement`. If that syntax is weird, it is functionally the same as\nthis code.\n\n```js\nconst HelloWorld = () => {\n  return React.createElement('h1', null, 'Hello, programmers!');\n}\n```\n\nBecause there are a lot of die-hard functional programmers (as opposed to\nobject-oriented programmers) that like that kind of syntax (arrow functions\nwithout curly braces that span multiple lines), you will see it in a lot of\nplaces while learning React.\n\nThe arguments passed to `React.createElement` are:\n\n1. What to create in the DOM.\n  * If it is a string, it needs to be all lowercase and the name of the HTML\n    element to create. This example passes in `'h1'` as the tag to create in the\n    DOM.\n  * Otherwise, it should be the variable that holds another component. You can\n    see it being used that way in the later code.\n2. Any properties/attributes to put on the generated element. This example\n   passes in `null` because there are no attributes needed. You will see some,\n   soon.\n3. The child content of the element. The third (and fourth and fifth and...)\n   arguments contains what React should put as the children of the content of\n   the element. In this case, the content is `'Hello, programmers!'`.\n\n**Important**: Every time this walk-through asks you to create a function-based\ncomponent, this is what it will mostly look like. It will look like this _or_ it\nwill look like this and have a single parameter named `props` like this.\n\n```js\n// Without the need for data\nconst HelloWorldNoData = () => React.createElement(\n  'h1',\n  null,\n  'Hello, programmers!'\n);\n\n// With the need for data has the\n// props parameter.\nconst HelloWorldWithData = props => React.createElement(\n  'h1',\n  null,\n  'Hello, programmers!'\n);\n```\n\n### Putting it in the page\n\nThe last three statements in the code block are these.\n\n```js\nconst target = document.querySelector('main');\nconst app = React.createElement(HelloWorld, null);\nReactDOM.render(app, target);\n```\n\nThe first line is something you should be really familiar with. You are\nselecting the `<main>` element and referencing it as `target`.\n\nThe second line is using `React.createElement` to create an element from the\n`HelloWorld` function-based component discussed in the last section. It has\n`null` properties.\n\nThe third line _renders_ the component into the actual Web page, the component\nspecified by the first argument, which is the one created from the `HelloWorld`\ncomponent. Remember that you can open your DevTools, find the _Components_ tab,\nand click it to see the React DevTools show you the \"HelloWorld\" component\nrendered by React.\n\n![Hello programmers with dev tools]\n\nBefore moving on, add some more to that, so you get a feel for how it works.\nReplace the content of your **app.js** with this stuff. The comments to the\nright of each line shows what React will do with the stuff only after you call\n`ReactDOM.render` with it.\n\n> **Note:** since you have not included a CSS file to style `#nav-links` and\n> `.is-selected` in your project, the `id` and `className` aren't actually being\n> used for any styling purpose. The code below includes an `id` and `className`\n> to shows an example of setting `id` and `className` with `React.createElement`\n> and how it translates to HTML.\n\n```js\nimport 'https://unpkg.com/react@16/umd/react.development.js';\nimport 'https://unpkg.com/react-dom@16/umd/react-dom.development.js';\n\nconst Links = () => React.createElement(\n  'ul',                                  // <ul\n  { id: 'nav-links' },                   //  id=\"nav-links\">\n  React.createElement(\n    'li',                                // <li\n    { className: 'is-selected' },        //  class=\"is-selected\">\n    React.createElement(\n      'a',                               // <a\n      { href: 'https://appacademy.io' }, //  href=\"...\">\n      'App Academy'                      //    App Academy\n    ),                                   // </a>\n  ),                                     // </li>\n  React.createElement(\n    'li',                                // <li>\n    null,\n    React.createElement(\n      'a',                               // <a\n      { href: 'https://aaonline.io' },   //  href=\"...\">\n      'a/A Open',                        //  a/A Open\n    ),                                   // </a>\n  ),                                     // </li>\n);                                       // </ul>\n\nconst HelloWorld = () => React.createElement(\n  'h1',\n  null,\n  'Hello, programmers',\n);\n\n// Creates the HelloWorld first and, then, creates\n// the Links\nconst AllTogether = () => React.createElement(\n  'div',\n  null,\n  React.createElement(HelloWorld, null),\n  React.createElement(Links, null),\n);\n\nconst target = document.querySelector('main');\nconst app = React.createElement(AllTogether, null);\nReactDOM.render(app, target);\n```\n\nLook at what gets produced in the _Elements_ tab of your DevTools. Look at what\ngets produced in the _Components_ tab of your DevTools for all three of your\ncomponents. Play around with it: change tags, replace some of those `null`\nsecond arguments with objects to see what gets presented. Give it a whirl. From\nthis point on, you'll be working with JavaScript code known as **JSX** in your\nReact projects. JSX is just syntactic sugar that translates to creating React\nelement objects. Although you won't be creating full-scale projects with\n`React.createElement`, it's important to remember that React is actually using\n`React.createElement` under the hood.\n\n[React DevTools for Google Chrome]:\n  https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\n[Hello programmers with dev tools]:\n  https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-hello-programmers-create-element-with-react-tools.png\n[React DevTools for Google Chrome screenshot]:\n  https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-devtools.png\n[react.development.js]:\n  https://unpkg.com/react@16/umd/react.development.js\n[react-production.min.js]:\n  https://unpkg.com/react@16/umd/react.production.min.js\n"
  },
  "success": true
}