{
  "template": {
    "taskId": "6e0e0bd3-e0d4-44c4-978a-2e2dd77b2e33",
    "name": "React Concepts and Features",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/readings/reading-react-concepts-and-features.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "react-concepts-and-features"
    ],
    "topic": "Homework for Monday",
    "subtopic": "Homework",
    "body": "# React Concepts And Features\n\nIn this article, you will gain insight into why you may want to use React for\nthe front-end portion of your application, the part that runs in the browser,\nas opposed to using plain-old vanilla JavaScript, that is, just the JavaScript\nfound in the browser.\n\n## Modularity\n\nUnlike the mess of code that you can create with event listeners and template\nstrings in your JavaScript code to manipulate the DOM by adding, updating, and\nremoving elements from it, React provides modularity from the ground up. If you\nsee modularity, understanding where code is that's running, then React is for\nyou.\n\n## Easy to start\n\nYou don't need any special tools to use basic React. You can just import some\nfiles and get to work using the `createElement` method that React provides to\ndefine reusable \"components\" for what appears in the browser. They can be as\nsimple as a really cool button, or as complex as Facebook's Web UI.\n\nFor more complex applications, there are may tools available to you to get a\nfully-functioning React application running from a single command on the\ncommand line, tools such as _Create React App_. This handy tools will create a\nfull React application with live reload, testing, and support for things like\nadvanced CSS manipulation.\n\n## Declarative programming\n\nIn the same way that you use HTML to _declare_ what the user interface should\nlook like, React provides the same mechanism in its element-based programming\nAPI, either through the `createElement` method or the higher-level language\nknown as JSX.\n\n## Reusability\n\nReact encourages you to think in terms of reusability as you construct the user\ninterface from elements and components that you create. It works best when you\nthink of the page as pieces of UI working in harmony with one another. When you\nmake a list or a button or a product card, you can then reuse those components\nto show different data that your UI demands to show.\n\n## One-flow of data\n\nReact applications are built as a combination of parent and child components. As\nthe names suggest, each child component has a parent and a parent component will\nhave one or more child components. Components receive data via an argument\ntraditionally named `props`. Parent components can decide the data that its\nchildren should show by passing only a subset of what it has to its children.\nData is never passed up from the child to the parent. Because you always know\nwhich way data flows, you can more easily debug your application to determine\nwhere the data display or event handling code is.\n\n## The \"virtual DOM\"\n\nYou may have come to the conclusion that writing things like\n\n```js\nel.innerHTML = `\n  <table>\n    <tbody>` +\n      arr.map(item => `<tr><td>${item.name}</td></tr>`)\n    + `</tbody>\n  </table>\n`;\n```\n\nis hard to debug, maintain, and use in the long run.  React solves this problem\nby providing a virtual DOM (in memory) that acts as an agent between the\ndeveloper and the real DOM. The virtual DOM is a lot more user-friendly for\ndevelopers.\n\n## Speed\n\nDue to the use of a virtual DOM, React handles changes to a Web page more\nintelligently than just string manipulation. It is constantly monitors the\nvirtual DOM for changes. It very efficiently reconciles changes in the virtual\nDOM with what it has already produced in the real DOM. This is what\nmakes React one of the speediest front-end libraries available.\n\n## What you learned\n\nYou'll learn more about these in the upcoming videos and over the next couple\nof days. Happy Reacting!\n\nYou found out that React has a variety of good points that encourage you to\nchoose it as the means to build your front-end:\n\n* React encourages modular development\n* React is easy to use, easy to start with, and has some great tools\n* React follows the declarative programming style\n* React encourages reusability in your code\n* React has one way that data flows which makes it much easier to reason about\n  the code\n* React uses a \"virtual DOM\" to make changes to the real DOM very fast and\n  efficient\n"
  },
  "success": true
}