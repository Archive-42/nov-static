{
  "template": {
    "taskId": "76aaef56-8c0d-4657-9593-b0473cbf4646",
    "name": "Intro to ES6 Modules (Recall)",
    "repo": "Modular-Curriculum",
    "path": "content/javascript/topics/oop/readings/reading-es6-modules-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "intro-to-es6-modules--recall-"
    ],
    "topic": "Homework for Monday",
    "subtopic": "Homework",
    "body": "# Intro to ES6 Modules\n\nNow, you will learn more about ES6 module syntax and how it is used to export\nand import items between different files. You'll compare the differences between\nmanaging exports with ES6 module syntax vs CommonJS module syntax. At the end of\nthis article, you will understand how to manage your exports and imports with\nES6's:\n\n* `export default` statement to export one item per file\n* `export` keyword to export multiple items per file\n* `import ... from` statement to import items from one file to another\n* `export default` statement to export an unnamed item and rename the item in an\n  import statement\n* `as` keyword (in an `import ... from` statement) to _alias_ and _namespace_\n  all of a file's exported items\n\n## Exporting one item per file\n\nYou can export multiple items per file by using an `export default` statement\nwith ES6 module syntax. For instance, the example below will only export the\n`Wallet` class from the file.\n\n**ES6 modules**\n\n```js\nexport default class Wallet {\n  // ...\n}\n\n// sayHello will not be exported\nfunction sayHello() {\n  console.log('Hello!');\n}\n```\n\nThe `export default` statement is equivalent to using `module.exports` to\ndirectly export **one** item from a file using (instead of an object).\n\n**CommonJS modules**\n\n```js\nclass Wallet {\n  // ...\n}\n\n// sayHello will not be exported\nfunction sayHello() {\n  console.log('Hello!');\n}\n\nmodule.exports = Wallet;\n```\n\n## Exporting multiple items per file\n\nYou can export multiple items per file by using the `export` keyword\n(**without** the `default` keyword) with ES6 module syntax. Using ES6's export,\nyou have two options for exporting items. You can export each item as you define\nit. With ES6 modules, the preferred method to export multiple functions or\nclasses from a single file is to export each function or class as it's defined.\n\n**ES6 modules (parts of an export)**\n\n```js\nexport class Wallet {\n  // ...\n}\n\nexport function sayHello() {\n  console.log('Hello!');\n}\n\nexport const sayHi = () => {\n  console.log('Hi!');\n};\n```\n\nAlternatively, you can refer to each item by name and export them all within an\nobject. This is the unpreferred method to export multiple functions or classes.\n\n**ES6 modules (export object)**\n\n```js\nclass Wallet {\n  // ...\n}\n\nfunction sayHello() {\n  console.log('Hello!');\n}\n\nconst sayHi = () => {\n  console.log('Hi!');\n};\n\nexport {\n  Wallet,\n  sayHello,\n  sayHi,\n};\n```\n\nUsing ES6's `export` keyword is similar to how you can export classes and\nfunctions as individual parts of an export or an export object with CommonJS\nmodule syntax. Unlike with ES6 modules, the preferred method to export multiple\nitems from a single file with CommonJS modules is to export an object with\n`module.exports`.\n\n**CommonJS modules (export object)**\n\n```js\nclass Wallet {\n  // ...\n}\n\nfunction sayHello() {\n  console.log('Hello!');\n}\n\nconst sayHi = () => {\n  console.log('Hi!');\n};\n\nmodule.exports = {\n  Wallet,\n  sayHello,\n  sayHi,\n};\n```\n\n## Importing with ES6 vs CommonJS\n\n| ES6 modules                          | CommonJS modules                          |\n|--------------------------------------|-------------------------------------------|\n| `import { Wallet } from './wallet';` | `const { Wallet } = require('./wallet');` |\n| `import * as fs from 'fs';`          | `const fs = require('fs');`               |\n\nAlthough calls to the `require` method can be anywhere in a JavaScript file\nusing CommonJS modules, this is not the case for ES6 modules. For ES6 modules,\nthe `import` statements must always be at the top of the file because imports\nhave to occur before the rest of the file's code runs.\n\n**CommonJS modules**\n\n```js\nlet { Wallet } = require('./wallet');\n\nconst wallet = new Wallet();\n\nlet fs = require('fs');\n```\n\n**ES6 modules**\n\n```js\nimport { Wallet } from './wallet';\nimport * as fs from 'fs';\n\nconst wallet = new Wallet();\n```\n\n## Unnamed default imports\n\nYou can give unnamed items that are exported with `export default` any name you\nwant when importing them. For example, imagine if you `export default` a\n`Wallet` class from a file name `wallet.js`. When you import the `Wallet` class\ninto `newFile.js`, you can rename the `Wallet` class because of how you used\n`export default` to export the class from the `wallet.js` file.\n\n**wallet.js**\n\n```js\nexport default class Wallet {\n  // ...\n}\n```\n\n**newFile.js**\n\n```js\nimport Money from 'wallet.js';\n\nconst wallet = new Money();\n```\n\nHowever, if you used the `export` instead of `export default`, you are using a\nnamed export. With named exports, the import names have to exactly match.\n\n**wallet.js**\n\n```js\nexport class Wallet {\n  // ...\n}\n```\n\n**newFile.js**\n\n```js\nimport { Wallet } from 'wallet.js';\n\nconst wallet = new Wallet();\n```\n\n## Aliasing imports\n\nYou can use an asterisk (`*`) to [import an entire module's contents]. Note that\nyou must alias your imported object using the `as` keyword to be able to refer\nto it later. Aliasing can be used to namespace all the exported functions,\nconstants, etc. from a file to wrap them into a single, easily referenced\nobject.\n\n**greetings.js**\n\n```js\nexport function sayHello() {\n  console.log('Hello!');\n}\n\nexport const sayHi = () => {\n  console.log('Hi!');\n};\n```\n\n**newFile.js**\n\n```js\nimport * as Greetings from 'greetings.js';\n\nGreetings.sayHello(); // Hello!\nGreetings.sayHi();    // Hi!\n```\n\nYou can also use aliasing to rename identically named functions or items from\ndifferent files. For example, take the two `Wallet` classes below. Both classes\nare named `Wallet`, but they come from different files. The `Wallet` from the\n`wallet1` file is aliased as `W1` while the `Wallet` from the `wallet2` file is\naliased as `W2` to differentiate between the two `Wallet` classes.\n\n```js\nimport { Wallet as W1 } from './wallet1';\nimport { Wallet as W2 } from './wallet2';\n\nconst w1 = new W1();\nconst w2 = new W2();\n```\n\n## Browser support for ES6 Modules\n\nES6 modules can only be used when a file is specified as a `module`. You can use\nan HTTP server to serve an HTML file with a `<script>` tag of `type=\"module\"`.\nBy running a local web server, you gain browser support for ES6 module syntax by\nusing a `<script>` tag in an HTML file to specify a JavaScript file as an ES6\nmodule (not just a normal JavaScript file). Note the `<script>` tag of\n`type=\"module\"` below:\n\n```html\n<script type=\"module\" src=\"./wallet.js\"></script>\n```\n\n### Mini-project\n\nFollow the guidelines below to use an HTTP server and import JavaScript files\nwith ES6 module syntax:\n\n1. Create a folder with an `index.html` file. Fill in the file with the contents\n   below. Note the use of the `type=\"module\"` attribute in the `<script>` tag.\n   You must include the `.js` file extension in the name of the module\n   (`./program.js`). The browser needs to know the entire name of the JavaScript\n   file it will be loading from a server.\n    ```html\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Browser</title>\n    </head>\n    <body>\n      <button id=\"button\">Start Game</button>\n      <div id=\"message\"></div>\n      <script type=\"module\" src=\"./program.js\"></script>\n    </body>\n    </html>\n    ```\n2. Create a `game.js` file with the contents below:\n    ```js\n    export class Game {\n      constructor() {\n        this.gameStartMessage = \"Hello! Do you want to play a game?\";\n      }\n\n      start() {\n        document\n          .getElementById('button')\n          .addEventListener('click', () => {\n            const messageContainer = document.getElementById('message');\n            messageContainer.innerText = this.gameStartMessage;\n        });\n      }\n    }\n    ```\n3. Create a `program.js` file with the contents below:\n    ```js\n    import { Game } from './game.js';\n\n    window.addEventListener('DOMContentLoaded', () => {\n      const game = new Game();\n      game.start();\n    });\n    ```\n4. Make sure you are in the directory of your HTML and JavaScript files set up\n   an HTTP server with `python3 -m http.server` to serve the `index.html` file\n   to the browser.\n5. When the browser reads the `index.html` file, it will read the `<script>` tag\n   and know that the JavaScript file is using ES6 module syntax\n   (`type=\"module\"`) to load the `program.js` file.\n6. The browser will start reading the `program.js` file from top to bottom,\n   reading the `import { Game } from './game.js';` statement first. Note that\n   the `.js` file extension must be present for the browser to know the entire\n   name of the JavaScript file to load from the server.\n7. The browser will then load the `game.js` file and all the code in the loaded\n   JavaScript files will run!\n\n## What you've learned\n\nIn this reading, you learned about managing exports and imports with ES6 modules\nand how using ES6 modules compares to using CommonJS modules. You learned that:\n\n* ES6 has `import` and `export` keywords (instead of `require` and\n  `module.exports`)\n* ES6 `import` statements are always at the top of the file\n* The `export` keyword to exports multiple items from a file while the `export\n  default` phrase exports **one** item from a file\n* You can rename an item that is exported with `export default`\n* The `as` keyword can be used to alias an imported item\n* The `*` character can be used to [import an entire module's contents] with a\n  namespace (`import * as Namespace from 'fileName.js';`)\n* ES6 modules can only be used when a file is explicitly specified as a\n  `module`, either through an HTML file with a `<script>` tag of `type=\"module\"`\n  or a `package.json` file with a `\"type\": \"module\"` field\n\n[import an entire module's contents]:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Import_an_entire_modules_contents\n"
  },
  "success": true
}