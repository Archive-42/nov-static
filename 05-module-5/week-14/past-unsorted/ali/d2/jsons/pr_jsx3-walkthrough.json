{
  "template": {
    "taskId": "1d8ddf42-8493-468c-8929-f2bb0f037001",
    "name": "JSX Walk-Through Practice (Part 3)",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/projects/pet-detail-page-jsx/README-03-pet-details-list-and-information.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "jsx-walk-through-part-3"
    ],
    "topic": "Tuesday - React!",
    "subtopic": "JSX Project",
    "body": "# JSX Walk-Through: Pet Details, Part 1\n\nYou will now start adding data rendering to the page with the components created\nand modified in this step.\n\n* `PetDetailPage`: Modified in this step\n* `Navigation`: Done\n* `PetDetails`: Created in this step\n* `PetDetailList`: Created in this step\n* `PetInformationItem`: Created in this step\n* `OwnersList`\n* `OwnerLink`\n\n![Petrack component analysis]\n\n## Getting some data\n\nOpen the **src/index.js** file. In it, after the call to `ReactDOM.render`,\ncreate a fetch call for the RESTful endpoint\nhttps://polar-beach-08187.herokuapp.com/api/pets/2. (You can click on the link\nto see the data. That's \"Mog\", the cat. She is forgetful.) Do all of the normal\nstuff that you would do with `async` functions and what not.\n\n```js\n(async () => {\n  const url = 'https://polar-beach-08187.herokuapp.com/api/pets/2';\n  const response = await fetch(url);\n  if (response.ok) {\n    const pet = await response.json();\n    console.log(pet);\n  }\n})();\n```\n\n![Petrack Mog data fetch]\n\nNow, to pass that data into your React components, you will pass it as a\nproperty. You have to pass it on the element getting rendered. React is all\nabout rendering things. You can just call another render from inside your\n`async` function. But, this time, you will pass the pet data in as an attribute\nof the `App` component with curly braces to indicate to JSX that it is a data\nvalue and not a string.\n\n```js\n(async () => {\n  const url = 'https://polar-beach-08187.herokuapp.com/api/pets/2';\n  const response = await fetch(url);\n  if (response.ok) {\n    const pet = await response.json();\n    console.log(pet);\n\n    ReactDOM.render(\n      <React.StrictMode>\n        <App pet={pet} />   {/* Now, with data */}\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  }\n})();\n```\n\nThis has changed everything! You don't see it, yet, but once the AJAX call\ncompletes, go look at the _Components_ tab of your DevTools. Click on the\n`App` component and look at the values in the right pane. React now\nknows about the data that you passed in!\n\nNow, you need to pass that to the `PetDetailPage` component. In the\n**src/App.js** file, change the function's parameter list to have a single\nparameter named \"props\". Then, pass the value of `props.pet` into the pet\nattribute of the `PetDetailPage` component, similar to what you did in\n**src/index.js** for the `App` component. You should be able to see the props\nin the _Components_ tab for both the `App` and `PetDetailPage` components.\n\n![Data passed down to PetDetailPage]\n\nYou will use that data to pass down into the detail components that you will now\ncreate.\n\n## The pet details component\n\n**Note**: This section introduces an error that you will fix. It is a common\nerror, so knowing how to fix it when you see it is good information to have.\n\nThe `PetDetails` component is in charge of rendering the `PetDetailList` and the\n`OwnersList` components. For now, get a new component working.\n\nCreate a new file named **src/PetDetails.js**. Import the `React` object. Create\na function-based `PetDetails` component that has a `props` parameter, and have\nit render an empty `div`. Export the component as the default export for the\nmodule.\n\nIn the **PetDetailPage.js** file, import the new `PetDetails` component. Change\nthe `PetDetailPage` component to accept a `props` parameter rather then an\nempty parameter list. Then, use the `PetDetails` component in the body of the\n`PetDetailPage` as a sibling to the `Navigation` component. You need to pass\nthe pet data into it. Your code should look like this. (You may have empty tags\nrather than the self-closing slash tags. That's fine.)\n\n```jsx\nimport React from 'react';\n\nimport Navigation from './Navigation';\nimport PetDetails from './PetDetails';\n\nconst PetDetailPage = props =>\n  <Navigation />\n  <PetDetails pet={props.pet} />\n;\n\nexport default PetDetailPage;\n```\n\nSave all of your files. Look at your browser. There is an error.\n\n![PetDetailPage with adjacent element error]\n\nThis happens because components _must_ have a single top-level element. You can\nsee that `PetDetailPage` now has two because both `Navigation` and `PetDetails`\nare at the top level.\n\nTo solve this, you need the two elements in a single element. You could do that\nwith a `div`, for example.\n\n```jsx\nconst PetDetailPage = props =>\n  <div>\n    <Navigation />\n    <PetDetails pet={props.pet} />\n  </div>\n;\n```\n\nThis is fine, except for when you don't want to introduce extra tags for no\nreason in your HTML. That is why, in React 16, the developers introduced the\nidea of a `Fragment`. The `Fragment` is a special placeholder that groups\ntogether JSX elements in the virtual DOM, but does not creating any tags in the\nreal DOM. You can wrap those two elements (or any number of elements) in a\n`React.Fragment` JSX element like this.\n\n```jsx\nconst PetDetailPage = props =>\n  <React.Fragment>\n    <Navigation />\n    <PetDetails pet={props.pet} />\n  </React.Fragment>\n;\n```\n\nIf you do that and save the file, the compile error goes away and you see the\ncontent as it should be.\n\nWrapping things in `Fragment` elements like that is such a common thing, that\nthere is a shortcut syntax for it. Since the `Fragment` does not represent any\nreal tag, you write it like an HTML tag that _has no name_.\n\n```jsx\nconst PetDetailPage = props =>\n  <>\n    <Navigation />\n    <PetDetails pet={props.pet} />\n  </>\n;\n```\n\nIt's pretty weird. But, it's a very _React_ way of doing things.\n\n## Create the pet detail list component\n\nHere's some code for you that you can use for your `PetDetailList` component.\nCreate a file named **src/PetDetailList.js** and put it in there. Feel free to copy\nand paste it so that you can get on to the neat-o data stuff.\n\n```jsx\nimport React from 'react';\n\nconst PetDetailList = props =>\n  <>\n    <h2>Details</h2>\n    <dl>\n\n    </dl>\n  </>\n;\n\nexport default PetDetailList;\n```\n\nBack in **PetDetails.js**, import this new `PetDetailList` component, and\nreplace the empty `div` with it.\n\n```js\n// Add the import line\nimport PetDetailList from './PetDetailList.js';\n\nconst PetDetails = props =>\n  <PetDetailList pet={props.pet} />\n;\n\nexport default PetDetails;\n```\n\nRefresh your page. You should now see the `PetDetailList` in the _Components_\ntab. It's props should have all of data for the pet on it. You should also see\nthe \"Details\" headline in the rendered HTML, too.\n\nThe next step is to create the `PetInformationItem` component to fill out that\n`dl` just yearning for content in the `PetDetailList` component.\n\n## The pet information item component\n\n**Note**: The following steps will introduce an error that you will fix. This is\nso you can get a feel for what kind of errors you will see when working with\nReact.\n\nCreate a new file, **src/PetInformationItem.js**. It will contain a\nfunction-based component that needs data to render, so stub out the function\nwith the \"props\" parameter. Don't forget to import the React. Then, it needs\nto render two elements, the `dt` element and the `dd` element. Do that by\nwrapping a fragment around them.\n\n```html\n<dt>Name of property</dt>\n<dd>Value of property</dd>\n```\n\nSo, the code will look something like this.\n\n```jsx\nimport React from 'react';\n\nconst PetInformationItem = props =>\n  <>\n    <dt>{props.name}</dt>\n    {/* Replace this with the dd element and value */}\n  </>\n;\n\nexport default PetInformationItem;\n```\n\nReplace the comment with a `dd` JSX element that has `props.value` as its\ncontent, similar to how the `dt` has `props.name` as its content.\n\nThat implies an expectation that this component _needs_ a property named \"name\"\nthat will be used to render the `dt` element, and it _needs_ a property named\n\"value\" to render the `dd` element.\n\nOnce you have that done, it's time to use it in the `PetDetailList` components.\nGo back to **src/PetDetailList.js**. Import the `PetInformationItem` component.\nYou will use it three times, to show the name, age, and pet type of the pet.\nHere's the first one. Just put it in there and save it because you have to\ninvestigate an error.\n\n\n```js\nconst PetDetailList = props =>\n  <>\n    <h2>Details</h2>\n    <dl>\n      <PetInformationItem name=\"Name\" value={props.pet.name}/>\n    </dl>\n  </>\n;\n```\n\nThis shows that `PetDetailList` now has an expectation that `props` will have a\n\"name\" property, an \"age\" property, and a \"PetType\" property that will have a\n\"type\" property on it! That's a lot of expectations...\n\nIf you refresh your page, an error might occur. \n\n![Petrack PetDetails with error]\n\nThe _Create React App_ reports the error for you in the browser's main window.\nThis is nice so that you don't have to go mucking about the console to try to\ndetermine what went wrong.\n\nIn the above screen shot, it complains that it cannot get the \"property 'name'\nof undefined\". If you get this error, make sure you are passing down the `pet`\nprop from the `App` component all the way down to the `PetDetailList`\ncomponent. You can see all the props for each component in the Chrome dev\ntools Component tab.\n\nYou should now be error free. \n\nThe following changes will trigger that same error but for a different reason.\n\nIn the `src/index.js` file, you will render `App` twice. Once before the \nfetch call, and once after the fetch response comes back. **NOTE: This is NOT \nthe normal way to render the App after a fetch call. You will be learning a \nbetter way to use fetch calls with React tomorrow.**\n\nYour `src/index.js` should now look like this:\n\n```js\n// ... imports\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n(async () => {\n  const url = 'https://polar-beach-08187.herokuapp.com/api/pets/2';\n  const response = await fetch(url);\n  if (response.ok) {\n    const pet = await response.json();\n    ReactDOM.render(\n      <React.StrictMode>\n        <App pet={pet} />   {/* Now, with data */}\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  }\n})();\n```\n\nNow, if you refresh your page, you should see the following error. \n\n![Petrack PetDetails with error]\n\nCan you see where that's happening in the **PetDetailList.js**\nfile? Take a moment to figure out where the error is being thrown.\n\nIf you identified the expression `props.pet.name`, then you got it! Remember\nthat when the React first renders the virtual DOM, it has _no data_. That\ndoesn't come until later, after the AJAX call completes. There are _so many_\nways to fix this but **only one** is idiomatic React. That is the use of\n`defaultProps`.\n\nRecall that the `PetDetailList` component has an expectation that the `props`\nvalue should have a \"pet\" property that is an object. You can specify a\ndefault value for the \"pet\" property for the `PetDetails` component by\nputting the following code _after_ the function declaration.\n\n```js\nPetDetailList.defaultProps = {\n  pet: {},\n};\n```\n\nThis tells React that, when the `PetDetailList` renders, if the \"pet\"\nproperty of `props` is undefined, then it should use the default value specified\nin the assignment. This is a built-in React feature and fixes the problem.\n\nRefresh the page. You should now see the page render and, when the AJAX call\ncompletes, the name \"Mog\" to appear.\n\nNow, add the other two `PetInformationItem` calls. One should have the name\n\"Age\" and the value of `props.pet.age`. The second should have the name \"Type\"\nand the value of `props.pet.PetType.type`. That will cause another error, so\ntake care of it in the `defaultProps`.\n\n![Petrack PetDetails before and after load]\n\nIf it's hard to see the before load, comment out the async function in the\n`src/index.js` to see what the page looks like before the fetch call is made.\n\n```js\n// ... src/index.js\n\n// (async () => {\n//   const url = 'https://polar-beach-08187.herokuapp.com/api/pets/2';\n//   const response = await fetch(url);\n//   if (response.ok) {\n//     const pet = await response.json();\n//     ReactDOM.render(\n//       <React.StrictMode>\n//         <App pet={pet} />   {/* Now, with data */}\n//       </React.StrictMode>,\n//       document.getElementById('root')\n//     );\n//   }\n// })();\n```\n\nIf you want that yucky bumpy load to not happen, consider creating a default\nvalue for the \"value\" property in `PetInformationItem`. In the following\nscreenshot, you can see what happens when you set a default value of\n\"loading...\" for the \"value\" property in `PetInformationItem`.\n\n![Petrack PetDetails with loading message]\n\n## What you've seen\n\nIn this part of building a React application, you have\n\n* Passed data from an AJAX call (or really wherever) into a React component\n* Accessed data using the conventionally-named `props` parameter in your\n  function-based components\n* Passed data from a \"parent\" component to a \"child\" component\n* Used default values to prevent errors and improve the aesthetic experience of\n  using your application\n\nJust one more step and you're done!\n\n[Petrack component analysis]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-all-components-with-details-list.png\n[Petrack Mog data fetch]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-mog-data-pull.png\n[Petrack PetDetails with error]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/create-react-app-with-property-error.png\n[Petrack PetDetails before and after load]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-information-data-load.gif\n[Petrack PetDetails with loading message]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-information-with-loading-message-data-load.gif\n[Data passed down to PetDetailPage]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/create-react-app-passing-data-into-pet-detail-page.gif\n[PetDetailPage with adjacent element error]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/create-react-app-pet-detail-page-without-single-root-error.png\n"
  },
  "success": true
}