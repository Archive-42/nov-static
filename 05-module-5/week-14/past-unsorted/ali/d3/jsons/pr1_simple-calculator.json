{
  "template": {
    "taskId": "d060af18-0380-457e-9d54-08155dfc190d",
    "name": "Simple Calculator Project",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-class-components/projects/react-calculator/README.md",
    "type": "Reading",
    "timeEstimate": 5400,
    "urls": [
      "simple-calculator"
    ],
    "topic": "Wednesday - React With State",
    "subtopic": "React Calculator",
    "body": "# Calculator Project\n\nYou're going to build a simple calculator app. Our app takes in two numbers and\nshows the result of a simple operation on the numbers when you click the\noperation button. Take a look at the [Live Demo] to see the app in action.\nAssume that only numbers will be entered.\n\n## Phase 1: Setup\n\nBegin by using the [create-react-app] package. You'll use the command below to\ncreate a React application.\n\n```sh\nnpx create-react-app my-app --template @appacademy/simple\n```\n\nTake note that using the `create-react-app` command initializes your project as\na Git repository. If you use the `ls -a` to view the hidden files in your\nproject, you'll see the `.git` file.\n\nYou'll also see that your `package.json` file includes four auto-generated\nscripts: `start`, `build`, `test`, and `eject`.\n\nToday, you'll be focusing on writing code in the project's `src` directory. But\nbefore you begin, let's take a moment to walk through how your view is rendered.\n\nStart your development server with the `npm start` command and your browser\nshould open `http://localhost:3000/` to render a view. This view is connected to\nyour entry file (`./src/App.js`). Open your developer tools and view your HTML\nelements in the **Elements** tab. If you open up your `App.js` file, you'll see\nthat the [JSX] in the file is similar to the HTML in your developer tools.\n\nAlthough your `App.js` file is generated as a JavaScript file with a `.js`\nextension, JSX is used to produce and render the React elements. As a reminder,\nJSX is a syntax extension that ultimately get converted to vanilla JavaScript.\nIt is not HTML although the syntax is similar. An example of a difference is the\nuse of [`className`] instead of the HTML `class` attribute. You'll learn more\nabout how [Babel] is used to transpile JSX into JavaScript.\n\nFor now, let's refactor and clean up your `App` component by replacing its\ncontent:\n\n```js\n// App.js\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Calculator</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nSince your React app is rendering with JavaScript, you can return your `App`\ncomponent with an arrow function. Replace your `App.js` file with the code below\nand see how the same view is rendered in `http://localhost:3000/`:\n\n```js\n// App.js\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Calculator</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn addition, you can use parentheses to implicitly return the `App` component:\n\n```js\n// App.js\nimport React from 'react';\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Calculator</h1>\n  </div>\n);\n\nexport default App;\n```\n\nBut how does the JSX in `App.js` get rendered? Use `cmd + shift + f` to find\nwhere the `<App />` is rendered in your application. You should see the\n`index.js` entry file. At the top of the file, you'll see that the `App`\ncomponent has been imported. Since your `App.js` file is returning JSX, you can\nrender the JSX as a `<App />` component by using the [ReactDOM.render()] method\nwithin your entry `index.js` file. The role of the `index.js` entry file is to\nrender your React components.\n\nNotice that the [ReactDOM.render()] method's second argument is finding an HTML\nelement with the `id` of `root`. Take a moment to use `cmd + shift + f` to find\n`id=\"root\"`. You should now find a `<div>` element with an `id` of `root` in the\n`index.html` file. The [ReactDOM.render()] method is replacing the `<div>`\nelement with the JSX.\n\nCongratulations! You now have a basic React application set up with a component\nthat you understand how to render.\n\n## Phase 2: Creating the `Calculator` component\n\nNow create a file called `Calculator.js` within your `src` directory. Start\nwith the code skeleton below:\n\n```js\nimport React from \"react\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    // TODO: Initialize state\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Time for math!</h1>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n```\n\nIn your `App.js` file, import the `Calculator` component and set it to render\nunderneath the `<h1>` element. Make sure \"Calculator\" still shows up in the\nbrowser, this time with \"Time for math!\" from your `Calculator` component.\n\n### State\n\nNow let's initialize the `state` of your `Calculator` component! The state of\nyour component is just a JavaScript object. For the calculator, it will contain\nthree keys: the result and two numbers from user input.\n\nWithin the `constructor()` method of your `Calculator` component, define\n`this.state` with default values for the result and two numbers. The `result`\nshould have a default value of `0`. You actually want the two numbers to start\nout blank, so give `num1` and `num2` a default value of an empty string:\n\n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n  // TODO: Set default state\n  };\n}\n```\n\n## Phase 3: Rendering in your component\n\nThe first thing you want to render is your `result`. Notice how your\n`Calculator` and `App` components are rendering JSX elements in different ways.\nYour `Calculator` component is a [class component], so it needs to use the\n`render()` method to return JSX, while your `App` component is a function\ncomponent so it can directly return JSX. You want to interpolate the result,\nwhich is stored in the component's `state`, into the JSX. It'll look something\nlike this:\n\n```javascript\n  render() {\n    return (\n      <div>\n        <h1>Result: {this.state.result}</h1>\n      </div>\n    );\n  }\n```\n\n## Phase 4: Creating input fields\n\nLet's make the input fields. You want the `state` to receive the new value of\nthe input field every time something is typed in. You can do this by passing an\n`onChange` event handler as a _prop_ to the input field. Whenever the input\nfield's value changes (via the user), the input will run its `onChange` prop,\nwhich should be a callback. Let's create a callback as a method inside your\ncomponent. Begin by console logging the _change_ event that is passed into the\ncallback.\n\n```js\nhandleFirstNum = e => {\n  console.log(e);\n};\n```\n\nAdd an `<input>` element underneath your rendered `result`. Assign the\n`onChange` prop to a `handleFirstNum()` callback like so:\n\n```js\n<input onChange={this.handleFirstNum} placeholder=\"First number\" />\n```\n\nTry typing in your \"First number\" input field and seeing what is logged in your\ndeveloper tools console from the _change_ event. As a reminder, event objects\nfrom your event listeners have [target] and [currentTarget] elements. In this\ncase, both the `event.target` and `event.currentTarget` refer to the `<input>`\nelement.\n\nUpdate your `handleFirstNum` method to use the parsed `value` of your\n`event.target` to set the `num1` state. As a reminder, parsing non-numeric\nstrings results in a `NaN` (\"Not a Number\") output. Also make note that you need\nto use [this.setState()] in order to set a component's state and re-render the\ncomponent with the updated state.\n\n```js\nhandleFirstNum = e => {\n  // TODO: Parse value\n  // TODO: Set state\n}\n```\n\nYou also want your input fields to always reflect the current version of the\nstate and properly update when you trigger a re-render by changing the state, so\nmake sure to include `value={this.state.num1}` in the input tag.\n\nThat's one of the inputs! Create a second `<input>` element and a\n`handleSecondNum()` callback. It should look very similar.\n\n## Phase 5: Creating calculator buttons\n\nTime to write the operations. Each one of these is a button, with an `onClick`\ncallback set that carries out the operation and sets the state of the result to\nthe answer. For example, you can create a \"+\" button with an `onClick` listener\nto invoke an `add()` method with `num1` and `num2` to update the `result`\nstate.\n\nThe current values for `num1` and `num2` should be properly updated and stored\nwithin the state of your component. Create four methods to handle adding,\nsubtracting, multiplying, and dividing. Remember to use `setState()` to set\n`this.state.result` to the correct result.\n\n### Clear\n\nIt'd also be nice to be able to clear out the input fields. Make a button that\nresets the state to its initial values. You can add an `onClick` listener to\nthis button to invoke a `clearInput` method to reset the state, and therefore\nclear each input field's `value`.\n\nThis is part of why it's important to set a `value` on the input fields. By\nhaving the value depend on the state, you ensure that the value will be\nre-rendered, and therefore be properly cleared when you set the state of `num1`\nand `num2` back to empty strings.\n\n## Phase 6: Refactoring your project\n\nYou're probably using the values stored in your state a few times in your\n`render` method. Let's DRY it up a little. Destructure the properties stored\nin your state in your `render` method to be able to refer to them by separate\nvariables. Remember that any JavaScript you do should happen before the `return`\nstatement!\n\n```javascript\nrender(){\n  // TODO: destructuring state variables\n  return (\n    // TODO: refactor variables defined\n  );\n}\n```\n\nCongratulations! You've created your first React application!\n\n### What you've learned\n\nIn this small project, you created your first React class-based component and\nused it to store state and handle events.\n\n\n\n[create-react-app]: https://github.com/facebook/create-react-app\n[Live Demo]: https://appacademy.github.io/curriculum/calculator/\n[JSX]: https://reactjs.org/docs/introducing-jsx.html\n[`className`]: https://developer.mozilla.org/en-US/docs/Web/API/Element/className\n[Babel]: https://babeljs.io/docs/en/next/\n[ReactDOM.render()]: https://reactjs.org/docs/react-dom.html\n[class component]: https://reactjs.org/docs/react-component.html\n[this.setState()]: https://reactjs.org/docs/react-component.html#setstate\n[ES6 arrow function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[class properties]: https://reactjs.org/docs/faq-functions.html#class-properties-stage-3-proposal\n[target]: https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n[currentTarget]: https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n"
  },
  "success": true
}