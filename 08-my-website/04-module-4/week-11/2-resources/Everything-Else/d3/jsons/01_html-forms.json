{
  "template": {
    "taskId": "ef31da7f-8461-49a7-9d5f-fbae2d85bf17",
    "name": "HTML Forms",
    "repo": "Modular-Curriculum",
    "path": "content/express/topics/html-forms/readings/reading-intro-to-html-forms-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "html-forms"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# HTML Forms: An Introduction\n\nHTML Forms are an essential and ubiquitous part of the web. You use forms to\nsearch, create resources (i.e. account, posts), update resources, and more.\n\nWhile forms may seem simple on the surface, there's more complexity that you\nhave to think about as a developer when you're building a web app that uses HTML\nforms. In this introductory lesson you will learn about:\n\n- the key components of a form\n- the client and browser interaction when it comes to handling HTML forms\n- the usual flow of a form submission\n\n## Key components of a form\n\nLet's imagine that a user just landed on a website you built and loads up a form\nthat allows users to sign up for a mailing list.\n\nThe browser would load up HTML that includes something like this:\n\n```html\n<h1>Sign up for an account</h1>\n<form action=\"/sign-up\" method=\"post\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"fullname\" />\n\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\" />\n\n  <input type=\"submit\" value=\"Sign Up\" />\n</form>\n```\n\nLet's first break down the various components of the form.\n\n### `<form>`\n\nThe `<form>` element is the parent element of all of the input fields. This\nelement has two attributes that are unique to `<form>` elements: `action` and\n`method`.\n\nThe `action` attribute defines the location (URL) where the form should send the\ndata to when it is submitted. In this example, the `action` attribute has a\nvalue of `/sign-up`. The `action` can be set to either an [absolute URL] or a\n[relative URL]. If it is a relative URL (ex: `/sign-up`), then it will be sent\nto the server that served up the website that the user is on.\n\nThe `method` attribute defines the HTTP verb that should be used to make the\nrequest to the server. Browsers support only two values for this attribute:\n\"get\" and \"post\". You will use \"post\" 99% of the time.\n\n> Forms typically use POST requests because POST requests are used to send data\n> that results in a change on the server. For example, if someone wanted to sign\n> up for an account, that form would use a POST request. In contrast, GET\n> requests are used to retrieve data from the server. A typical use case for a\n> form that uses a GET method is a search form. For example, the search input on\n> www.google.com is part of a form that uses a GET method.\n\nIn this example, when the form is submitted, it will make a POST request to the\nserver's `/sign-up` route.\n\n### `<input>`\n\nIn this example, there are two input fields for entering data: one for the\nuser's name, and one for the user's email. These fields are represented by the\n`<input>` element.\n\nNotice how there is a `type` attribute in each `<input>` element. The type\nattribute tells the browser what kind of input it expects, and the browser\nenforces different rules for each type of input.\n\nFor example, in the `<input>` field with `type=\"email\"`, if the user tries to\nsubmit an email that does not have the \"@\" character in it, then most browsers\nwill display notify users that they have put in an invalid email address.\n\nThere are several types of inputs, including number, password, and checkbox. You\ncan learn more about all of the different types types in the\n[MDN docs on input types]. Some of the less-commonly-used ones are quite\ninteresting!\n\nThere are also other HTML elements that serve as data input fields but are not\nrepresented by an `<input>` element, such as `<textarea>` and `<select>`.\n\nThe first two `<input>` fields in the example also have a `name` attribute. The\n`name` attribute is important because when the form data is sent to the server,\nthe data is represented in key-value pairs with the value of the `name`\nattribute set as the key. For form submissions with a \"post\" method, the input\nfield data would be sent to the server in the body of the HTTP request in the\n`x-www-form-urlencoded` format. For example, the data for the example form would\nlook something like this when it is submitted to the server:\n\n```plaintext\nfullname=John+Doe&email=john@doe.com\n```\n\nThe `id` attribute ties the `<input>` element to the `<label>` element by\nmatching the `<label>` element's `for` attribute. Associating a `<label>`\nelement with the `<input>` field in this way offers accessibility and useability\nbenefits. For example, if the user clicks on a `<label>` element that is\nassociated with an `<input>` field, then the `<input>` field would come into\nfocus.\n\nFinally, the last `<input>` element with `type=\"submit\"` is unique in that it\ndoes not store any data. Instead, this element renders as a button with text\nthat is equal to its `value` attribute. You could also write `<input>` elements\nwith `type=\"submit\"` as a `<button>` element, like this:\n`<button type=\"submit\">Sign Up</button>`. When the user clicks on this button,\nthen the form is submitted.\n\n## Submitting the form\n\nAs mentioned earlier, when this form is submitted, it will make a POST request\nto the server's `/sign-up` route.\n\nIn the previous lesson, you learned about routing in an Express server, so you\ncan imagine that the above example might make a request to a route that looks\nsomething like this:\n\n```js\napp.post(\"/sign-up\", (req, res) => {\n  // handle the request here\n});\n```\n\nWhen the request reaches the server, the data captured in the form is then\nvalidated. For example, you might want to set up a validation that verifies that\nthe user actually typed something into the `fullname` field before submitting.\n\n> There are various validations that you can set on the frontend elements\n> themselves. For example, if you add a `required` attribute to an `<input>`\n> field, then the browser would prevent the user from being able to submit a\n> form if that required field were empty. **However**, frontend validations can\n> be easily manipulated: someone could simply open up the dev tools and remove\n> the `required` attribute and then submit the form with an empty input. This is\n> why server-side validations are crucial and necessary.\n\nIf the data is invalid, then the server would send back error messages to the\nfrontend to be displayed to the user. For example, if the user had submitted a\nform with an empty `fullname` field, then the server can send back an error\nmessage to notify the user that the \"Name field is required\". Specifically, the\nerror would return a complete HTML page containing the entire form along with\nthe error messages. This is so that the user can resolve the error and then\nresubmit the form, effectively repeating the whole form submission process\nagain.\n\nValidations can also be more robust than simple checks for whether or not a\nfield was filled out. As a developer, you can customize and set up any sort of\nvalidation on the data that the user is submitting. In a later reading, you'll\nlearn more about validations.\n\nFinally, once the user resolves the errors, then the server can successfully\nprocess the data. At this point, the server would typically redirect the user to\na different page by responding with a `302 Found` status. For example, if a user\nhad just signed up for a new account, the server might redirect them to the\nprofile page after they have successfully signed up.\n\n## What you've learned\n\nIn this reading, you learned about:\n\n- the key components of a form\n- the client and browser interaction when it comes to handling HTML forms\n- the usual flow of a form submission\n\nIn the next reading, you'll get an opportunity to build out a form that\ninteracts with an Express server!\n\n[absolute url]: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#Examples_of_absolute_URLs\n[relative url]: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#Examples_of_relative_URLs\n[mdn docs on input types]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n"
  },
  "success": true
}