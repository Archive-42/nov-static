{
  "template": {
    "taskId": "149f9b9f-d595-44b7-8917-d0980f1e6354",
    "name": "Pug Is Great",
    "repo": "Modular-Curriculum",
    "path": "content/express/topics/routing/readings/reading-digging-into-the-pug-template-syntax-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "pug-is-great"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "\n# Digging Into the Pug Template Syntax\n\nNow that you've seen how to create and render a simple Pug template, let's\nexplore Pug's syntax in more depth. Learning Pug's syntax takes time and effort,\nbut the payoff is that writing and maintaining templates will generally take\nless time overall.\n\nWhen you finish this article, you should be able to use the Pug template syntax\nto:\n\n* Render elements;\n* Set element attribute values;\n* Set element class and ID attribute values;\n* Set element content from a variable;\n* Set an element attribute value from a variable;\n* Inject a variable value into text using interpolation;\n* Iterate the elements in an array to generate content; and\n* Conditionally display content.\n\n## Setting up a sandbox application\n\n> **Exercise your brain!** Use the following application as a sandbox to test\n> and experiment with the Pug syntax as it's introduced in this article. Doing\n> this will help you to remember what you've learned.\n\nCreate a folder for your project, open a terminal or command prompt window,\nbrowse to your project's folder, and initialize npm:\n\n```\nnpm init -y\n```\n\nThen install Express 4.0 and Pug 2:\n\n```\nnpm install express@^4.0.0 pug@^2.0.0\n```\n\nAdd a folder named `views` to your project, then add a file named `layout.pug`\ncontaining the following code:\n\n```pug\nhtml\n  head\n    title= title\n  body\n    h1= heading\n```\n\nThen add a file named `app.js` to your project folder containing the following\ncode:\n\n```js\nconst express = require('express');\n\n// Create the Express app.\nconst app = express();\n\n// Set the pug view engine.\napp.set('view engine', 'pug');\n\n// Define a route.\napp.all('*', (req, res) => {\n  console.log(`Request method: ${req.method}`);\n  console.log(`Request path: ${req.path}`);\n\n  res.render('layout', { title: 'Pug Template Syntax Sandbox', heading: 'Welcome to the Sandbox!' });\n});\n\n// Define a port and start listening for connections.\n\nconst port = 8081;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\nTo test your application, open a terminal or command prompt window, browse to\nyour project's folder, and run the command:\n\n```\nnode app.js\n```\n\nThe text \"Listening on port 8081…\" should display in the terminal or command\nprompt window. Open a web browser and browse to the address\n`http://localhost:8081/` to confirm that the application sends a response that\ndisplays an HTML `<h1>` element containing the text \"Welcome to the Sandbox!\".\n\n## Rendering elements\n\nConsider the following excerpt from a Pug template:\n\n```pug\nul\n  li Item A\n  li Item B\n  li Item C\n```\n\nThis renders an HTML unordered list:\n\n```html\n<ul>\n  <li>Item A</li>\n  <li>Item B</li>\n  <li>Item C</li>\n</ul>\n```\n\nText at the beginning of a line (with or without white space) represents an HTML\nelement. Any text included after the element name will be added as the element's\ninner text. To add an element as a child element, simply indent the line for the\nchild element by one or more spaces (two spaces is a common convention).\n\n> Whether you decide to use two or four spaces for indenting elements, it's\n> important to keep your indentation consistent throughout the template. Not\n> doing so might result in Pug throwing an error at runtime.\n\n## Setting element attribute values\n\nTo set attribute values on an element, follow the element name with a pair of\nparentheses containing one or more attribute name/value pairs:\n\n```pug\na(href='/about' class='menu-button') About\n```\n\nRenders to:\n\n```html\n<a href=\"/about\" class=\"menu-button\">About</a>\n```\n\n### Setting `class` and `id` attribute values\n\nElement class and ID attributes are very common attributes to set, so Pug\nprovides a shortcut syntax for each. You can set an element's `class` attribute\nusing the syntax `.classname` and an element's `id` attribute using `#idname`:\n\n```pug\ndiv#container\n  a.button Cancel\n```\n\nRenders to:\n\n```html\n<div id=\"container\">\n  <a class=\"button\">Cancel</a>\n</div>\n```\n\nYou can also combine a class name with an ID name or chain multiple class names:\n\n```pug\ndiv#container.main\n  a.button.large Cancel\n```\n\nRenders to:\n\n```html\n<div id=\"container\" class=\"main\">\n  <a class=\"button large\">Cancel</a>\n</div>\n```\n\nThis example can be further condensed. `<div>` elements are so common, Pug\nallows you to remove the `<div>` element's name:\n\n```pug\n#container.main\n  a.button.large Cancel\n```\n\n## Rendering data\n\nAs you saw in an earlier article, you can provide data to a template by passing\nan object to the `res.render()` method:\n\n```js\nres.render('layout', { firstName: 'Grace', lastName: 'Hopper' });\n```\n\nProperties on the object passed as the second argument to the `res.render()`\nmethod are defined within a template as local variables, which can be used to\nset element content:\n\n```pug\nul\n  li= firstName\n  li= lastName\n```\n\nWhich would render to:\n\n```html\n<ul>\n  <li>Grace</li>\n  <li>Hopper</li>\n</ul>\n```\n\nVariables can also be used to set element attribute values:\n\n```pug\nform\n  div\n    label First Name:\n    input(type='text' name='firstName' value=firstName)\n  div\n    label Last Name:\n    input(type='text' name='lastName' value=lastName)\n```\n\nRenders to:\n\n```html\n<form>\n  <div>\n    <label>First Name:</label>\n    <input type=\"text\" name=\"firstName\" value=\"Grace\"/>\n  </div>\n  <div>\n    <label>Last Name:</label>\n    <input type=\"text\" name=\"lastName\" value=\"Hopper\"/>\n  </div>\n</form>\n```\n\nYou can also use interpolation to inject a variable value into text:\n\n```pug\np Welcome #{firstName} #{lastName}!\n```\n\nRenders to:\n\n```html\n<p>Welcome Grace Hopper!</p>\n```\n\n> Notice how Pug's interpolation syntax `#{expression}` differs from\n> JavaScript's string template literal interpolation syntax `${expression}`. In\n> a Pug template, the text to the right of the element name is just plain text,\n> not JavaScript.\n\n## Iteration and conditionals\n\nYou can even use dynamic data to control the generation of HTML in your\ntemplates. Suppose you pass an array of colors to the `res.render()` method:\n\n```js\nres.render('layout', { colors: ['Red', 'Green', 'Blue'] });\n```\n\nUsing that array of values, you can generate an ordered list:\n\n```pug\nul\n  each color in colors\n    li= color\n```\n\nWhich renders as:\n\n```html\n<ul>\n  <li>Red</li>\n  <li>Green</li>\n  <li>Blue</li>\n</ul>\n```\n\nYou can also conditionally display content. First, send a boolean value to the\ntemplate that indicates if the current user is logged in or not:\n\n```js\nres.render('layout', { userIsLoggedIn: true });\n```\n\nThen you can use that boolean variable to determine what content to display:\n\n```pug\nif userIsLoggedIn\n  h2 Welcome!\nelse\n  a(href='/login') Please login\n```\n\nIf the `userIsLoggedIn` variable is `true` (indicating that the user has logged\nin) then the template would render:\n\n```html\n<h2>Welcome!</h2>\n```\n\nOtherwise the template would render:\n\n```html\n<a href=\"/login\">Please login</a>\n```\n\n## What you learned\n\nIn this article, you learned how to\n\n* render elements;\n* set element attribute values;\n* set element class and ID attribute values;\n* set element content from a variable;\n* set an element attribute value from a variable;\n* inject a variable value into text using interpolation;\n* iterate the elements in an array to generate content; and\n* conditionally display content.\n\n## See also…\n\nThere's so much more that you can do with Pug! Be sure to take some time to\nexplore [Pug's documentation][pug docs].\n\n[pug docs]: https://pugjs.org/api/getting-started.html\n"
  },
  "success": true
}