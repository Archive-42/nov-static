{
  "template": {
    "taskId": "5f718c58-fd84-4fff-8f89-c5216003c257",
    "name": "Using Separate Routers",
    "repo": "Modular-Curriculum",
    "path": "content/express/topics/routing/readings/reading-express-routers-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "using-separate-routers"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Express Routers\n\nAs you've learned about Express routing, you've defined routes within a single\n`app.js` file. While this is a convenient approach to use while learning, it's\nnot very practical for \"real world\" web applications.\n\nIn the real world, web applications tend to target groups of resources, where\neach resource is associated with multiple routes. For example, a customer order\nmanagement application might target resources like \"Customers\", \"Products\",\n\"Product Categories\", and \"Orders\", and each of those resources might have\nroutes for creating, retrieving, updating, and deleting records (often referred\nto as CRUD operations). Additionally, some resources might need to share the\nsame routes.\n\nIn these situations, defining all of your web application's routes within a\nsingle JavaScript file is simply put, a bad idea.\n\nExpress routers allow developers to create collections of modular, mountable\nroute handlers. Using routers helps to keep your code organized and DRY (don't\nrepeat yourself!), ensuring that your code is as readable and maintainable as\npossible.\n\nAs an introduction to Express routers, let's create routing for a sports team\napplication. You'll use a router to define routes for \"Home\", \"Schedule\", and\n\"Roster\" pages. Then you'll see how to mount that router onto your application\nso that its routes are shared across multiple teams.\n\nWhen you finish this article, you should be able to:\n\n* Use the `express.Router` class to define a collection of route handlers; and\n* Use the `app.use()` method to mount a Router instance for a specific route\n  path.\n\n## Setting up the initial project\n\nCreate a folder for your project, open a terminal or command prompt window,\nbrowse to your project's folder, and initialize npm:\n\n```\nnpm init -y\n```\n\nThen install Express 4.0:\n\n```\nnpm install express@^4.0.0\n```\n\nAdd a file named `app.js` file to your project containing the following code:\n\n```js\nconst express = require('express');\n\n// Create the Express app.\nconst app = express();\n\n// TODO Mount router instances.\n\n// Define a port and start listening for connections.\n\nconst port = 8081;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\nYour application doesn't contain any routes yet, so hold off on testing for a\nbit.\n\n> Remember that if you leave your application running in the terminal or command\n> prompt window while you're working, you'll need to stop and restart it so that\n> Node picks up your latest code changes. To do that, press `CTRL+C` to stop the\n> application and run `node app.js` to restart the application.\n\n## Defining a collection of route handlers\n\nWhile it's not required, a common convention is to create each Express router\ninstance within its own Node module. Remember that in Node, each file is treated\nas a separate module. So, to create a new module for your router, add a new file\nnamed `routes.js` to your project.\n\n> Typically, the name of the module reflects the resource that the router will\n> be defining routes for. Going back to the customer order management\n> application, you'd have files named `customers.js` and `products.js`\n> containing routers (and route definitions) for the Customers and Products\n> resources. For this article, you'll keep things simple and just use the\n> filename `routes.js`.\n\nAt the top of the file, use the `require` directive to import the `express`\nmodule and assign it to a variable named `express`:\n\n```js\nconst express = require('express');\n```\n\nYou've had a lot of practice using the `express` function (exported by the\n`express` module) to create Express applications. The `express` module also\nexports the `Router` class via a property on the `express` function, which you\ncan use to create an instance of a router:\n\n```js\n// Create the Router instance.\nconst router = express.Router();\n```\n\nEverything that you've done so far with defining routes using an Express\nApplication (`app`) object can be done with a router instance. For this reason,\na router can be thought of as a \"mini-app\".\n\n> The Express Application (`app`) object and Router objects also handle\n> middleware in the same way. You'll learn about middleware in a future lesson.\n\nUsing the `router.get()` method, define a collection of routes for a sports team\nincluding \"Home\", \"Schedule\", and \"Roster\" pages:\n\n```js\n// Define routes.\n\nrouter.get('/', (req, res) => {\n res.send('Home');\n});\n\nrouter.get('/schedule', (req, res) => {\n res.send('Schedule');\n});\n\nrouter.get('/roster', (req, res) => {\n res.send('Roster');\n});\n```\n\nCode contained within a module isn't automatically visible or callable to code\ncontained in other modules. To expose code to other modules, you can use the\n`module.exports` object. Since you only have one object to export from your\nmodule, simply assign the `router` variable to the `module.exports` property:\n\n```js\nmodule.exports = router;\n```\n\nHere's the completed code for the `routes.js` file:\n\n```js\nconst express = require('express');\n\n// Create the Router instance.\nconst router = express.Router();\n\n// Define routes.\n\nrouter.get('/', (req, res) => {\n res.send('Home');\n});\n\nrouter.get('/schedule', (req, res) => {\n res.send('Schedule');\n});\n\nrouter.get('/roster', (req, res) => {\n res.send('Roster');\n});\n\nmodule.exports = router;\n```\n\n## Mounting a Router instance\n\nNow that you've finished setting up your router instance, you're ready to make\nuse of it within your `app.js` file. At the top of the file just below where\nyou're importing the `express` module, use the `require` directive to import the\n`routes` module and assign it to a variable named `routes`:\n\n```js\nconst express = require('express');\nconst routes = require('./routes');\n```\n\n> Notice that the call to the `require` directive to import the `routes` module\n> starts with a relative path (i.e. a dot `.` followed by a forward slash `/`).\n> This tells Node that the `routes` module is a local module contained within\n> our project, as opposed to a module contained within an external dependency\n> located in the `node_modules` folder (that was installed using the `npm\n> install` command).\n\nTo expose your router instance to the outside world so that it can handle\nincoming HTTP requests, you need to tell your Express Application (`app`) object\nto use it. To do that, call the `app.use()` method passing in an optional route\npath along with the `routes` variable (the instance of your router):\n\n```js\n// Create the Express app.\nconst app = express();\n\n// Mount router instances.\napp.use('/portland-thorns', routes);\n```\n\nProviding a route path when mounting your router instance allows you to mount\nthe router instance multiple times each with a different route path:\n\n```js\n// Create the Express app.\nconst app = express();\n\n// Mount router instances.\napp.use('/portland-thorns', routes);\napp.use('/orlando-pride', routes);\n```\n\nThe combination of the router mount paths and the route paths defined within the\nrouter allows you to easily and quickly build a hierarchy of routes:\n\n* `/portland-thorns/`\n* `/portland-thorns/schedule`\n* `/portland-thorns/roster`\n* `/orlando-pride/`\n* `/orlando-pride/schedule`\n* `/orlando-pride/roster`\n\nIf you mounted the router instance without supplying a route path (i.e.\n`app.use(routes)`), then your application would only have the following routes\nconfigured:\n\n* `/`\n* `/schedule`\n* `/roster`\n\n> Mounting a router instance without a route path might not seem very useful at\n> first glance, but it can be helpful technique for keeping your project\n> organized by defining top-level routes in their own module using a router.\n\nThe completed code for your `app.js` file should look like this:\n\n```js\nconst express = require('express');\nconst routes = require('./routes');\n\n// Create the Express app.\nconst app = express();\n\n// Mount router instances.\napp.use('/portland-thorns', routes);\napp.use('/orlando-pride', routes);\n\n// Define a port and start listening for connections.\n\nconst port = 8081;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\n### Testing the application\n\nTo test your application, open a terminal or command prompt window, browse to\nyour project's folder, and run the following command:\n\n```\nnode app.js\n```\n\nIf your application starts successfully, you'll see the text \"Listening on port\n8081â€¦\" displayed in the terminal or command prompt window. Next, open a web\nbrowser and browse to each of the following addresses for the Portland Thorns:\n\n* `http://localhost:8081/portland-thorns` - displays the text \"Home\" in the\n  browser.\n* `http://localhost:8081/portland-thorns/schedule` - displays the text\n  \"Schedule\" in the browser.\n* `http://localhost:8081/portland-thorns/roster` - displays the text \"Roster\" in\n  the browser.\n\nNow browse to the following addresses for the Orlando Pride:\n\n* `http://localhost:8081/orlando-pride` - displays the text \"Home\" in the\n  browser.\n* `http://localhost:8081/orlando-pride/schedule` - displays the text \"Schedule\"\n  in the browser.\n* `http://localhost:8081/orlando-pride/roster` - displays the text \"Roster\" in\n  the browser.\n\nCongrats on creating your first Express application with routers!\n\n## What you learned\n\nIn this article, you learned\n\n* how to use the `express.Router` class to define a collection of route\n  handlers; and\n* how to use the `app.use()` method to mount a Router instance for a specific\n  route path.\n\n## See alsoâ€¦\n\nFor more information about the Express Router class, [see the official\ndocumentation][express router].\n\n[express router]: https://expressjs.com/en/4x/api.html#router\n"
  },
  "success": true
}