{
  "template": {
    "taskId": "704026b4-894a-4fbc-b6db-457e45362633",
    "name": "A Second Language",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/welcome/readings/reading-second-language-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "a-second-language"
    ],
    "topic": "Monday",
    "subtopic": "Lecture",
    "body": "# Learning a Second Coding Language\n\nOne of the most critical skills for advancing you career as a software developer\nin the ability to learn and master additional languages.\n\nWhen you complete this lesson, you should be able to\n\n* Identify key principles for learning a second programming language\n* List some similarities between Python and Javascript\n* Point out differences in core constructs between Python and Javascript\n\n## Principles\n\nMany senior developers and software architects \"speak\" a dozen or more different\ncoding languages. Many agree the second language is the most challenging. These\nexperts recommend focusing on the core functionality and looking for the\nsimilarities and differences from language to language.\n\nPrimary principles for learning a second programming language\n\n* Start with foundations learning what's the same and what's different\n* Leverage your non-coding skills\n* Practice reading before writing\n\n## Javascript-Python similarities\n\nPrinciples of development carry over from language to language. Often there are\ntechnical details that are the same as well.\n\n### Strings\n\nSingle quotes (apostrophes) and double quotes can be used for strings\nin both Python and Javascript.\n\n```python\nmyString = \"some string\"\nanotherString = 'this too'\n```\n\n### Mathematical Expressions\n\nYou will likely not be surprised to find out that Python uses the same math\noperators that you've come to know (and love?).\n\n* Addition with `+`\n* Subtraction with `-`\n* Multiplication with `*`\n* Division with `/`\n* Mod (remainder) with `%`\n\nAlso, comparison operators are the same, less than, greater than, and that\nfamily.\n\n* Less than `<`\n* Less than or equal `<=`\n* Greater than `>`\n* Greater than or equal `>=`\n* Equals `==`\n* Not equals `!=`\n\n### Scripting\n\nBoth Python and JavaScript (Node.js) can be written as \"scripts\", or in\n\"scripting flow\". This means simple code that reads \"top to bottom\" is written\nto solve technical challenges. You can write a JavaScript file for Node.js to\nread a file and print its contents like this.\n\n```js\nconst { readFileSync } = require('fs');\nconst content = readFileSync('./file.txt', 'utf-8');\nconsole.log(content);\n```\n\nThat is just a \"script\", evaluating from top to bottom, with no callbacks or\nspecial server stuff going on. Python is _very_ good at this type of\nprogramming and was one of the reasons it was created, to write scripts to do\n_stuff_ on your computer.\n\n### Object-oriented, if you want\n\nObject-oriented programming principle and approaches are supported in Python,\nincluding inheritance and encapsulation. Don't worry if you don't remember what\nthese terms mean. You'll dig into them again in a future lesson.\n\n### Popular and free\n\nJavaScript (both in the browser and with Node.js) is free to use. Python is also\nfree to use. Each one has a set of passionate followers who keep the movement\nalive and thriving. This means there are many libraries (called modules or\npackages in Python) to choose for solving common - and not-so-common - coding\nchallenges.\n\n## Javascript-Python differences\n\nNow, for some first-step differences, one of the most obvious is whitespace.\n\n### Whitespace-aware\n\nWhitespace _matters_ in Python. This is going to be a huge pain for you as you\nstart writing it. In JavaScript, you could just not care what your code looked\nlike.\n\n```js\nif (something) {\n  const a = 1;\n  const b = 2;return a + b;\n}\n```\n\nPython will _scream_ at you for badly indented code because Python uses\nwhitespace to indicate a _code block_. That means that there is nearly a\ncomplete lack of curly braces in Python. In JavaScript, if you want a code block\nfor an `if` statement, for example, you would write\n\n```js\nif (condition) {\n  console.log('Condition met.');\n}\n```\n\nIn Python, you use a colon and indentation.\n\n```python\nif (condition):\n  print('Condition met.')\n```\n\nIf you're not consistent with your indentation, then you get this nasty thing:\n\n```\nIndentationError: unexpected indent\n```\n\nPython forces you to be a neat programmer.\n\n### Declaring functions\n\nIn JavaScript, you will see a function declaration like this.\n\n```js\nfunction doAThing(arg1, arg2) {\n  console.log(arg1, arg2);\n}\n```\n\nRemember, Python is whitespace-aware, so there are no curly braces, just\nindentation. Python uses the `def` keyword to \"define\" a function.\n\n```python\ndef doAThing(arg1, arg2):\n  print(arg1, arg2)\n```\n\n### No semicolons?\n\nCorrect. You may have noticed that Python does not normally use semicolons.\nInstead, idiomatic Python puts one statement per line. If the line ends with a\ncolon, then it starts a block, like an `if` block or a new function. If it\ndoesn't end in a colon, then it just assumes that's the statement.\n\nPython won't get mad at you for putting semicolons in the code. As a matter of\nfact, if you want to put more than one statement on a line, you have to use\nsemicolons.\n\n```python\nprint('First'); print('Second');\n```\n\nPractical Python programmers _rarely_ do this. It is considered, in most cases,\nbad form.\n\n### Logical operators\n\nJavaScript inherited the `&&`, `||`, and `!` operators from Java to make Java\nprogrammers feel like they were comfortable with the language when it was\ncreated.\n\nPython had no such baggage. The designer of the language wanted to _read_ the\ncode, so the logical operators in Python are `and`, `or`, and `not`.\n\n```js\nif ((condition1 && condition2) || !condition3) {\n  console.log('Condition met.');\n}\n```\n\n```python\nif ((condition1 and condition2) or not condition3):\n  print('Condition met')\n```\n\n### Some other notable differences\n\n| Feature              | Javascript             | Python                   |\n|----------------------|------------------------|--------------------------|\n| Print to Terminal    | `console.log()`        | `print()`                |\n| Comment (one-line)   | `// This is a comment` | `# This is a comment`    |\n| Comments (multiline) | `/* Comment */`        | `\"\"\" Comment \"\"\"`        |\n| Package Manager      | npm                    | pipenv, poetry, or hatch |\n\nPython adds some more math operators because lots of mathy people use Python.\n\n* `**` for exponents: `2 ** 3` is 8\n* `//` for integer division: `10 // 3` is 3\n\nUnlike JavaScript, Python does _not_ have the weird triple-equal sign for\nstrict equality. The symbols `===` and `!==` just don't exist in Python. You'll\nstudy more about equality in a future lesson.\n\n## Translate!\n\nArmed with this information, can you predict how to write messages to the\nterminal?\n\nIf you said `print('here is my message')` you would be correct.\n\nWhat about comments... How would you write comment line in Python?\n\nIn looking at the differences table, youâ€™ll see that you need to use\n`#` instead of `//`. Therefore, a comment would look like this:\n```python\n# Here is a comment\n```\n\nIn fact, you may find that you can already read some basic Python, even\nbefore you fully understand how to write in the language from scratch.\n\nFor example, take a look at this code block. If you'd like, you can challenge\nyourself to try to decipher it before you scroll down to see the explanation.\n(Some comments have been omitted and print statements modified to make\nit a little more challenging.)\n\n```python\n# To take input from the user\nnum = int(input(\"Enter a number: \"))\n\nif num > 1:\n  # check for factors\n  for i in range(2, num):\n    if (num % i) == 0:\n      print(num, \"is not a _____ number\")\n      print(i, \"times\", num//i , \"is\", num)\n      break\n    else:\n      print(num,\"is ______\")\n\nelse:\n  print(num,\"is not a _____ number\")\n```\n\n### So what does this do?\n\nScroll down when you're ready to find out.\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\n...\n\nHere's what that same code looks like with comments restored.\n\n```python\n# To take input from the user\nnum = int(input(\"Enter a number: \"))\n\n# By definition, prime numbers are greater than 1\nif num > 1:\n  # check for factors\n  for i in range(2,num):\n    # check for remainder in division (mod), if none it's not prime\n    if (num % i) == 0:\n      print(num,\"is not a prime number\")\n      # find it's corresponding factor using integer division\n      print(i,\"times\",num//i,\"is\",num)\n      break\n  else:\n    print(num,\"is prime\")\n\nelse:\n  print(num,\"is not a prime number\")\n```\n\nCan you figure out the program now?\n\nThat's right! It identifies prime numbers.\n\nHopefully this reinforces why commenting is so important to superior software\ndevelopment practices!\n\n## What you've learned\n\n* Principles for learning a second programming language\n* Similarities between Python and Javascript\n* Key differences between Python and Javascript\n\nHopefully you're feeling a little more comfortable with the idea of expanding\nyour skills into a new language. After all, each one is a variation on the theme\nof telling computers what to do. That means much of your planning, design\nand logic skills will transfer with minimal translation.\n"
  },
  "success": true
}