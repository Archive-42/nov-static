{
  "template": {
    "taskId": "3c954222-d9ae-4f37-be9a-71b4047498bb",
    "name": "Importing In Python",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/modules/readings/reading-import-intro-py.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "importing-in-python"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Introduction to Import\n\nWhen you complete this lesson, you should be able to\n* Define *module* in Python\n* Use `import` to load a built-in module\n* Understand the relationship between *packages*, *modules* and *submodules*\n* Follow common best practices for importing modules\n\n## Overview\n\nModules in Python are similar to packages in Node.js and JavaScript. In short,\nthey are a way to split code into multiple files.\n\nModules come in different \"flavors\" depending on their source\n1. *Built-in* - already in Python\n2. *Third-party* - downloaded via command line\n3. *Custom* - what you make\n\nRegardless of flavor, all modules are loaded using `import` statements.\n\n### Terms\n\n1. A **module** is simply Python code in a separate file.\n2. A **package** is the path to a directory that contains modules which is also\n   a special type of module.\n3. **`__init__.py`** is the default file for a package.\n4. A **submodule** is another file in a module’s folder.\n5. A **function** is (obviously!) a function in a module.\n\n### Visualization\n\n```\nproject\n│   README.md\n│   __init__.py\n|   shopping_cart.py         <== module\n│\n└───pet                      <== package\n│   │\n│   └───mammal               <== module (and package)\n|   |   |   __init__.py\n│   |   │   dog.py           <== submodule\n│   |   │   cat.py           <== submodule\n│   |   │   ...\n│   │\n│   └───fish                 <== module (and package)\n|   |   |   __init__.py\n│   │\n│   └───bird                 <== module (and package)\n|       |   __init__.py\n│\n└───housing                  <== module (and package)\n    │   __init__.py\n    │   aquarium.py          <== submodule\n    │   cage.py              <== submodule\n    │   kennel.py            <== submodule\n    |   ...\n```\n\n## Import Statements\n\nHere are some common examples of importing modules\n* `import <module>` - most basic\n* `import <package>.<subpackage>.<module>` - dot syntax\n* `from <package> import <module>` - one module in a package\n* `from <package> import <module>, <module>` - multiple modules or submodules in\n  a package\n* `from . import <submodule> `- special case for module's `__init__.py` to get\n  submodules in the same folder\n* `from <module> import <function>, <function>` - down to the function level\n* `from <package> import <module> as <altName>` - renaming to avoid confusion or\n  conflict\n\nFor more information you can see the Official Documentation on the [Import\nStatement].\n\n### Going Deeper\n\nWhile a module can be any file, it is usually created by placing a special file\n(`__init__.py`) in a folder. This folder then becomes the module’s name and is\ntreated as a module/package that may be imported.\n\nWhen you have large modules, it is good practice to break up functionality into\nsubmodules - that is, separate files - and have `__init__.py` import them. This\nmeans the module can be imported as a whole, or each part imported as it's\nrequired. These submodules can even be placed into subfolders (and given their\nown `__init__.py` file).\n\nPackages represent the path to modules. Remember in Python they are also modules\nthemselves. Packages are usually made up of one or more folders. In rare\noccasions, a package path can be set within a module file using a special\nattribute `__path__`.\n\nAll packages are modules (that is, a special kind of module). However, a module\nis only a package if it is in a folder or if it’s given a path through code.\n\nThe [documentation] spells it out this way\n\n> It’s important to keep in mind that all packages are modules, but not all\n> modules are packages. Or put another way, packages are just a special kind of\n> module. Specifically, any module that contains a `__path__` attribute is\n> considered a package.\n\n### Image - Tree representation of Python module structure\n\nModules can import submodules, but not the other way around. Packages don't do\nany importing; rather, they wrap modules together into a collection that can be\ntreated as a single unit.\n\nThink of a tree...\n\n![Module\ntree](https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/python/topics/modules/assets/module-tree.svg)\n\nThe path to any item (in Python that's `__path__`) is created by following the\ntrunk down each branch to the desired destination.\n\n## Recommendations\n\n### Avoid wildcards\n\nA proper principle to follow is importing only what you are using.\n\nWildcard statements include an asterisk like `from math import *` or reference\nonly a package name like `import requests`. This is important to notice because\nmany examples online use generic imports.\n\nWhile is seems like a quick way to get work done, you will likely regret it\nlater because it makes your Python code more difficult to understand, especially\nat a later time when you're trying to figure out where a specific piece of\nfunctionality was used. Additionally it can put a lot of code into memory when a\nlarge module is imported (like `math`).\n\n### Use multiple lines for clarity\n\nThis is especially helpful when you have many elements and/or when using “as”.\nAlso when looking back at your commit history in  GitHub, you will appreciate\nhaving multiple lines so you can clearly pick out the changes!\n\nBest practices recommended ordering the items in alphabetically or in another\nlogical way. Some development teams like to do class first, then functions where\neach section is alphabetical (as shown in this example).\n\n```python\nfrom urllib.request import (\n  HTTPDefaultErrorHandler as ErrorHandler,\n  HTTPRedirectHandler as RedirectHandler,\n  Request,\n  pathname2url,\n  url2pathname,\n  urlopen,\n)\n```\n\n## What you've learned\n\n* Define *module* in Python\n* Use `import` to load a built-in module\n* Understand the relationship between *packages*, *modules* and *submodules*\n* Follow common best practices for importing modules\n\n\n[Import Statement]: https://docs.python.org/3/reference/simple_stmts.html#import\n[documentation]: https://docs.python.org/3/reference/import.html\n"
  },
  "success": true
}