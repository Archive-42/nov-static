{
  "template": {
    "taskId": "31f65464-9ed5-4af7-bdaa-ae801e96e636",
    "name": "Built-In Functions",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/structures/readings/reading-built-ins-py.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "built-in-functions"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Built-in Functions\n\nWhen you complete this lesson, you should be able to\n- Use functions with iterables `filter`, `map`, `sorted`, `enumerate`, `zip`\n- Analyze iterables using `len`, `max`, `min`, `sum`, `any`, `all`\n- Work with dictionaries using `dir`\n- Work with sets using operators `&`, `|`, `-`, `^`\n\n## Functions using iterables\n\nPython has a number of built-in functions to make it easy for developers to\nwork with iterables such as sequences and collections.\n\n### filter\n\n`filter(function, iterable)` creates a new iterable of the same type which \nincludes each item for which **function** returns `True`.\n\nParameters\n* function: takes an item (from the iterable) and returns a Boolean\n* iterable: e.g. list, tuple, range, dictionary, set, or str\n\n### map\n\n`map(function, iterable)` creates a new iterable of the same type which\nincludes the result of calling the function on every item in the iterable.\n\nParameters\n* function: takes an item (from the iterable) and returns another item\n(of same or different type)\n* iterable: e.g. list, tuple, range, dictionary, set, or str\n\n### sorted\n\n`sorted(iterable, key=None, reverse=False)` creates a new sorted list from the\nitems in iterable\n\n> Notice that the output is always a `list`.\n\nParameters\n* iterable: e.g. list, tuple, range, dictionary, or set\n* key: optional function which converts an item to a value to be compared \n(e.g. `key=str.lower` for case-insensitive sorting on a list of strings)\n* reverse: optional boolean\n\nThe parameters *key* and *reverse* must be set using the name and an equal sign.\n\n### enumerate\n\n`enumerate(iterable, start=0)` starts with a sequence and converts it to a \nseries of tuples. Each tuple is made up of two elements: index and value.\n\nThe parameter *start* must be set using its name and an equal sign.\n\nThe best way to understand `enumerate` is to consider an example.\n```python\nquarters = ['First', 'Second', 'Third', 'Fourth']\nprint(enumerate(quarters))\nprint(enumerate(quarters, start=1))\n```\n\n```plaintext\n(0, 'First'), (1, 'Second'), (2, 'Third'), (3, 'Fourth')\n(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Fourth')\n```\n\n### zip\n\n`zip(*iterables)` creates a zip object filled with tuples that combine \n1-to-1 the items in each provided iterable. If the iterables have uneven length\nthen `zip` stops when the shortest one runs out of items.\n\nParameters\n* two or more iterables: usually lists, tuples or dictionaries\n\n## Functions that analyze iterables\n\nAnother set of built-in functions can be used to discover more about\nthe data within an iterable.\n\n### len\n\n`len(iterable)` returns the count of the number of items. Works on collections\n(dictionary and set) as well as sequences (list, tuple, range or string).\n\n### max\n\n`max(*args, key=None)` returns the largest of two or more arguments\n\n`max(iterable, key=None)` returns the largest item in the iterable\n\nParameters\n* args: a series of items separated by commas\n* iterable: e.g. list, tuple, dictionary or set\n* key: optional function which converts an item to a value to be compared \n  (e.g. `key=str.lower` for case-insensitive string comparison)\n\nThe parameter *key* must be set using its name and an equal sign.\n\n### min\n\n(Same as max returning the item with the smallest value.)\n\n`min(*args, key=None)` returns the largest of two or more arguments\n\n`min(iterable, key=None)` returns the largest item in the iterable\n\nParameters\n* args: a series of items separated by commas\n* iterable: e.g. list, tuple, dictionary or set\n* key: optional function which converts an item to a value to be compared \n  (e.g. `key=str.lower` for case-insensitive string comparison)\n\nThe parameter *key* must be set using its name and an equal sign.\n\n### sum\n\n`sum(iterable)` is usually used with a list of numbers to generate the total.\n\n> IMPORTANT: There is a faster way to concatenate an array of strings into \n> one string so sum should not be used for that.\n\nOptional challenge: Think about how you could calculate the average of a list\nof numbers in one line of Python code.\n\n### any\n\n`any(iterable)` returns True if any items in the iterable are *true*.\n\nIf the iterable is empty, then `any` returns `False` because it cannot\nfind any *true* items.\n\nThis depends on the expanded definition of truth in Python where\nnumbers are *true* when not zero, strings are *true* when not empty, \nand other kinds of objects are *true* when not `None`.\n\n### all\n\nThis is a companion function to `any` above and also depends on the expanded\ndefinition of truth.\n\n`all(iterable)` returns True if all items in the iterable are *true*.\n\nIf the iterable is empty, then `all` returns `True` because it did not\nfind any items that were *false*.\n\n## Working with dictionaries\n\nPython has a special function that is very useful when working with \ndictionaries.\n\n### dir\n\n`dir(dictionary)` returns the list of keys in the dictionary.\n\nIt can also be used on objects or modules to return a list of their attributes.\n\n## Working with sets\n\nSets are a unique data structure because they have special mathematical \noperations. Python provides each as both an operator and a function.\n\n### Union\n\nThe `|` operator or `union(*sets)` function can be used to produce a new set \nwhich is a combination of all elements in the provided sets.\n\n```python\na = {1, 2, 3}\nb = {2, 4, 6}\nprint(a | b)        # => {1, 2, 3, 4, 6}\n```\n\nRemember, sets do not allow duplicates. That is why `2` only appears once in\nthe result in this example.\n\n### Intersection\n\nThe `&` operator or `intersection(*sets)` function can be used to produce a new \nset of only the elements that appear in all sets.\n\n```python\na = {1, 2, 3}\nb = {2, 4, 6}\nprint(a & b)        # => {2}\n```\n\n### Difference and symmetric difference\n\nThe `-` operator or `difference(*sets)` function can be used to produce a new \nset of only the elements that appear in the first set and NOT the other(s).\n\nThe `^` operator or `symmetric_difference(*sets)` function can be used to \nproduce a new set of only the elements that appear in EXACTLY ONE set and\nNOT in both (or all) sets.\n\n```python\na = {1, 2, 3}\nb = {2, 4, 6}\nprint(a - b)        # => {1, 3}\nprint(b - a)        # => {4, 6}\nprint(a ^ b)        # => {1, 3, 4, 6}\n```\n\n## Reference\n\nHere is a [PDF version of this lesson] if you'd like to print it for future use.\n\nIf you want to dig deeper into [data structures] or [built-in functions],\nyou may choose to review the Python docs. This is purely optional.\n\n## What you've learned\n- Use functions with iterables `filter`, `map`, `sorted`, `enumerate`, `zip`\n- Analyze iterables using `len`, `max`, `min`, `sum`, `any`, `all`\n- Work with dictionaries using `dir`\n- Work with sets using operators `&`, `|`, `-`, `^`\n\n\n[PDF version of this lesson]: ../assets/python-built-ins.pdf\n[data structures]: https://docs.python.org/3/tutorial/datastructures.html?highlight=data%20types\n[built-in functions]: https://docs.python.org/3/library/functions.html\n"
  },
  "success": true
}