{
  "template": {
    "taskId": "8e761144-2036-4916-a757-256d992efa5d",
    "name": "Bonus: Binary Search Tree Project",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/structures/projects/binary-search-tree/README.md",
    "type": "Project",
    "timeEstimate": 0,
    "urls": [
      "bonus--binary-search-tree"
    ],
    "topic": "Friday",
    "subtopic": "Knights Travail",
    "download": "",
    "solution": "",
    "body": "# Binary Search Tree Project\n\nThis project contains a skeleton for you to implement a binary search tree.\nClone the starter project from\nhttps://github.com/appacademy-starters/python-bst.\n\n## Instructions\n\nYour job is to write code in:\n  * **bst.py** to complete the `insert_value`, `search_iteratively`, and\n    `search_recursively` methods of the `BinarySearchTree` class; and\n  * **leet_code_108.py** as a scratch pad; and\n  * **leet_code_110.py** as a scratch pad.\n\n### __init__(value)\n\nEach instance of the `BinarySearchTree` class will be initialized with a `_root`\nnode property that defaults to `None`. You'll also want each tree to have a\n`_value` attribute as well as a way to connect to a `_left` and `_right` child\nnode. Test the instantiation of a `BinarySearchTree` instance by running\n`python3 bst.py`.\n\n### insert_value(value, current_node)\n\nThe `insert_value` method should insert a `TreeNode` with the given value into\nthe `BinarySearchTree`. If the `current_node` is `False`, check whether the\ntree's root node is `None`. If it is, initialize a new `TreeNode` with the given\nvalue. When the `BinarySearchTree` is empty, a `TreeNode` with the given value\nshould be correctly inserted as the root. Update the tree's root node and return\nits value.\n\nIf the given value is less than the value of the `current_node`, you'll want to\ncontinue checking the left of the tree. If the `current_node` does not have a\nleft child, initialize a new `TreeNode` and set it as the left child of the\n`current_node`. Otherwise, invoke the `insert_value` method with the given value\nand the left child of the current node as the `current_node` argument.\n\nIf the given value is greater than the current node's value, check whether the\ncurrent node's right child exists. If not, set the right child to be a new\n`TreeNode` with the given value. If the current node's right child does exist,\ninvoke the `insert_value` method with the given value and the right child of the\ncurrent node. Comment in the following test cases and run the script file with\n`python3 bst.py` to verify that your `insert_value` method is working as\nexpected:\n\n```python\ntree = BinarySearchTree()\nprint(tree._root)                         # None\n\n# 1. Test node value insertion\ntree.insert_value(10)\ntree.insert_value(5)\ntree.insert_value(16)\ntree.insert_value(1)\ntree.insert_value(7)\ntree.insert_value(16)\nprint(tree._root._value)                  # 10\nprint(tree._root._left._value)            # 5\nprint(tree._root._right._value)           # 16\nprint(tree._root._left._left._value)      # 1\nprint(tree._root._left._right._value)     # 7\nprint(tree._root._right._right._value)    # 16\n```\n\n### search_iteratively(value) should\n\nThe `search_iteratively` method should return false when the `BinarySearchTree`\nis empty. The method should check each node's left or right node iteratively,\nnot recursively. Begin by setting the current node to check to be the tree's\nroot node. When the value is contained in the `BinarySearchTree`, the method\nshould return true. Otherwise, the method should return false. Comment in the\nfollowing test cases to check your `search_iteratively` method:\n\n```python\n# 2. Test iterative search\nempty_tree = BinarySearchTree()\nprint(empty_tree.search_iteratively(10))  # False\nprint(tree.search_iteratively(10))        # True\nprint(tree.search_iteratively(7))         # True\nprint(tree.search_iteratively(-1))        # False\n```\n\n### search_recursively(value, current_node)\n\nThe `search_recursively` method should return false when the `BinarySearchTree`\nis empty. The method should recursively check the left and right child nodes of\nthe current node. If the current node is `None`, the method should return false\nsince there are no possible nodes to search through for the value. If the target\nvalue is less than the current node's value, recursively search through the left\ntree. If the target value is greater than the current node's value, recursively\nsearch through the right tree. When the value is found in the\n`BinarySearchTree`, the method should return true. Comment in the test cases\nbelow to check your `search_recursively` method.\n\n```python\n# 3. Test recursive search\nprint(empty_tree.search_recursively(10))  # False\nprint(tree.search_recursively(10))        # True\nprint(tree.search_recursively(7))         # True\nprint(tree.search_recursively(-1))        # False\n```\n"
  },
  "success": true
}