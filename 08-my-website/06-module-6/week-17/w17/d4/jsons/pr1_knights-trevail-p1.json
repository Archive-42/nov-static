{
  "template": {
    "taskId": "82ca24cb-9c60-4857-a44b-2d581146fd41",
    "name": "Knights Travail Project - Phase 1",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/classes/projects/knights-travail/README-01-make-your-tree-py.md",
    "type": "Reading",
    "timeEstimate": 10800,
    "urls": [
      "phase-1"
    ],
    "topic": "Thursday",
    "subtopic": "Knights Travail Project",
    "body": "# Knight's Travails Project Part 1\n\nEven though there are four discrete parts to this project, read through all of\nthem, first, before starting this phase.\n\nIn this project we will create a class that will find the shortest path for a\nChess Knight from a starting position to an end position. Both the start and end\npositions should be on a standard eight-by-eight chess board.\n\nAt the end of this project, you should be able to bring together lots that\nyou've learned, this week, as well as bringing back information you learned\nearlier in the course, such as:\n\n* declaring classes in Python\n* creating and using lists in Python\n* using list comprehensions in Python\n* using loops in Python\n* using conditionals in Python\n* using the tree data structure\n* using tree searches to find nodes\n\nYou'll also use unit tests for part of it to guide your development like you did\nin Node.js-land.\n\n## Getting started\n\nMake sure that you're running a 3.8 version of Python by typing `python\n--version` in your terminal.\n\nClone the starter project from\nhttps://github.com/appacademy-starters/python-knights-travail.\n\nChange directory into the cloned repository.\n\nRun the tests with the following command line. Note that you'll need to create a\n`tree.py` file before being able to view the test errors. Run the following\ncommand from the root directory of your project, not from within the `test`\ndirectory.\n\n```shell\npython -m unittest\n```\n\nAt the top of your test response, you'll see \"EEEEEEEEEEEEEEEEE\". This indicates \nthat you have seventeen test errors. As you write code and pass tests, you'll \nsee each `E` change to a `.` for a passed test or an `F` for a failed test. At \nthe bottom, you can also see how many failed tests you have \n\"FAILED (errors=17)\".\n\n## Write the tree node class\n\nCreate a file named `tree.py`. In there, declare a class named `Node`. Create\nan initializer for `Node` that does the following things.\n\n* Accepts a parameter named \"value\" and sets an instance variable named \"_value\"\n  to that value\n* Sets the \"_parent\" instance variable to `None`\n* Sets the \"_children\" instance variable to a new empty list\n\nThen, add the following to the class\n\n* A getter property method named \"value\" that returns the value in \"_value\"\n* A getter property method named \"children\" that returns the value of\n  \"_children\"\n* A method named \"add_child\" that takes a node to append it to the list in\n  \"_children\" and update the node's \"_parent\", if the node is not already in \n  \"_children\"\n* A method named \"remove_child\" that takes a node to remove it from the list\n  in \"_children\" and reset its \"_parent\" to `None`\n* A getter property method named \"parent\" that returns the value of \"_parent\"\n* A setter property method named \"parent\" that sets the parent property _and_\n  calls the \"add_child\" method of the parent node passing itself as the node to\n  add to the list of children\n\nOnce you do that, you should be able to run the tests and see that all of the\ntests for `__init__()` works and most of the ones for `parent()` should pass.\nYou'll finish the other tests for that method soon.\n\n## Reassign parents\n\nCurrently, the `parent()` setter does not update a node's children when it is reassigned or removed as a parent. Add the following code to the bottom of \nyour `tree.py` file and run `python3 tree.py` to manually test and examine the \nchildren.\n\n```python\nnode1 = Node(\"root1\")\nnode2 = Node(\"root2\")\nnode3 = Node(\"root3\")\n\nnode3.parent = node1\nnode3.parent = node2\n\nprint(node1.children)\nprint(node2.children)\n```\n\nYou should see two lists containing `node3` with the same identifier:\n\n```sh\n[<__main__.Node object at 0x10ee02640>]\n[<__main__.Node object at 0x10ee02640>]\n```\n\nWhen you assign `node1` as the parent of `node3`, `node3` adds itself to the \nchildren of `node1`. When you then assign the parent of `node3` to `node2`,\n`node3` adds itself to the children of `node2`, but _is still in the children\nof `node1`_! That doesn't make sense.\n\nModify the `parent()` setter to _remove_ the child from the existing parent (if\none exists) _before_ adding itself to the new parent's children list. You should\nhave already implemented the \"remove_child\" method. Use it.\n\nAfter adding the condition to remove the child node from the parent if the child \nhas a parent, you'll receive a new error:\n\n```sh\nAttributeError: 'NoneType' object has no attribute 'add_child'\n```\n\nAdd a condition to make sure that the input parent `node` is not `None` before \nadding the child node to the parent. Now if you run `python3 tree.py` again, \nyou'll notice that your script is running in an endless recursive loop with the \nfollowing error:\n\n```sh\nRecursionError: maximum recursion depth exceeded\n```\n\nThink of how the `add_child` and `remove_child` methods are both invoking the\n`parent()` setter. What would be the base case to prevent an endless recursive\ncall of the `parent()` setter?\n\nAdd the base case. Manually test your `parent()` setter. Once you are no longer\nreceiving errors, comment out the test cases and run the test suite with `python\n-m unittest`. Now all of the `parent()` setter tests should pass. You should\nhave four remaining tests to pass.\n\n## Searching\n\nWrite a method named `depth_search(value)` that takes a value to search for,\nperforms a depth-first search, and returns the node that contains the value,\nif it exists. Otherwise, it should return `None`.\n\nWrite a method named `breadth_search(value)` that takes a value to search for,\nperforms a breadth-first search, and returns the node that contains the value,\nif it exists. Otherwise, it should return `None`.\n\nAll of the tests should now pass.\n"
  },
  "success": true
}