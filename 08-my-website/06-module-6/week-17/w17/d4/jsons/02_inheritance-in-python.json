{
  "template": {
    "taskId": "67df949c-053f-4481-b440-3f7ce115c989",
    "name": "Inheritance In Python",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/classes/readings/reading-inheritance-python-py.md",
    "type": "Reading",
    "timeEstimate": 300,
    "urls": [
      "inheritance-in-python"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# Inheritance\n\nOne of the most important goals of the object-oriented approach to programming\nis the creation of stable, reliable, reusable code. If you had to create a new\nclass for every kind of object you wanted to model, you would hardly have any\nreusable code. Like in JavaScript, Python can have one class inherit from\nanother class. This means you can base a new class on an existing class. The new\nclass inherits all of the attributes and behavior of the class it is based on. A\nnew class can override any undesirable attributes or behavior of the class it\ninherits from, and it can add any new attributes or behavior that are\nappropriate. The original class is called the **parent class**, and the new\nclass is a **child class** of the parent class. The parent class is also called\na **superclass**, and the child class is also called a **subclass**.\n\nThe child class inherits all attributes and behavior from the parent class, but\nany attributes that are defined in the child class are not available to the\nparent class. This may be obvious to many people, but it is worth stating. This\nalso means a child class can override behavior of the parent class. If a child\nclass defines a method that also appears in the parent class, objects of the\nchild class will use the new method rather than the parent class method.\n\nIn this article, you will learn how to use inheritance in Python.\n\nTo inherit one class from another, you specify the parent class in parentheses\nafter the child class' name, kind of like an argument list to the class.\n\n```python\nclass Employee:\n    def __init__(self, id):\n        self.id = id\n\n\nclass Manager(Employee):\n    def __init__(self, id):\n        super().__init__(id)\n        self.employees = []\n\n    def add_direct_report(self, employee):\n        self.employees.append(employee)\n```\n\nIn these classes, objects from `Employee` would have an `id` instance variable.\nObject from `Manager` would have an `id` instance variable (since it inherits\nfrom `Employee`) and an `employees` instance variable that contains the\nemployee objects that the manager manages.\n\nThe comparable JavaScript classes would look like this.\n\n```js\nclass Employee {\n  constructor(id) {\n    this.id = id;\n  }\n}\n\n\nclass Manager extends Employee {\n  constructor(id) {\n    super(id);\n    this.employees = [];\n  }\n\n  add_direct_report(employee) {\n    this.employees.push(employee);\n  }\n}\n```\n\nThe real weird part of the Python version is the way you call the initializer\nof the parent class with the `super().__init__()` call. That's just the way it\nworks in Python.\n\nEverything else, hopefully, is not that alien.\n\nThat weird `super().method()` syntax applies to all methods in Python, if you\nwant to specifically call the method on the parent class. Have a look at this\nweird nonsense.\n\n```python\nclass Parent:\n    def boop(self):\n        print(\"I am Parent#boop\")\n\n\nclass Child(Parent):\n    def boop(self):\n        print(\"I am Child#boop\")\n        super().boop()\n\n\nChild().boop()\n# Prints\n# \"I am Child#boop\"\n# \"I am Parent#boop\"\n```\n\nAnd, that's pretty much inheritance in Python:\n\n* Use parentheses after the class name to specify the parent class\n* Use the `super()` method to access methods on the parent class\n"
  },
  "success": true
}