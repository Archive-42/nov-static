{
  "template": {
    "taskId": "3c8e771a-37a4-420b-a728-dc16626d1955",
    "name": "While Statements",
    "repo": "Modular-Curriculum",
    "path": "content/python/topics/expressions/readings/reading-while-statements-py.md",
    "type": "Reading",
    "timeEstimate": 300,
    "urls": [
      "while-statements"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# The While Statement\n\nGetting a block of code to execute over and over again based on some condition\nis also an important construct in programming. In JavaScript, you could use the\n`while` loop to do that. You can do that in Python, too!\n\n## While things are good\n\nYou can make a block of code execute over and over again with a `while`\nstatement. The code in a `while` clause will be executed as long as the `while`\nstatement’s condition is `True`. In code, a `while` statement always consists of\nthe following:\n\n* The `while` keyword\n* A condition (that is, an expression that evaluates to `True` or `False`)\n* A colon\n* Starting on the next line, an indented block of code (called the `while`\n  clause)\n\nYou can see that a `while` statement looks similar to an `if` statement. The\ndifference is in how they behave. At the end of an `if` clause, the program\nexecution continues after the `if` statement. But at the end of a `while`\nclause, the program execution jumps back to the start of the `while` statement.\nThe `while` clause is often called the _while loop_ or just _the loop_.\n\nHere is the code with a `while` statement:\n\n```python\nspam = 0\nwhile spam < 5:\n  print('Hello, world.')\n  spam = spam + 1\n```\n\nThe code with the `while` loop prints \"Hello, world.\" five times. It stops after\nfive prints because the integer in `spam` is incremented by one at the end of\neach loop iteration, which means that the loop will execute five times before\n`spam < 5` is `False`.\n\nIn the `while` loop, the condition is always checked at the start of each\niteration (that is, each time the loop is executed). If the condition is `True`,\nthen the clause is executed, and afterward, the condition is checked again. The\nfirst time the condition is found to be `False`, the `while` clause is skipped.\n\n## Breaking out early\n\nThere is a shortcut to getting the program execution to break out of a while\nloop’s clause early. If the execution reaches a `break` statement, it\nimmediately exits the while loop’s clause. In code, a `break` statement simply\ncontains the `break` keyword. This is just like the `break` statement in\nJavaScript.\n\n```python\nspam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam >= 5:\n    break\n```\n\nThe `while` in this case is an _infinite loop_ because `while True` will never\nhave a `False` condition, which means it will loop forever... unless some line\nlets it `break` out of the loop. In this code, that happens at the end of the\n`while` clause where an `if` checks that `spam` is greater than or equal to 5.\nIf it is, then the `break` statement runs and exits the `while` clause.\n\n## Continue statements\n\nLike `break` statements, `continue` statements are used inside loops. When the\nprogram execution reaches a `continue` statement, the program execution\nimmediately jumps back to the start of the loop and reevaluates the loop’s\ncondition. (This is also what happens when the execution reaches the end of the\nloop.) Here's an alternative implementation of the loop from above that uses\na `continue` statement, as well.\n\n```python\nspam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam < 5:\n    continue\n  break\n```\n\nHere, you can see that the `if` statement now checks that the `spam` value is\nless than 5. If it is, then the `continue` statement gets executed which causes\nthe current program statement to go back up to the `while True` and start the\nloop all over, again. When `spam` gets large enough to not trigger that `if`\ncondition, then the `break` statement runs and the `while` loop is over.\n\n## In the REPL\n\nIf you ever run a program that has a bug causing it to get stuck in an infinite\nloop, press Control+C. This will send a `KeyboardInterrupt` error to your\nprogram and cause it to stop immediately. The following code, if contained in a\nPython program, would cause that infinite loop.\n\n```python\nwhile True:\n    print('Hello world!')\n```\n\nIf you ran that program, it will print \"Hello world!\" to the screen forever,\nbecause the `while` statement’s condition is always `True`.\n\n## What you've learned\n\nYou learned that, just like JavaScript, Python has a `while` loop that you can\nuse `break` and `continue` statements in. Other than the indentation, lack of\nparentheses, and colons, it's kind of the same.\n"
  },
  "success": true
}