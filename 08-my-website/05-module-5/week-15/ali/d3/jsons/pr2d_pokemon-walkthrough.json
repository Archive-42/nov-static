{
  "template": {
    "taskId": "7fffcf1e-8d6c-4ed7-8eb8-bdb429213cb9",
    "name": "Pokemon Redux Walk-Through Part 4",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/aggregates/pokedex/redux-based/README-04-fourth-state.md",
    "type": "Project",
    "timeEstimate": 2700,
    "urls": [
      "walk-through-part-4"
    ],
    "topic": "Wednesday - React + Redux",
    "subtopic": "Pokedex With Redux",
    "download": "",
    "solution": "",
    "body": "# The Rest Of It\n\nYou have now been given instructions on how to refactor components from managing\nglobal application state to putting it in Redux. There are two more pieces left,\nthe \"select the current Pokemon\" functionality and the \"create a new Pokemon\"\nfunctionality. Refactor the application so those are Redux-supported, as well.\n\n## Select the current Pokemon\n\nThe place to start, here, is to determine how the click of the navigation item\non the left gets handled. It's a `NavLink`, so the `BrowserRouter` in the `App`\ncomponent handles that by routing to the `PokemonBrowser` with the route\nparameters. The `PokemonBrowser` then routes to the `PokemonDetail` with a\n`Route` component. In the `PokemonDetail` component, if the value of the\n`this.props.match.params.id` changes, then the `loadPokemon` method is called\nwhich, in turn, makes an AJAX call. And, there it is! The AJAX call.\n\nThis is like everything else, create a thunk, an action type, yada yada yada.\n\n* Create a thunk (similar to what you did for logging in) to load the current\n  Pokemon that\n  * accepts an id\n  * loads the Pokemon from an AJAX call\n  * dispatches a \"set current Pokemon\" action\n* Create a reducer that handles the \"set current Pokemon\" action by adding it\n  to the state\n* Connect the `PokemonDetail` to the Redux store by\n  * mapping the current Pokemon information in the state to its props, and\n  * mapping the \"load the current Pokemon\" thunk to its props with a `dispatch`\n    call (don't forget the id parameter)\n\n## Creating a new Pokemon\n\nThis is very similar to the login stuff you did with `LoginPanel`. In the\n`PokemonForm`, have\n\n* the `componentDidMount` method call a thunk to load the Pokemon types\n* the `handleSubmit` method call a thunk to post the form information to the\n  API\n\nIn moving the Pokemon type fetching from the state to the props, you may end up\ngetting an error that there is no method \"map\" of undefined. If that's the case,\nin the reducer in your **src/store/pokemon.js** file, have the default state\ninclude an array for the \"types\" property.\n\n```js\n// CODE SNIPPET\nexport default function reducer(state = { types: [] }, action) {\n```\n\nThat's the power of default parameters and initial state!\n\nThe action types, action creators, and thunk created to do this should go into\nthe **src/store/pokemon.js** module. When the AJAX call succeeds to create the\nnew Pokemon, have it _then_ dispatch the `getPokemon` thunk to get a new list of\nPokemon. Redux and React will add a new Pokemon to the end of the list. That's\nwhy you have to provide the \"key\" property in lists of things, so that React\nwill efficiently determine if something in the list needs to get changed, added,\nor deleted.\n\nThe only \"new\" part, here, is the coordination between `PokemonForm` and\n`PokemonBrowser` to determine if it should show a form. This is up to you to\ndecide, if showing the create form is part of the global application state (and\nshould exist in the Redux store), or if it is part of the \"local\" state between\nthe two components and be managed by `PokemonForm` invoking a function passed to\nit by `PokemonBrowser`. The solution choose the former solution.\n\n## Bonus: Extend the functionality\n\nThink about adding\n\n* A _Cancel_ button on the form that hides it\n* Error messages for the forms when something bad happens\n\n## Bonus: Connected React Router\n\nRather than relying on `Redirect` routes in your application, you can use\nactions to manage the URL of your application. Install [Connected React\nRouter][1] and remove all `Redirect` components from the application, replacing\nthem with dispatched `push` actions. Check out the [How to navigation with\nRedux action][2] article in the Connected React Router documentation.\n\n\n[1]: https://github.com/supasate/connected-react-router\n[2]: https://github.com/supasate/connected-react-router/blob/master/FAQ.md#how-to-navigate-with-redux-action\n"
  },
  "success": true
}