{
  "template": {
    "taskId": "4a77faac-f8f0-441a-9be7-9e2f8ffbe5e3",
    "name": "Middleware",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-middleware-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "middleware"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# Middleware\n\nIn Redux, middleware specifically refers to an `enhancer` passed to the store\nvia `createStore`. When a `dispatch` is made, the middleware intercepts the\n`action` before it reaches the `reducer`. The middleware can then:\n\n- **resolve the action itself** (for example, by making an AJAX request),\n- **pass along the action** (if the middleware isn't concerned with it),\n- **generate a side effect** (such as logging debugging information),\n- **send another dispatch** (if the action triggers other actions),\n- or some combination thereof.\n\nYou'll use Redux middleware for logging information about the store and making\nasynchronous API requests, but you can also use it for crash reporting, routing,\nand many other applications.\n\nWhen you finish this article, you should be able to use the React-Redux\nlibrary's `applyMiddleware` function to configure one or more middleware when\ncreating a store.\n\n## Applying middleware to a Redux store\n\nRecall the `redux` library's `createStore` function used to instantiate a store.\n`createStore` accepts three arguments (`reducer, preloadedState, enhancer`);\nmiddleware is given to the store via the optional `enhancer` argument.\n\nConsider the following example, where you import a third-party `logger`\nmiddleware:\n\n```js\n// ./src/store.js\n\nimport { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\n\nimport rootReducer from './reducers/rootReducer';\n\nconst configureStore = (preloadedState = {}) => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(logger),\n  );\n};\n\nexport default configureStore;\n```\n\nAny actions dispatched to the `store` pass through the `logger` middleware,\nwhich prints the store's state before and after the `action` is processed.\n\n> **Note:** `applyMiddleware()` accepts multiple arguments, so you can also\n> apply more middleware if necessary.\n\n## Reviewing the signature of middleware functions\n\nIn addition to importing third-party middlewares such as the above `logger`,\nyou'll sometimes need to roll your own. All middleware functions need to conform\nto the same signature in order to be compatible with the store and other\nmiddlewares.\n\nA [**function signature**][signature] is the set of inputs and output of a\nfunction. A Redux middleware must always have the following signature:\n\n```js\nconst middleware = store => next => action => {\n // side effects, if any\n return next(action);\n};\n```\n\nEvery middleware receives the `store` as an argument and returns a function that\ntakes the `next` link in the middleware chain as an argument. That function\nreturns *another* function that receives the `action` and then triggers any side\neffects before returning the result of `next(action)`. Side effects can include\ntriggering AJAX requests, logging to the console, and more. Side effects can\nalso happen after `next(action)` is called, like so:\n\n```js\nconst middleware = store => next => action => {\n const result = next(action);\n // side effect using `result`\n return result;\n};\n```\n\n## Creating your own `logger` middleware\n\nYou can hand-roll the `logger` middleware you imported above. It should print\nout the state before and after each dispatch, allowing you to check if your\nreducers are working as expected. This middleware should:\n\n- receive the store as its only argument,\n- return a function that receives the `next` middleware,\n- which should itself return a function receiving the `action`.\n\nThe body of the innermost function is where you want to do your logging. That\nfunction should:\n\n- `console.log` the `action`\n- `console.log` the result of `store.getState()` (pre-dispatch)\n- call `next(action)` to pass the action on to the rest of the middlewares, and\n  eventually, the reducer\n- save the `result` of the `next(action)` variable, to be returned later\n- `console.log` the new `store.getState()`\n- return the saved `result`\n\n```js\nconst logger = store => next => action => {\n  console.log('Action received:', action);\n  console.log('State pre-dispatch:', store.getState());\n\n  let result = next(action);\n\n  console.log('State post-dispatch:', store.getState());\n\n  return result;\n};\n```\n\nNow, whenever you dispatch an action, you'll see its effect on the store.\n\n## Installing and applying the `redux-logger` middleware\n\nAs you move forward with Redux, you'll want to have access to your store's state\nfor debugging purposes. Including the `redux-logger` npm package and adding it\nas a middleware gives you access (through the console) to the previous state,\naction, and next state with each dispatch. This is incredibly convenient for\ndebugging purposes and avoids such unpleasantness as attaching the `store` to\nthe `window`. \n\n![react-redux-logger]\n\nFollow the example below to include it in your projects:\n\n* Include the `redux-logger` package:\n\n```sh\nnpm install redux-logger\n```\n\n* Pass an instance of `redux-logger` to `applyMiddleware` when creating your\n  store:\n\n**Note: `logger` must be the last middleware passed into `applyMiddleware`**,\notherwise it will log the thunk and any involved promises. You'll learn about\nthunks and `react-thunk` in the next article.\n\n```js\n// ./src/store.js\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from './reducers/rootReducer';\n\nconst configureStore = (preloadedState = {}) => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk, logger),\n  );\n};\n\nexport default configureStore;\n```\n\n## What you learned\n\nIn this article, you learned how to use the React-Redux library's\n`applyMiddleware` function to configure one or more middleware when creating a\nstore.\n\n[signature]: https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function\n[react-redux-logger]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/redux/assets/react-redux-logger.png\n"
  },
  "success": true
}