{
  "template": {
    "taskId": "76e5bf94-d5cb-4e5d-83af-13b8da246219",
    "name": "Selectors",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-selectors-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "selectors"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "\n# Selectors\n\nSelectors are functions used to extract and format information from the\napplication state in different forms. When you finish this article, you should\nbe able to write a selector to extract and format information from state stored\nin a Redux store.\n\n## Writing a selector\n\nHere's a sample state tree from the Fruit Stand React/Redux application:\n\n```js\n{\n  fruit: [\n    'APPLE',\n    'APPLE',\n    'ORANGE',\n    'GRAPEFRUIT',\n    'WATERMELON',\n  ],\n  farmers: {\n    1: {\n      id: 1,\n      name: 'John Smith',\n      paid: false,\n    },\n    2: {\n      id: 2,\n      name: 'Sally Jones',\n      paid: false,\n    },\n  }\n}\n```\n\nThe state's `farmers` are stored as an object. Keys correspond to `farmer.id`s\nand values correspond to `farmer` objects. This yields O(1) for the lookup of a\nsingle farmer. However, storing all the farmers as values of an object makes it\nslightly inconvenient to obtain and render them all at once. To solve this\ninconvenience, we use selectors.\n\nSelectors are typically defined in a file that sits next to the reducer for its\nslice of state. For example, if the `farmers` state slice is managed by the\nreducer defined in `./src/reducers/farmersReducer.js`, then the farmers\nselectors would be stored in a file at `./src/reducers/farmersSelectors.js`.\n\nSelectors are passed the application's `state` and return information from the\nstate in a specified form (e.g. an array). You can use selectors to format\ndifferent slice(s) of the state by calling them in a container's\n`mapStateToProps`.\n\nFor example, `getAllFarmers` returns all the farmers stored in the state as an\narray of `farmer` objects, making it easier to iterate over and render each one.\n\n```js\n// ./src/reducers/farmersSelectors.js\n\nexport const getAllFarmers = ({ farmers }) => (\n  Object.values(farmers)\n);\n```\n\nA selector can be used in multiple components' `mapStateToProps`. For example:\n\n```js\n// ./src/components/FarmerManagerContainer.js\n\nimport { getAllFarmers } from '../reducers/farmersSelectors';\n\nconst mapStateToProps = (state) => ({\n  farmers: getAllFarmers(state),\n});\n```\n\nSelectors are passed the entire application `state` so they can utilize multiple\nslices of the application state to assemble data. For example, if the Fruit\nStand application's state tree included a `filter` state slice:\n\n\n```js\n{\n  fruit: [\n    'APPLE',\n    'APPLE',\n    'ORANGE',\n    'GRAPEFRUIT',\n    'WATERMELON',\n  ],\n  farmers: {\n    1: {\n      id: 1,\n      name: 'John Smith',\n      paid: false,\n    },\n    2: {\n      id: 2,\n      name: 'Sally Jones',\n      paid: false,\n    },\n  },\n  filter: ''\n}\n```\n\nThen you could write a selector to extract a filtered list of `farmer` objects:\n\n```js\n// ./src/reducers/farmersSelectors.js\n\nexport const getAllFarmers = ({ farmers }) => (\n  Object.values(farmers)\n);\n\nexport const getFilteredFarmers = ({ farmers, filter }) => {\n  const lowerCaseFilter = filter.toLowerCase();\n  return Object.values(farmers).filter(\n    (farmer) => farmer.name.toLowerCase().includes(lowerCaseFilter)\n  );\n};\n```\n\n```js\n// ./src/components/FarmerManagerContainer.js\n\nimport { getAllFarmers, getFilteredFarmers } from '../reducers/farmersSelectors';\n\nconst mapStateToProps = (state) => ({\n  farmers: getAllFarmers(state),\n  filteredFarmers: getFilteredFarmers(state),\n});\n```\n\n## Selector examples\n\n```js\n// ./src/reducers/farmersSelectors.js\n\n// Returns the state's farmers as an array of farmer objects.\nexport const getAllFarmers = ({ farmers }) => (\n  Object.values(farmers)\n);\n\n// Returns the state's farmers as an array of farmer objects,\n// filtered by their name.\nexport const getFilteredFarmers = ({ farmers, filter }) => {\n  const lowerCaseFilter = filter.toLowerCase();\n  return Object.values(farmers).filter(\n    (farmer) => farmer.name.toLowerCase().includes(lowerCaseFilter)\n  );\n};\n\n// Returns the selected farmer object or an empty farmer object\n// if no farmer exists with given id.\nexport const selectFarmer = ({ farmers }, id) => {\n  const nullFarmer = {\n    id: null,\n    name: '',\n    paid: false\n  };\n  return farmers[id] || nullFarmer;\n};\n```\n\n## What you learned\n\nIn this article, you learned how to write a selector to extract and format\ninformation from state stored in a Redux store.\n"
  },
  "success": true
}