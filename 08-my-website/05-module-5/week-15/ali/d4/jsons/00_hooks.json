{
  "template": {
    "taskId": "21db30d0-c2e1-4b83-ae6e-3de0458583c4",
    "name": "Hooks Objectives",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/objectives/reading-hooks-objectives.md",
    "type": "Reading",
    "timeEstimate": 0,
    "urls": [
      "hooks-objectives"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Learning Objectives",
    "body": "\n# Hooks Objectives\n\nNow that you've learned the basic objectives of using React, you should be able\nto gain a fundamental understanding of the React, Redux, and React-Router hooks.\nIn your software engineering career, official documentation will be your friend!\nIt's important to learn how to navigate through official documentation. At the\nend of the readings, you should use your new fundamental understanding of hooks\nto go through the official React Hooks documentation. At the end of this topic's\narticles and lectures you should be able to create function components that use\nstate and other React features.\n\nYou should be able to use React's:\n\n* `useState` hook to manage a component's state.\n* `useState` hook to set a default state, instead of setting the default state\n  in a `constructor()` method.\n* `useState` hook to update state, instead of the `setState()` method.\n* `useEffect` hook to manage _side effect_ operations (i.e. data fetching).\n* `useEffect` hook in replacement of commonly used component lifecycle methods\n  (`componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`).\n* `useEffect` (and the hook's _dependency array_) to optimize an application's\n  performance by skipping `useEffect` calls.\n* `useContext` hook to access a context object, instead of a `Context.Consumer`\n  or the `static contentType` property.\n\nYou should be able to use Redux's:\n\n* `useSelector` hook to access the Redux store's state from within a component\n  (instead of passing a part of state as a prop with the `mapStateToProps`\n  function).\n* `useDispatch` hook to dispatch an action from within a component (instead of\n  passing an thunk action creator function through the `mapDispatchToProps`\n  function). \n\nYou should be able to use React Router's:\n\n* `useParams` hook to match parameters in the current route (instead of\n  accessing the `match.params` prop).\n* `useHistory` hook to navigation from within code (without `<Link>`,\n  `<NavLink>`, or the `history` prop).\n* `useLocation` hook to track url changes.\n* `useRouteMatch` hook to check if the current url matches a path format.\n"
  },
  "success": true
}