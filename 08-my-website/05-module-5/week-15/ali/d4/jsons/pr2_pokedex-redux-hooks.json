{
  "template": {
    "taskId": "3665702d-1d2d-4126-87f5-b4f4e50a47c9",
    "name": "Pokedex Project: Redux Hooks",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-hooks/projects/pokedex-hooks/phase-2-README.md",
    "type": "Project",
    "timeEstimate": 3600,
    "urls": [
      "pokedex--redux-hooks"
    ],
    "topic": "Thursday - Hooks",
    "subtopic": "Projects",
    "body": "\n# Pokedex Hooks Project: Phase 2\n\nAs you might remember from the Redux-based Pokedex project, implementing Redux\nresults in a lot of boilerplate code. Using Redux hooks can help clean up and\nget rid of a lot of boilerplate code. In this phase you will refactor the\nRedux-based project to use React hooks and implement Redux hooks!\n\nBegin by creating a new branch for your Redux-based application:\n\n```sh\ngit checkout -b redux-hooks-app\n```\n\nTake a moment to download the [Redux-based Pokedex hooks starter project]. Make\nsure you are in your new `redux-hooks-app` branch:\n\n```sh\ngit branch\n```\n\nDelete all of your project's current code and move the files of\n`redux-based-pokedex-solution` into your current directory\n(`react-hooks-pokedex-starter`). For example, if both\nproject directories are within the same directory, you can use the `mv` command\nfrom the two project folders' parent directory.\n\n```sh\nmv -v redux-based-pokedex-solution/* react-hooks-pokedex-starter\n```\n\nNow take a moment to commit the start of your Redux-based project:\n\n```sh\ngit add .\ngit commit -m \"Initialize redux hooks starter project\"\n```\n\n## Using Redux hooks to manage application state\n\nIn this phase, you'll be refactoring all your component files to use Redux hooks\ninstead of the `mapStateToProps`, `mapDispatchToProps`, and Redux `connect`\nfunctions. Just like in phase 1, you might hit bugs and break your application\nwhile refactoring your application's components. Make sure to test that your\nrefactored code is working before moving on to refactor the next component. As a\ngeneral overview, you'll be refactoring the code for the following components:\n\n1. `LogoutButton`\n2. `LoginPanel`\n3. `PokemonDetail`\n4. `PokemonForm`\n5. `PokemonBrowser`\n\nThere are two ways you can refactor your project:\n\n1. You can refactor your project to use the `useDispatch` and `useSelector`\n   hooks in a _container_ component.\n2. You can refactor your project to use the `useDispatch` and `useSelector`\n  hooks within the component itself.\n\nYou can choose either method to refactor your project. At this point, you are a\nfull-fledged React developer - it's time for you to start planning your own\nReact code! Talk things through with your partner and decide which way you would\nlike to begin refactoring your project. Remember, as you are using this project\nas practice for implementing Redux hooks, you can always implement Redux hooks\ninto a container component for one component, and then implement Redux hooks\ndirectly in another component for the next component. Just make sure to choose\none method to stick with for your personal React projects!\n\n### Version 1: Using Redux hooks in a container component\n\nIf you chose to use the `useDispatch` and `useSelector` hooks in a _container_\ncomponent, this means you should use a namespace to import actions into each\ncomponent file. For example, in the `LogoutButton.js` file, you currently have\nthe following import statement that imports the `logout` action creator\nfunction:\n\n```js\nimport { logout } from '../actions/authentication';\n```\n\nIn order to remove confusion about whether an invocation of `logout()` is\ninvoking the `logout` prop or the `logout` action creator function, you can\nupdate the import statement for your logout action to use an `AuthAction`\nnamespace:\n\n```js\nimport * as AuthAction from '../actions/authentication';\n```\n\nThis way, you can create a container component to replace what is happening\nunder the hood with the `mapStateToProps`, `mapDispatchToProps`, and `connect`\nfunctions. You can reference the logout action with the `AuthAction` namepsace,\nlike so: `AuthAction.logout`.\n\nBased on the `mapStateToProps` and `mapDispatchToProps` functions in the\n`LogoutButton.js` file, you can tell that the component is accessing Redux by\nreceiving `loggedOut` and `logout` props:\n\n```js\nconst mapStateToProps = state => {\n  return {\n    loggedOut: !state.authentication.token,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogoutButton);\n```\n\nTake a moment to import the `useSelector` and `useDispatch` from the Redux\nlibrary into the file:\n\n```js\nimport { useDispatch, useSelector } from 'react-redux';\n```\n\nNow you'll write a container component that will replace the `mapStateToProps`,\n`mapDispatchToProps`, and `connect` functions! Start by setting up the container\ncomponent that returns the `LogoutButton` component to use the `useDispatch`\nprop. You'll also want to have the `LogoutButton.js` file export the\n`LogoutButtonContainer` component (instead of the higher-order component\nreturned by the `connect` function):\n\n```js\nconst LogoutButtonContainer = () => {\n  const dispatch = useDispatch();\n\n  return <LogoutButton />;\n};\n\nexport default LogoutButtonContainer;\n```\n\n> Feel free to visit the Redux Hooks documentation to view [`useDispatch`\n> examples].\n\nNow that you have the container component and `dispatch` set up, you can pass\ndispatched version of the `logout` action as a prop into the `LogoutButton`\ncomponent:\n\n```js\nconst LogoutButtonContainer = () => {\n  const dispatch = useDispatch();\n  const logout = () => dispatch(AuthAction.logout());\n\n  return <LogoutButton logout={logout} />;\n};\n```\n\nAt this point, the container component is taking care of what the\n`mapDispatchToProps` function took care of! Now let's use the `useSelector` hook\nto take care of what the `mapStateToProps` function took care of:\n\n```js\nconst LogoutButtonContainer = () => {\n  const dispatch = useDispatch();\n  const logout = () => dispatch(AuthAction.logout());\n  const loggedOut = useSelector(state => !state.authentication.token);\n\n  return <LogoutButton logout={logout} />;\n};\n```\n\n> Feel free to visit the Redux Hooks documentation to view [`useSelector`\n> examples].\n\nNow that you've gone over how to create a container component that implements\nRedux Hooks for the `LogoutButton` component, follow the same pattern to\nimplement Redux hooks into container components for your `LoginPanel`,\n`PokemonDetail`, `PokemonForm`, and `PokemonBrowser` components. Feel free to\npractice implementing Redux hooks directly within a component instead!\n\n### Version 2: Using Redux hooks from within a component\n\nIf you chose to use the `useDispatch` and `useSelector` hooks within the\ncomponent itself, you'll need to do some refactoring so that your component\ndoesn't receive any props. Instead of receiving slices of state and dispatchable\naction functions as props, you will use the `useSelector` hook to access a slice\na state from within the component and the `useDispatch` hook to dispatch actions\nfrom within the component.\n\nBased on the `mapStateToProps` and `mapDispatchToProps` functions in the\n`LogoutButton.js` file, you can tell that the component is accessing Redux by\nreceiving `loggedOut` and `logout` props.\n\n```js\nconst mapStateToProps = state => {\n  return {\n    loggedOut: !state.authentication.token,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogoutButton);\n```\n\nTake a moment to import the `useSelector` and `useDispatch` from the Redux\nlibrary into the file.\n\n```js\nimport { useDispatch, useSelector } from 'react-redux';\n```\n\nNow you'll want to remove all the props that the `LogoutButton` receives.\nInstead of receiving props to access the `loggedOut` state and dispatched\n`logout` function, you'll use the `useSelector` and `useDispatch` hook you just\nimported into the file. At this point, your `LogoutButton` component should look\nsomething like this:\n\n```js\nconst LogoutButton = () => {\n  if (loggedOut) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <div id=\"logout-button-holder\">\n      <button onClick={handleClick}>Logout</button>\n    </div>\n  );\n};\n```\n\nNow you'll use Redux hooks within the `LoginButton` component so that you can\nremove the `mapStateToProps`, `mapDispatchToProps`, and `connect` functions!\nInstead of receiving a `loggedOut` prop, you'll use the `useSelector` hook to\naccess the state's `authentication.token`.\n\n```js\nconst LogoutButton = () => {\n  const loggedOut = useSelector(state => !state.authentication.token);\n  \n  // CODE SHORTENED FOR BREVITY\n};\n```\n\n> Feel free to visit the Redux Hooks documentation to view [`useSelector`\n> examples].\n\nNotice how the `logout` thunk action creator function has already been imported\ninto your `LogoutButton.js` file. You'll use `useDispatch` hook to return a\nreference to the `dispatch` function from the Redux store:\n\n```js\nconst dispatch = useDispatch();\n```\n\nThen you can use the `dispatch` function to dispatch the `logout` function:\n\n```js\nconst LogoutButton = () => {\n  const loggedOut = useSelector(state => !state.authentication.token);\n  const dispatch = useDispatch();\n  const handleClick = () => dispatch(logout());\n\n  // CODE SHORTENED FOR BREVITY\n};\n```\n\n> Feel free to visit the Redux Hooks documentation to view [`useDispatch`\n> examples].\n\nLastly, you'll want to remove the `mapStateToProps` and `mapDispatchToProps`\nfunctions from the file, and replace the `connect` function to an export\nstatement that exports the `LoginButton` component by default:\n\n```js\nexport default LoginButton;\n```\n\nNow that you've gone over how to refactor your `LogoutButton` component, follow\nthe same pattern to implement Redux hooks into your `LoginPanel`,\n`PokemonDetail`, `PokemonForm`, and `PokemonBrowser` components. Feel free to\npractice creating a container component that utilizes Redux hooks instead!\n\n### Router hooks: `useParams`\n\nNotice the references to the React Router `match` prop accessed in your\n`PokemonBrowser` and `PokemonDetail` components. Instead of having your\ncomponent take in a `match` prop to access the route parameters, you'll\nimplement the `useParams` prop and use object destructuring to access the\n`pokemonId` parameter in the `PokemonBrowser` component and the `id` parameter\nin the `PokemonDetail` component. Feel free to visit React Router documentation\nto view examples of using the [`useParams` hook].\n\nOnce you have finished refactoring, take a moment to commit your changes to your\n`redux-hooks-app` branch:\n\n```sh\ngit add .\ngit commit -m \"Refactor app to implement redux hooks\"\n```\n\nNow that you have practiced refactoring your application to implement Redux\nhooks, it's time to work on a Context-based project utilizing React's\n`useContext` hook! In the next phase, you'll branch off from your application's\nmain branch to create a new `context-hooks-app` branch for the project.\n\n[useParams]: https://reacttraining.com/blog/react-router-v5-1/#useparams\n[Redux-based Pokedex hooks starter project]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-hooks/projects/pokedex-hooks/starter-redux-based-hooks.zip\n[`useSelector` examples]: https://react-redux.js.org/next/api/hooks#useselector-examples\n[`useDispatch` examples]: https://react-redux.js.org/next/api/hooks#examples\n[`useParams` hook]: https://reactrouter.com/web/api/Hooks/useparams\n"
  },
  "success": true
}