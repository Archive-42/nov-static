{
  "template": {
    "taskId": "7bc5fa43-95ee-4656-a164-75a019269371",
    "name": "Store",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-store-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "store"
    ],
    "topic": "Monday",
    "subtopic": "Projects",
    "body": "\n# Store\n\nThe **store** is the central element of Redux's architecture. It holds the\nglobal **state** of an application. The store is responsible for updating the\nglobal state via its **reducer**, broadcasting state updates via\n**subscription**, and listening for **actions** that tell it when to update the\nstate.\n\nWhen you finish this article, you should be able to:\n\n* Describe the role of the store in the Redux architecture\n* Use the `createStore` method to create an instance of the Redux store\n* Use the `store.dispatch` method to dispatch an action to trigger a state\n  update\n* Use the `store.subscribe` method to listen for state updates\n* Use the `store.getState` method to get the current state\n\n## Creating the store\n\nThe `redux` library provides us with a `createStore()` method, which takes up to\nthree arguments and returns a Redux store.\n\n```js\ncreateStore(reducer, [preloadedState], [enhancer]);\n```\n\n- `reducer` (required) - A reducing function that receives the store's current\n  state and incoming action, determines how to update the store's state, and\n  returns the next state (more on this in a moment).\n- `preloadedState` (optional) - An `object` representing any application state\n  that existed before the store was created.\n- `enhancer` (optional) - A `function` that adds extra functionality to the\n  store.\n\n> You'll learn more about how to use the `preloadedState` and `enhancer`\n> parameters later in this lesson. For now you'll focus on creating a store with\n> just the single required `reducer` parameter. \n\nHere is an example of how to create a store for a Fruit Stand application:\n\n```js\nimport { createStore } from 'redux';\n\nconst fruitReducer = (state = [], action) => {\n  // TODO implement reducer\n}\n\nconst store = createStore(fruitReducer);\n```\n\nA Redux application will typically only have a single store. You'll implement\nthe `reducer` function in just a bit.\n\n## Store API\n\nA Redux store is just an object that holds the application state, wrapped in a\nminimalist API. The store has three methods: `getState()`, `dispatch(action)`,\nand `subscribe(callback)`.\n\n### Store methods\n\n- `getState()` - Returns the store's current state.\n- `dispatch(action)` - Passes an `action` into the store's `reducer` telling it\n  what information to update.\n- `subscribe(callback)` - Registers a callback to be triggered whenever the\n  store updates. Returns a function, which when invoked, unsubscribes the\n  callback function from the store.\n\n## Updating the store\n\nStore updates can only be triggered by dispatching **actions**:\n\n```js\nstore.dispatch(action);\n```\n\nAn `action` in Redux is just a plain object with:\n\n- a `type` key indicating the action being performed, and\n- optional payload keys containing any new information.\n\nFor example, the store for your Fruit Stand application would handle the\ninventory. You would use the following `addOrange` action to add an orange to\nthe store's state. Notice how it has a `type` of 'ADD_FRUIT' and a `fruit`\npayload of 'orange':\n\n```js\nconst addOrange = {\n  type: 'ADD_FRUIT',\n  fruit: 'orange',\n};\n```\n\nWhen `store.dispatch()` is called, the store passes its current `state`, along\nwith the `action` being dispatched, to the `reducer`. The `reducer` function\ntakes the two arguments (`state` and `action`) and returns the next `state`.\nYou'll read more about the `reducer` in just a bit, but for now, think of it as\na Redux app's traffic cop, routing new information to its rightful place in the\nstate.\n\nA `reducer` for the Fruit Stand application looks like this:\n\n```js\nconst fruitReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_FRUIT':\n      return [...state, action.fruit];\n    default:\n      return state;\n  }\n};\n```\n\nThe reducer's `state` parameter provides a default value; this is the **initial\nstate** of our store prior to any actions. In this case, it's an empty array. In\nRedux, [**the state is immutable**][why-immutable], so the reducer must return a\n**new array or object** whenever the state changes.\n\nNow that you've defined your app's reducing function, you can now `dispatch` the\n`addOrange` action to the store:\n\n```js\nconsole.log(store.getState()); // []\nstore.dispatch(addOrange);\nconsole.log(store.getState()); // [ 'orange' ]\n```\n\n## Subscribing to the store\n\nOnce the store has processed a `dispatch()`, it triggers all its subscribers.\nSubscribers are callbacks that can be added to the store via `subscribe()`.\n\nYou can define a callback `display` and subscribe it to the store:\n\n```js\nconst display = () => {\n  console.log(store.getState());\n};\n\nconst unsubscribeDisplay = store.subscribe(display);\n\nstore.dispatch(addOrange); // [ 'orange', 'orange' ]\n\n// display will no longer be invoked after store.dispatch()\nunsubscribeDisplay();\n\nstore.dispatch(addOrange); // no output\n```\n\nIn the example above, the store processed the dispatched action and then called\nall of its subscribers in response. The only subscriber is your `display`\ncallback which logs the current state when called.\n\n> Later in this lesson, you'll learn how to use the `store.subscribe()` method\n> to connect a React component to the store so that it can listen for global\n> state updates.\n\n## Reviewing a simple example\n\nLater in this lesson, you'll see how to use Redux with React and how to organize\nyour Redux code into separate modules, but for now to keep things as simple as\npossible, you'll put everything into a single file and use Node.js to run your\napplication.\n\nHere's an `app.js` file that brings together all of the above code snippets into\na single example:\n\n```js\n// app.js\n\nconst { createStore } = require('redux');\n\n// Define the store's reducer.\nconst fruitReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_FRUIT':\n      return [...state, action.fruit];\n    default:\n      return state;\n  }\n};\n\n// Create the store.\nconst store = createStore(fruitReducer);\n\n// Define an 'ADD_FRUIT' action for adding an orange to the store.\nconst addOrange = {\n  type: 'ADD_FRUIT',\n  fruit: 'orange',\n};\n\n// Log to the console the store's state before and after\n// dispatching the 'ADD_FRUIT' action.\nconsole.log(store.getState()); // []\nstore.dispatch(addOrange);\nconsole.log(store.getState()); // [ 'orange' ]\n\n// Define and register a callback to listen for store updates\n// and console log the store's state.\nconst display = () => {\n  console.log(store.getState());\n};\nconst unsubscribeDisplay = store.subscribe(display);\n\n// Dispatch the 'ADD_FRUIT' action. This time the `display` callback\n// will be called by the store when its state is updated.\nstore.dispatch(addOrange); // [ 'orange', 'orange' ]\n\n// Unsubscribe the `display` callback to stop listening for store updates.\nunsubscribeDisplay();\n\n// Dispatch the 'ADD_FRUIT' action one more time\n// to confirm that the `display` method won't be called\n// when the store state is updated.\nstore.dispatch(addOrange); // no output\n```\n\nTo run the above example, use npm to initialize the project (`npm init -y`) and\nto install Redux (`npm install redux`). Then use the command `node app.js` to\nrun the example. You should see the following output:\n\n```sh\n[]\n[ 'orange' ]\n[ 'orange', 'orange' ]\n```\n\n## What you learned\n\nIn this article, you learned about the role of the store in the Redux\narchitecture. You saw how to use the `createStore` method to create a store\ninstance, the `store.dispatch` method to dispatch an action to trigger a state\nupdate, the `store.subscribe` method to listen for state updates, and\n`store.getState` method to get the current state.\n\n## See also...\n\nTo learn more about the store, see the official [Redux\ndocumentation][redux-js-store].\n\n[why-immutable]: https://github.com/reactjs/redux/issues/758\n[redux-js-store]: http://redux.js.org/docs/basics/Store.html\n"
  },
  "success": true
}