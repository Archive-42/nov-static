{
  "template": {
    "taskId": "e37d101f-d89a-424a-8bc3-04bd8eae457c",
    "name": "Flux and Redux",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-flux-and-redux-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "flux-and-redux"
    ],
    "topic": "Monday",
    "subtopic": "Projects",
    "body": "\n# Flux and Redux\n\nRedux is an evolution of the concepts introduced by Flux. Having a general\nunderstanding of Flux will assist you in learning Redux.\n\nWhen you finish this article, you should be able to:\n\n* Describe the relationship between Redux and Flux\n* Describe the three principles that Redux abides by\n* Describe the Redux data cycle\n\n## What is Flux?\n\nFlux is a front-end application architecture Facebook developed to use with\nReact. Flux is not a library or framework. Flux is simply a pattern in which to\nstructure one’s application. It doesn’t even need to be used with React! Flux\nprovides unidirectional data flow, which affords more predictability than one\nmight encounter when using other application design patterns.\n\n![flux]\n\n### Actions\n\nAn action begins the flow of data in Flux. An action is a simple object that at\na minimum contains a `type`. An action’s `type` indicates the type of change to\nbe performed on the application’s state. An action may contain additional data\n(the \"payload\") that’s necessary for changing the application’s former state to\nits next one.\n\n### Dispatcher\n\nThe dispatcher is a mechanism for distributing (or \"dispatching\") actions to a\nFlux application’s store. The dispatcher is little more than a registry of\ncallback functions into the store. Redux (the implementation of Flux we’ll use\nat App Academy) consolidates the dispatcher into a single `dispatch()` function.\n\n### Store\n\nThe store represents the entire state of the application. It’s also responsible\nfor updating the state of the application appropriately whenever it receives an\naction. It does so by registering with the dispatcher a callback function that\nreceives an action. This callback function uses the action’s type to invoke the\nproper function to change the application’s state. After the store has changed\nstate, it “emits a change,” i.e. the store passes the new state to any views\n(explanation incoming) that have registered listeners (callbacks) to it.\n\n### View\n\nA view is a unit of code that’s responsible for rendering the user interface. To\ncomplete the Flux pattern, a view listens to change events emitted by the store.\nWhen a change to the application’s data layer occurs, a view can respond\nappropriately, such as by updating its internal state and triggering a\nre-render.\n\nA view can create actions itself, e.g. in user-triggered events. If a user marks\na todo as complete, a view might call a function that would dispatch an action\nto toggle the todo’s state. Creating an action from the view turns our Flux\npattern into a unidirectional loop.\n\n![flux-loop]\n\nHere the original action might (for example) result from an asynchronous request\nto fetch todos from the database with a success callback to dispatch our action\nto receive those todos and update the application’s state accordingly. It's a\ncommon pattern in Flux to dispatch an action that populates the initial state of\nthe application, with further modifications coming from the client.\n\n## Redux\n\nRedux is a library (distributed as an npm package) that facilitates a particular\nimplementation of Flux. A Redux loop behaves slightly differently than a vanilla\nFlux loop, but the general concepts remain the same. Redux abides by three\nprinciples:\n\n1. **Single Source of Truth**: The entire state of the application is stored in\n   a single JavaScript object in a single store. This object is commonly\n   referred to as a “state tree” because its values often contain or are objects\n   themselves.\n2. **State is Read-Only**: The only way to change the state is to dispatch an\n   action. This principle ensures that our Redux loop is never short-circuited\n   and change of state remains single-threaded.\n3. **Only Pure Functions Change State**: Pure functions known as “reducers”\n   receive the previous state and an action and return the next state. They\n   return new state objects instead of mutating previous state. Read\n   [more][pure-functions] about what makes a function pure.\n\n![redux-loop]\n\nAs you've probably already surmised, `React` will be our view layer.\n\n> **Note:** Middleware is an ecosystem of utilities that augments the\n> functionality of `dispatch()`. Among other things, it allows for asynchronous\n> requests in a Redux application.\n\nYou'll learn more about each part in the Redux loop in this lesson.\n\n## What you learned\n\nIn this article, you learned about the relationship between Redux and Flux. You\nalso learned about the three principles that Redux abides by and the Redux data\ncycle.\n\n[redux-loop]: https://assets.aaonline.io/fullstack/react/assets/redux.gif\n[pure-functions]: https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.lfv7bgqco\n[flux-loop]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/fullstack/react/assets/flux-loop.png\n[flux]: https://s3.amazonaws.com/lecture-assets/redux-flux.png\n"
  },
  "success": true
}