{
  "template": {
    "taskId": "cf66ff5a-9a7f-4122-9492-695f8ed33e34",
    "name": "Actions",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-actions-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "actions"
    ],
    "topic": "Monday",
    "subtopic": "Projects",
    "body": "\n# Actions\n\nAs you've already learned from an earlier article, **actions** are the only way\nto trigger changes to the store's state. Remember, actions are simple POJOs with\na mandatory `type` key and optional payload keys containing new information.\nThey get sent using `store.dispatch()` and are the primary drivers of the Redux\nloop.\n\nWhen you finish this article, you should be able to:\n\n* Write an action creator function to facilitate in the creation of action\n  objects\n* Use constants to define action types to prevent simple typos in action type\n  string literals\n\n## Using action creators\n\nWhen an action is dispatched, any new state data must be passed along as the\n**payload**. The example below passes a payload key of `fruit` with the new\nstate data, 'orange':\n\n```js\nconst addOrange = {\n  type: 'ADD_FRUIT',\n  fruit: 'orange',\n};\n\nstore.dispatch(addOrange);\nconsole.log(store.getState()); // [ 'orange' ]\n```\n\nHowever, when these action payloads are generated dynamically, it becomes\nnecessary to extrapolate the creation of the action object into a function.\nThese functions are called **action creators**. The JavaScript objects they\nreturn are the **actions**. To initiate a dispatch, you pass the result of\ncalling an action creator to `store.dispatch()`.\n\nFor example, an action creator function to create 'ADD_FRUIT' actions looks like\nthis:\n\n```js\nconst addFruit = (fruit) => {\n  return {\n    type: 'ADD_FRUIT',\n    fruit,\n  };\n};\n```\n\nYou can also rewrite the above arrow function to use an implicit return value:\n\n```js\nconst addFruit = (fruit) => ({\n  type: 'ADD_FRUIT',\n  fruit,\n});\n```\n\n> While either approach for defining action creators using arrow functions\n> works, the latter approach of using an implicit return value makes it more\n> difficult to debug the Redux cycle (you'll see why later in this lesson).\n\nNow we can add any `fruit` to the store using our action creator\n`addFruit(fruit)`, instead of having to define an action object for each fruit:\n\n```js\nstore.dispatch(addFruit('apple'));\nstore.dispatch(addFruit('strawberry'));\nstore.dispatch(addFruit('lychee'));\nconsole.log(store.getState()); // [ 'orange', 'apple', 'strawberry', 'lychee' ]\n```\n\n## Preventing typos in action type string literals\n\nUpdate your actions to include `'ADD_FRUIT'`, `'ADD_FRUITS'`, `'SELL_FRUIT'`,\nand `'SELL_OUT'`:\n\n```js\nconst ADD_FRUIT = 'ADD_FRUIT';\nconst ADD_FRUITS = 'ADD_FRUITS';\nconst SELL_FRUIT = 'SELL_FRUIT';\nconst SELL_OUT = 'SELL_OUT';\n\nconst addFruit = (fruit) => ({\n  type: ADD_FRUIT,\n  fruit,\n});\n\nconst addFruits = (fruits) => ({\n  type: ADD_FRUITS,\n  fruits,\n});\n\nconst sellFruit = (fruit) => ({\n  type: SELL_FRUIT,\n  fruit,\n});\n\nconst sellOut = () => ({\n  type: SELL_OUT,\n});\n```\n\nNotice that constants were used for all of the fruit action types. This prevents\nsimple typos in the reducer's case clauses (i.e. `'ADD_FRIUT'`) from\nunexpectedly not matching the appropriate action type (i.e. `'ADD_FRUIT'`).\nCreating constants for the action type string literals ensures that an error is\nthrown if the constant name is mistyped.\n\n## Reviewing a completed Fruit Stand example\n\nTo review and run a completed Fruit Stand example application, clone the\n[redux-fruit-stand-examples] repo.\n\nAfter cloning the repo, open a terminal and browse to the `fruit-stand-redux`\nfolder. Run the command `npm install` to install the project's dependencies.\nThen use the command `node app.js` to run the Fruit Stand application. You\nshould see the following output:\n\n```sh\nDefault Redux Store (empty fruit list):\n[]\nRedux Store:\n[ 'orange', 'apple' ]\nRedux Store:\n[ 'orange', 'apple', 'orange', 'lychee', 'grapefruit' ]\nUpdated Redux Store:\n[ 'orange', 'orange', 'lychee', 'grapefruit' ]\nReset Redux Store (empty fruit list):\n[]\n```\n\nThe `reduxSAR.js` file contains the action types, reducer, store, and action\ncreator functions. The `app.js` file contains the code that interacts with the\nRedux store. The `appWithSubscription.js` file also contains code that interacts\nwith the store but subscribes a callback function (using the `store.subscribe`\nmethod) to listen for and log state updates to the console.\n\n## What you learned\n\nIn this article, you learned how to write an action creator function to\nfacilitate in the creation of action objects. You also learned how to use\nconstants to define action types to prevent simple typos in action type string\nliterals.\n\n## See also...\n\nTo learn more about actions, see the official [Redux\ndocumentation][redux-js-actions].\n\n[redux-js-actions]: http://redux.js.org/docs/basics/Actions.html\n[redux-fruit-stand-examples]: https://github.com/appacademy-starters/redux-fruit-stand-examples\n"
  },
  "success": true
}