{
  "template": {
    "taskId": "8dbfb43f-436b-4656-9045-86f55d479eb2",
    "name": "Redux Part 1 Learning Objectives",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/objectives/reading-redux-part-1-objectives.md",
    "type": "Reading",
    "timeEstimate": 0,
    "urls": [
      "redux-part-1-objectives"
    ],
    "topic": "Monday",
    "subtopic": "Learning Objectives",
    "body": "\n# Redux Learning Objectives: Part 1\n\nYou've been using React's Context API to manage global state to share the same\ninformation across multiple components. Redux, like Context, gives you a way to\nstore and manage global state in your React applications. Even though Context\nhas become a popular option since its introduction, Redux remains a popular\noption for projects with sophisticated global state requirements.\n\nAfter reading and practicing how to use Redux, you should be able to:\n\n* Describe the Redux data cycle\n* Describe the role of the store in the Redux architecture\n* Explain what a _reducer_ is\n* Use the `createStore` method to create an instance of a Redux store\n* Use the `store.dispatch` method to dispatch an action to trigger a state\n  update\n* Use the `store.subscribe` method to listen for state updates\n* Use the `store.getState` method to get the current state\n* Use a `switch` statement within a reducer function to handle multiple action\n  types\n* Describe why it's important for a reducer to avoid mutating the current state\n  when creating the next state\n* Write an action creator function to facilitate in the creation of action\n  objects\n* Use constants to define action types to prevent simple typos in action type\n  string literals\n"
  },
  "success": true
}