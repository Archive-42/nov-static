{
  "template": {
    "taskId": "308d861f-9c7e-4e17-bae2-e1d5afe2b6c4",
    "name": "Freezing Objects",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-freezing-objects-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "freezing-objects"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "\n# Freezing Objects\n\nAs you learned earlier in this lesson, a reducer must never mutate its\narguments. If the state changes, the reducer must return a new object.\n\nJavaScript provides us with an easy way to enforce this.\n[`Object.freeze`][mdn-obj-freeze] prevents new properties from being added to an\nobject, and also prevents properties currently on an object from being altered\nor deleted. Essentially, it renders an object immutable, which is exactly what\nyou want.\n\nWhen you finish this article, you should be able to use `Object.freeze` to\nprevent the current state within a reducer from being mutated.\n\n## Using `Object.freeze` to prevent state mutations\n\nBy calling `Object.freeze(state)` at the top of every reducer, you can ensure\nthat the state is never accidentally mutated. For example, this is what your\nfarmer reducer from the Fruit Stand application would look like:\n\n```js\nconst farmersReducer = (state = {}, action) => {\n  Object.freeze(state);\n  let nextState = Object.assign({}, state);\n  switch (action.type) {\n    case HIRE_FARMER:\n      const farmerToHire = {\n        id: action.id,\n        name: action.name,\n        paid: false\n      };\n      nextState[action.id] = farmerToHire;\n      return nextState;\n    case PAY_FARMER:\n      const farmerToPay = nextState[action.id];\n      farmerToPay.paid = !farmerToPay.paid;\n      return nextState;\n    default:\n      return state;\n  }\n};\n```\n\nNow you can be certain that you won't accidentally mutate the state within the\nreducer.\n\n### Understanding the difference between deep and shallow freezes\n\nHere's another example:\n\n```js\nconst people = { farmers: { name: 'Old MacDonald' } };\nObject.freeze(people);\n```\n\nWhen you try to mutate an object that you _froze_ by modifying a property, it\nwill be prevented:\n\n```js\npeople.farmers = { name: 'Young MacDonald' };\npeople; // { farmers: { name: 'Old MacDonald' } }\n```\n\n**Note: This is not a _deep freeze_.** `Object.freeze` performs a _shallow\nfreeze_ as it only applies to the immediate properties of the object itself.\nNested objects can still be mutated, so be careful. Here's an example of this:\n\n```js\npeople.farmers.name = 'Young MacDonald';\npeople; // { farmers: { name: 'Young MacDonald' } }\n```\n\n### `Object.freeze` and arrays\n\nYou can also use `Object.freeze` to freeze an array, so if a reducer's `state`\nparameter is an array, you can still prevent accidental state mutations:\n\n```js\nconst fruitReducer = (state = [], action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case ADD_FRUIT:\n      return [...state, action.fruit];\n    case ADD_FRUITS:\n      return [...state, ...action.fruits];\n    case SELL_FRUIT:\n      const index = state.indexOf(action.fruit);\n      if (index !== -1) {\n        // remove first instance of action.fruit\n        return [...state.slice(0, index), ...state.slice(index + 1)];\n      }\n      return state; // if action.fruit is not in state, return previous state\n    case SELL_OUT:\n      return [];\n    default:\n      return state;\n  }\n};\n```\n\nWhen an array is frozen with `Object.freeze`, its elements cannot be altered and\nno elements can be added to or removed from the array. Just like with objects,\nfreezing arrays has limitations. If the array's elements containing objects,\nproperties on those objects can still be mutated.\n\n## What you learned\n\nIn this article, you learned how to use `Object.freeze` to prevent the current\nstate within a reducer from being mutated.\n\n[mdn-obj-freeze]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n"
  },
  "success": true
}