{
  "template": {
    "taskId": "7d961348-c5d9-4a88-a86b-a52274cc3853",
    "name": "Using Redux with React",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-using-redux-with-react-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "using-redux-with-react"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "\n# Using Redux with React\n\nTo keep things as simple as possible when initially learning Redux, you started\nwith using Redux independent of React. Now it's time to learn how to use Redux\nwithin a React application!\n\nWhen you finish this article, you should be able to:\n\n* Add Redux actions, reducer(s), and a store to a React project\n* Update a React class component to subscribe to a Redux store to listen for\n  state changes\n* Update a React component to dispatch actions to a Redux store\n\n## Integrating Redux into a React application\n\nThe techniques shown in this article for integrating Redux into a React\napplication, is just one step in your journey to learn Redux. As you work your\nway through this lesson, you'll learn how to improve upon these techniques to\nimprove the organization or your code, the design of your components, and the\noverall performance of your application.\n\nIn general, the steps to integrate Redux into an existing React application are:\n\n* Set up Redux\n  * Install the `redux` npm package\n  * Define your actions\n  * Define your reducer(s)\n  * Create your store\n* Update components\n  * Use `store.subscribe` to listen for state updates\n  * Call `store.getState` to retrieve state for rendering\n  * Call `store.dispatch` to dispatch actions to the store\n\n> **Note:** You'll start with writing all of the code to interact with the store\n> within each component that needs to render state from the store or to dispatch\n> actions. Later on, you'll learn how to improve the overall design of your\n> application by using container components. Eventually, you'll learn how to use\n> the [React-Redux][react-redux] library's `connect` method to avoid writing\n> container components by hand.\n\n## Organizing your Redux code\n\nInstead of placing all of your Redux related code into a single file, you'll\nseparate your store, reducer, and actions into their own files.\n\nThere are a variety of acceptable ways to organize your Redux code within a\nReact project. When starting out with using Redux, organizing your code by type\n(i.e. separate files or folders for the store, reducers, and actions) often\nfeels natural and makes it easy to find the file that you need to make a change\nto. As your projects increase in size and complexity, you might find that\norganizing your files by feature (i.e. locating all the files related to a\nfeature inside of a single folder) will keep you from searching and jumping\naround a project that contains hundreds of files.\n\n> **Note:** How a project is organized is highly dependent upon who is working\n> on the project. It's also not unusual for the organization of a project to\n> evolve and change throughout its lifetime. Don't struggle too much with\n> deciding on an approach when getting starting a new project. Pick an approach\n> and move on to getting work done!\n\n### Following along\n\nIf you'd like to follow along, clone the [react-fruit-stand-with-react-starter]\nrepo.\n\nAfter cloning the repo, open a terminal and browse to the `starter` folder\nwithin the repo. Run the command `npm install` to install the project's\ndependencies (the `redux` package is already listed as a dependency). Then use\nthe command `npm start` to run the Fruit Stand application.\n\nThis Fruit Stand example application is a React application created by the\nCreate React App tooling. When running the application using `npm start`, the\napplication should automatically open in your default browser. If it doesn't,\nyou can manually browse to `http://localhost:3000/` to view the application.\n\n### Adding the actions\n\nWithin the React project's `src` folder, add a folder named `actions`. Within\nthat folder, add a file named `fruitActions.js` containing the following code:\n\n```js\n// ./src/actions/fruitActions.js\n\nexport const ADD_FRUIT = 'ADD_FRUIT';\nexport const ADD_FRUITS = 'ADD_FRUITS';\nexport const SELL_FRUIT = 'SELL_FRUIT';\nexport const SELL_OUT = 'SELL_OUT';\n\nexport const addFruit = (fruit) => ({\n  type: ADD_FRUIT,\n  fruit,\n});\n\nexport const addFruits = (fruits) => ({\n  type: ADD_FRUITS,\n  fruits,\n});\n\nexport const sellFruit = (fruit) => ({\n  type: SELL_FRUIT,\n  fruit,\n});\n\nexport const sellOut = () => ({\n  type: SELL_OUT,\n});\n```\n\n### Adding the reducer\n\nWithin the React project's `src` folder, add a folder named `reducers`. Within\nthat folder, add a file named `fruitReducer.js` containing the following code:\n\n```js\n// ./src/components/fruitReducer.js\n\nimport {\n  ADD_FRUIT,\n  ADD_FRUITS,\n  SELL_FRUIT,\n  SELL_OUT,\n} from '../actions/fruitActions';\n\nconst fruitReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_FRUIT:\n      return [...state, action.fruit];\n    case ADD_FRUITS:\n      return [...state, ...action.fruits];\n    case SELL_FRUIT:\n      const index = state.indexOf(action.fruit);\n      if (index !== -1) {\n        // remove first instance of action.fruit\n        return [...state.slice(0, index), ...state.slice(index + 1)];\n      }\n      return state; // if action.fruit is not in state, return previous state\n    case SELL_OUT:\n      return [];\n    default:\n      return state;\n  }\n};\n\nexport default fruitReducer;\n```\n\n### Adding the store\n\nWithin the React project's `src` folder, add a file named `store.js` containing\nthe following code:\n\n```js\n// ./src/store.js\n\nimport { createStore } from 'redux';\nimport fruitReducer from './reducers/fruitReducer';\n\nconst store = createStore(fruitReducer);\n\nexport default store;\n```\n\n## Writing Redux aware React components\n\n**Remember that the integration techniques shown in this article are just a\nstarting point with using Redux with React components.** As you work your way\nthrough this lesson, you'll learn how to improve upon these techniques.\n\n### Listening for state changes\n\nComponents that need to render state from the store can use the\n`store.subscribe` method to subscribe to listen for state updates. When a state\nupdate occurs, the [`forceUpdate`][react-forceupdate] method is called to render\nthe component. Within the component's `render` method, the `store.getState`\nmethod is called to retrieve the current state. This approach ensures that\nwhenever state is updated in the store (after the reducer has processed a\ndispatched action), the component will retrieve and render the updated state.\n\n> **Note:** Calling `forceUpdate` causes `render` to be called without first\n> calling `shouldComponentUpdate`. Child components will go through their normal\n> lifecycle, including calling `shouldComponentUpdate` to determine if the child\n> component should render. While this pattern works, it's a rather blunt\n> instrument for complex components, since re-rendering a parent causes\n> re-rendering of all its children. Later in this lesson, you'll learn how the\n> [React-Redux][react-redux] library solves this problem.\n\nThe `componentDidMount` and `componentWillUnmount` class component lifecycle\nmethods can be used to ensure that the component _subscribes_ to the store when\nit's mounted and _unsubscribes_ from the store when the component is about to be\nunmounted:\n\n```js\n// ./src/components/FruitList.js\n\nimport React from 'react';\nimport store from '../store';\n\nclass FruitList extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    const fruit = store.getState();\n\n    return (\n      <div>\n        {fruit.length > 0\n          ? <ul>{fruit.map((fruitName, index) => <li key={index}>{fruitName}</li>)}</ul>\n          : <span>No fruit currently in stock!</span>\n        }\n      </div>\n    );\n  }\n}\n\nexport default FruitList;\n```\n\n### Dispatching actions\n\nUpdating a component to dispatch an action to the store is a bit simpler overall\nthan listening for and rendering state updates. You just need to import the\nappropriate action creator function and use the `store.dispatch` method within a\nevent handler to dispatch the action:\n\n```js\n// ./src/components/FruitQuickAdd.js\n\nimport React from 'react';\nimport store from '../store';\nimport { addFruit } from '../actions/fruitActions';\n\nclass FruitQuickAdd extends React.Component {\n  addFruitClick = (event) => {\n    const fruit = event.target.innerText;\n    store.dispatch(addFruit(fruit));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Quick Add</h3>\n        <button onClick={this.addFruitClick}>APPLE</button>\n        <button onClick={this.addFruitClick}>ORANGE</button>\n      </div>  \n    );\n  }\n}\n\nexport default FruitQuickAdd;\n```\n\n### Listening for state changes and dispatching actions\n\nSometimes components need to listen for and render state updates _and_ dispatch\nactions to the store. The `FruitSeller` component listens for state updates so\nthat it can render a collection of buttons--one for each distinct fruit\navailable in the fruit stand. The component also handles button clicks to\ndispatch an action to sell a fruit or to sell out all of the fruits.\n\nHere's what the component looks like:\n\n```js\n// ./src/components/FruitSeller.js\n\nimport React from 'react';\nimport store from '../store';\nimport { sellFruit, sellOut } from '../actions/fruitActions';\n\nclass FruitSeller extends React.Component {\n  sellFruitClick = (event) => {\n    const fruit = event.target.innerText;\n    store.dispatch(sellFruit(fruit));\n  }\n\n  sellOutClick = () => {\n    store.dispatch(sellOut());\n  }\n\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    const fruit = store.getState();\n    const distinctFruit = Array.from(new Set(fruit)).sort();\n\n    if (distinctFruit.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3>Sell</h3>\n        {distinctFruit.map((fruitName, index) => (\n          <button key={index} onClick={this.sellFruitClick}>{fruitName}</button>\n        ))}\n        <button onClick={this.sellOutClick}>SELL OUT</button>\n      </div>\n    );\n  }\n}\n\nexport default FruitSeller;\n```\n\nThe `FruitSeller` component is sort of a mash up of the `FruitList` and\n`FruitQuickAdd` components!\n\n### Practicing on your own\n\nThere's just one component left to implement: `BulkAdd`. This is the perfect\nchance to get a bit of practice on your own to help you cement what you're\nlearned in this article.\n\n## Reviewing a completed Fruit Stand example\n\nTo review and run a completed Fruit Stand example application that uses React\nwith Redux, clone the [redux-fruit-stand-examples] repo.\n\nAfter cloning the repo, open a terminal and browse to the\n`fruit-stand-redux-with-react` folder. Run the command `npm install` to install\nthe project's dependencies. Then use the command `npm start` to run the Fruit\nStand application.\n\nThis Fruit Stand example application is a React application created by the\nCreate React App tooling. When running the application using `npm start`, the\napplication should automatically open in your default browser. If it doesn't,\nyou can manually browse to `http://localhost:3000/` to view the application.\n\n## What you learned\n\nIn this article, you learned how to add Redux actions, reducer(s), and a store\nto a React project. You also learned how to update a React class component to\nsubscribe to a Redux store to listen for state changes and to dispatch actions\nto a Redux store.\n\n[react-redux]: https://react-redux.js.org/\n[react-fruit-stand-with-react-starter]: https://github.com/appacademy-starters/redux-fruit-stand-with-react-starter\n[react-forceupdate]: https://facebook.github.io/react/docs/component-api.html#forceupdate\n[redux-fruit-stand-examples]: https://github.com/appacademy-starters/redux-fruit-stand-examples\n"
  },
  "success": true
}