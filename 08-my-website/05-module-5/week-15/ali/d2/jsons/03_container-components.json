{
  "template": {
    "taskId": "5d908679-53be-4ba3-a988-81fd1d9bba6d",
    "name": "Container Components",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/redux/readings-v2/reading-container-components-js.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "container-components"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "\n# Container Components\n\nAs you saw in an earlier article, there can be quite a bit of code involved in\nconnecting a component to the store. Putting all this code into the component\nwith heavy rendering logic tends to cause bloated components and violates the\nprinciple of [separation of concerns][wikipedia-separation-of-concerns].\nTherefore, it's a common pattern in Redux code to separate **presentational\ncomponents** from their connected counterparts, called **containers**.\n\nWhen you finish this article, you should be able to:\n\n* Describe how container components differ from presentational components\n* Write a container component to handle all of the Redux store interaction for\n  one or more presentational components\n\n## Comparing presentational and container components\n\nThe distinction between presentational components and containers is not\ntechnical but rather functional. Presentational components are concerned with\nhow things look and container components are concerned with how things work.\n\nHere's a table outlining the differences:\n\n|                | Presentational                   | Container                                      |\n| -------------- | -------------------------------- | ---------------------------------------------- |\n| Purpose        | How things look (markup, styles) | How things work (data fetching, state updates) |\n| Aware of Redux | No                               | Yes                                            |\n| To Read Data   | Read data from `props`           | Subscribe to Redux state                       |\n| To Change Data | Invoke callbacks from `props`    | Dispatch Redux actions                         |\n\n> **Note:** You'll start with writing all of the code for your container\n> components by hand. Later in this lesson, you'll learn how to create container\n> components using the [React-Redux][react-redux] library's `connect` method.\n\n## Determining where to create containers\n\nNot every component needs to be connected to the store. Generally, you'll only\nwant to create containers for the 'big' components in your app that represent\nsections of a page and contain smaller purely functional presentational\ncomponents. These larger container components are responsible for interacting\nwith the store and passing state and dispatch props down to all their\npresentational children.\n\nFor the Fruit Stand application, a good starting point would be to create two\ncontainer components, `FruitManagerContainer` and `FarmerManagerContainer`, to\nrespectively render the presentational components for the \"Fruit\" and \"Farmers\"\nsections of the page. Here's a visual representation of that component\nhierarchy:\n\n```\nApp\n├── FruitManagerContainer\n│   └── FruitManager\n│       ├── FruitList\n│       ├── FruitSeller\n│       ├── FruitQuickAdd\n│       └── FruitBulkAdd\n└── FarmerManagerContainer\n    └── FarmerManager\n        ├── FarmerList\n        │   └── Farmer\n        └── FarmerHire\n```\n\nNotice that the container component names are a combination of the name of the\npresentational component that they wrap and the suffix \"Container\".\n\nIn general, aim to have fewer containers rather than more. Most of the\ncomponents you'll write will be presentational, but you'll need to generate a\nfew containers to connect presentational components to the Redux store.\n\n## Writing a container component\n\nWhile you can write a container component from scratch, you can also refactor an\nexisting React component that interacts with a Redux store into separate\ncontainer and presentational components.\n\n### Using a container component to retrieve state\n\nHere's the current version of the `FruitList` component that subscribes to the\nstore (using `store.subscribe`) to know when state has been updated and calls\n`store.getState` to retrieve and render the `fruit` state slice:\n\n```js\n// ./src/components/FruitList.js\n\nimport React from 'react';\nimport store from '../store';\n\nclass FruitList extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    const { fruit } = store.getState();\n\n    return (\n      <div>\n        {fruit.length > 0\n          ? <ul>{fruit.map((fruitName, index) => <li key={index}>{fruitName}</li>)}</ul>\n          : <span>No fruit currently in stock!</span>\n        }\n      </div>\n    );\n  }\n}\n\nexport default FruitList;\n```\n\nThe `FruitManager` component is responsible for rendering each of the\nfruit-related components (i.e. `FruitList`, `FruitSeller`, `FruitQuickAdd`, and\n`FruitBulkAdd`), so create a container component named `FruitManagerContainer`\nto handle all of the store interaction for the \"Fruit\" section of the page.\n\nTo review, here's what the component hierarchy will look like:\n\n```\nFruitManagerContainer\n└── FruitManager\n    ├── FruitList\n    ├── FruitSeller\n    ├── FruitQuickAdd\n    └── FruitBulkAdd\n```\n\nAs a starting point, here's the code for the `FruitManagerContainer` component:\n\n```js\n// ./src/components/FruitManagerContainer.js\n\nimport React from 'react';\nimport store from '../store';\nimport FruitManager from './FruitManager';\n\nclass FruitManagerContainer extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    const { fruit } = store.getState();\n\n    return (\n      <FruitManager fruit={fruit} />\n    );\n  }\n}\n\nexport default FruitManagerContainer;\n```\n\nNotice that the container component, just like the original version of the\n`FruitList` component, subscribes to the store (using `store.subscribe`) to know\nwhen state has been updated and calls `store.getState` to retrieve the `fruit`\nstate slice. But instead of directly rendering the `fruit` state, it sets a prop\non the `FruitManager` component to pass the state down the component hierarchy.\n\nThe `FruitManager` component receives the `fruit` prop and in turn uses a prop\nto pass it down to the `FruitList` component:\n\n```js\n// ./src/components/FruitManager.js\n\nimport React from 'react';\nimport FruitList from './FruitList';\nimport FruitSeller from './FruitSeller';\nimport FruitQuickAdd from './FruitQuickAdd';\nimport FruitBulkAdd from './FruitBulkAdd';\n\nconst FruitManager = ({ fruit }) => {\n  return (\n    <div>\n      <h2>Available Fruit</h2>\n      <FruitList fruit={fruit} />\n      <h2>Fruit Inventory Manager</h2>\n      <FruitSeller />\n      <FruitQuickAdd />\n      <FruitBulkAdd />\n    </div>\n  );\n};\n\nexport default FruitManager;\n```\n\nAnd finally, the `FruitList` component receives the `fruit` prop and renders it\ninto an unordered list:\n\n```js\n// ./src/components/FruitList.js\n\nimport React from 'react';\n\nconst FruitList = ({ fruit }) => {\n  return (\n    <div>\n      {fruit.length > 0\n        ? <ul>{fruit.map((fruitName, index) => <li key={index}>{fruitName}</li>)}</ul>\n        : <span>No fruit currently in stock!</span>\n      }\n    </div>\n  );\n};\n\nexport default FruitList;\n```\n\n> **Reminder:** Using component props to pass a value down the component\n> hierarchy is known as _prop threading_.\n\nNotice that the `FruitList` _presentational_ component, which no longer needs to\nuse the `componentDidMount` and `componentWillUnmount` lifecycle methods to\nsubscribe and unsubscribe to the store, can be refactored into a function\ncomponent. Additionally, the `store` is no longer imported in the `FruitList`\nmodule, as the `FruitList` component simply receives and renders the `fruit`\nstate via a prop without any knowledge of or direct interaction with the store.\n\n### Using a container component to dispatch actions\n\nHere's the current version of the `FruitQuickAdd` component that dispatches the\n`ADD_FRUIT` action to add a fruit to the fruit stand:\n\n```js\n// ./src/components/FruitQuickAdd.js\n\nimport React from 'react';\nimport store from '../store';\nimport { addFruit } from '../actions/fruitActions';\n\nclass FruitQuickAdd extends React.Component {\n  addFruitClick = (event) => {\n    const fruit = event.target.innerText;\n    store.dispatch(addFruit(fruit));\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Quick Add</h3>\n        <button onClick={this.addFruitClick}>APPLE</button>\n        <button onClick={this.addFruitClick}>ORANGE</button>\n      </div>  \n    );\n  }\n}\n\nexport default FruitQuickAdd;\n```\n\nTo prepare to refactor the `FruitQuickAdd` component into a _presentational_\ncomponent, update the `FruitManagerContainer` component to the following code:\n\n```js\n// ./src/components/FruitManagerContainer.js\n\nimport React from 'react';\nimport store from '../store';\nimport { addFruit } from '../actions/fruitActions';\nimport FruitManager from './FruitManager';\n\nclass FruitManagerContainer extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  add = (fruit) => {\n    store.dispatch(addFruit(fruit));\n  }\n\n  render() {\n    const { fruit } = store.getState();\n\n    return (\n      <FruitManager\n        fruit={fruit}\n        add={this.add} />\n    );\n  }\n}\n\nexport default FruitManagerContainer;\n```\n\nNotice that the `addFruit` action creator is imported (at the top of the file)\nand a new component method named `add` receives a `fruit` parameter value and\ncalls `store.dispatch` to dispatch a `ADD_FRUIT` action. The `render` method\nsets a prop on the `FruitManager` component to pass the `add` method down the\ncomponent hierarchy.\n\nThe `FruitManager` component receives the `add` prop and in turn uses a prop to\npass it down to the `FruitQuickAdd` component:\n\n```js\n// ./src/components/FruitManager.js\n\nimport React from 'react';\nimport FruitList from './FruitList';\nimport FruitSeller from './FruitSeller';\nimport FruitQuickAdd from './FruitQuickAdd';\nimport FruitBulkAdd from './FruitBulkAdd';\n\nconst FruitManager = ({ fruit, add }) => {\n  return (\n    <div>\n      <h2>Available Fruit</h2>\n      <FruitList fruit={fruit} />\n      <h2>Fruit Inventory Manager</h2>\n      <FruitSeller />\n      <FruitQuickAdd add={add} />\n      <FruitBulkAdd />\n    </div>\n  );\n};\n\nexport default FruitManager;\n```\n\nAnd finally, the `FruitQuickAdd` component receives the `add` callback function\nvia a prop and calls it within a `handleClick` event handler, passing in the\ntarget button's inner text:\n\n```js\n// ./src/components/FruitQuickAdd.js\n\nimport React from 'react';\n\nconst FruitQuickAdd = ({ add }) => {\n  const handleClick = (event) => add(event.target.innerText);\n\n  return (\n    <div>\n      <h3>Quick Add</h3>\n      <button onClick={handleClick}>APPLE</button>\n      <button onClick={handleClick}>ORANGE</button>\n    </div>  \n  );\n};\n\nexport default FruitQuickAdd;\n```\n\nThe change between the original and refactored `FruitQuickAdd` component isn't\nas dramatic as the `FruitList` component example, but it's still a significant\nimprovement to the overall separation of concerns. The `FruitQuickAdd` component\nis now strictly concerned with rendering the UI and handling user generated\nevents (i.e. button clicks) and the `FruitManagerContainer` component is now\nstrictly concerned with interacting with the Redux store.\n\n### Reviewing the completed container component\n\nThe `FruitManagerContainer` _container_ component can continue to be expanded\nuntil each of its child _presentational_ components no longer interact directly\nwith the store. Here's a look at the completed `FruitManagerContainer`\ncomponent:\n\n```js\n// ./src/components/FruitManagerContainer.js\n\nimport React from 'react';\nimport store from '../store';\nimport { addFruit, addFruits, sellFruit, sellOut } from '../actions/fruitActions';\nimport FruitManager from './FruitManager';\n\nclass FruitManagerContainer extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  add = (fruit) => {\n    store.dispatch(addFruit(fruit));\n  }\n\n  addBulk = (fruit) => {\n    store.dispatch(addFruits(fruit));\n  }\n\n  sell = (fruit) => {\n    store.dispatch(sellFruit(fruit));\n  }\n\n  sellAll = () => {\n    store.dispatch(sellOut());\n  }\n\n  render() {\n    const { fruit } = store.getState();\n    const distinctFruit = Array.from(new Set(fruit)).sort();\n\n    return (\n      <FruitManager\n        fruit={fruit}\n        distinctFruit={distinctFruit}\n        add={this.add}\n        addBulk={this.addBulk}\n        sell={this.sell}\n        sellAll={this.sellAll} />\n    );\n  }\n}\n\nexport default FruitManagerContainer;\n```\n\n## Reviewing a completed Fruit Stand example\n\nTo review and run a completed Fruit Stand example application that utilizes\ncontainers, clone the [redux-fruit-stand-examples] repo.\n\nAfter cloning the repo, open a terminal and browse to the\n`fruit-stand-redux-with-react-containers` folder. Run the command `npm install`\nto install the project's dependencies. Then use the command `npm start` to run\nthe Fruit Stand application.\n\nThis Fruit Stand example application is a React application created by the\nCreate React App tooling. When running the application using `npm start`, the\napplication should automatically open in your default browser. If it doesn't,\nyou can manually browse to `http://localhost:3000/` to view the application.\n\n## What you learned\n\nIn this article, you learned how container components differ from presentational\ncomponents. You also learned how to write a container component to handle all of\nthe Redux store interaction for one or more presentational components.\n\n[wikipedia-separation-of-concerns]: https://en.wikipedia.org/wiki/Separation_of_concerns\n[react-redux]: https://react-redux.js.org/\n[redux-fruit-stand-examples]: https://github.com/appacademy-starters/redux-fruit-stand-examples\n"
  },
  "success": true
}