{
  "template": {
    "taskId": "b1c4f6a7-6b4f-4a61-80dd-962b33224e06",
    "name": "Navigation",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-router/readings/reading-react-router-navigation-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "navigation"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# React Router Navigation\n\nNow that you know how to create front-end routes with React Router, you'll need\nto implement a way for your users to navigate the routes! This is what using\nReact Router's `Link`, `NavLink`, `Redirect`, and `history` prop can help you\ndo.\n\nIn this article, you'll be working off of the demo project you built in the\nReact Router Intro reading. When you finish this article, you should be able to\nuse the following components from the `react-router-dom` library:\n\n* `<Link>` or `<NavLink>` to create links with absolute paths to routes in your\n  application (like \"/users/1\"); and,\n* `<Redirect>` to redirect a user to another path (i.e. a login page when the\n  user is not logged in); and\n* React Router's `history` prop to update a browser's URL programmatically.\n\n## Adding links for navigation\n\nReact Router's `<Link>` is one way to simplify navigation around your app. It\nissues an on-click navigation event to a route defined in your app's router.\nUsing `<Link>` renders an anchor tag with a correctly set `href` attribute.\n\n### Link\n\nTo use it, update your imports from the `react-router-dom` package to include\n`Link`:\n\n```js\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n```\n\nNote that `<Link>` can take two props: `to` and `onClick`.\n\nThe `to` prop is a route location description that points to an absolute path,\n(i.e. `/users`). Add the following `Link` components in your `index.js` file\nabove your routes:\n\n```jsx\n<Link to=\"/\">App</Link>\n<Link to=\"/users\">Users</Link>\n<Link to=\"/users/1\">Andrew's Profile</Link>\n```\n\nThe `onClick` prop is just like any other JSX click handler. You can write a\nfunction that takes in an `event` and handles it. Add the following `Link`\nbefore your routes and the following click handler function within your `Root`\ncomponent:\n\n```jsx\n// Link with onClick prop\n<Link to=\"/\" onClick={handleClick}>App with click handler</Link>\n```\n\n```js\n// Click handler function\nconst handleClick = () => {\n  console.log('Thanks for clicking!')\n};\n```\n\nNow, test your routes and links! If you inspect the page, you'll see that your\nlinks are now rendered as `<a>` elements. Notice that clicking the `App with\nclick handler` link logs a message in your console while directing your browser\nto render the `App` component.\n\n### NavLink\n\nThe `<NavLink>` works just like a `<Link>`, but with a little extra\nfunctionality. It has the ability to add extra styling when the path it links to\nmatches the current path. This makes it an ideal choice for a navigation bar,\nhence the name. This styling can be controlled by three extra props:\n`activeClassName`, `activeStyle`, and `exact`. To begin using `NavLink`, update\nyour imports from the `react-router-dom` package:\n\n```js\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\n```\n\nThe `activeClassName` prop of the `NavLink` component allows you to set a CSS\nclass name for styling the `NavLink` when its route is active. By default, the\n`activeClassName` is already set to `active`. This means that you simply need to\nadd an `.active` class to your CSS file to add active styling to your link. A\n`NavLink` will be active if its `to` prop path matches the current URL.\n\nLet's change your \"Users\", \"Hello\", and \"Andrew's Profile\" links to be different\ncolors and have a larger font size when active.\n\n```jsx\n<NavLink to=\"/\">App</NavLink>\n<NavLink activeClassName=\"red\" to=\"/users\">Users</NavLink>\n<NavLink activeClassName=\"blue\" to=\"/hello\">Hello</NavLink>\n<NavLink activeClassName=\"green\" to=\"/users/1\">Andrew's Profile</NavLink>\n<NavLink to=\"/\" onClick={handleClick}>App with click handler</NavLink>\n```\n\nFor example, this is what the rendered HTML `<a>` tag would look like when when\nthe browser is navigated to the `/` path or the `/users` path:\n\n```html\n<!-- Navigated to the / path (the activeClassName\n     prop is set to active by default) -->\n<a href=\"/\" class=\"active\">App</a>\n\n<!-- NOT navigated to the `/` path -->\n<a href=\"/\">App</a>\n```\n\n```html\n<!-- Navigated to the /users path (the activeClassName\n     prop is manually set to red) -->\n<a href=\"/users\" class=\"red\">Users</a>\n\n<!-- NOT navigated to the `/users` path -->\n<a href=\"/users\">Users</a>\n```\n\nImport `NavLink` into your `index.js` file and take a moment to update all your\n`Link` elements to `NavLink` elements. Set an `activeClassName` prop to an\n`active` class. Add the following `.active` class to your `index.css` file:\n\n```css\n.active {\n  font-weight: bold;\n}\n\n.red {\n  color: red;\n  font-size: 30px;\n}\n\n.blue {\n  color: blue;\n  font-size: 30px;\n}\n\n.green {\n  color: green;\n  font-size: 30px;\n}\n```\n\nTest your styled links! Notice how the `App` and `App with click handler` links\nare always bolded. This is because all of your links include the `/` path,\nmeaning that the link to `/` will be active when browsing to `/users` and\n`/users/1` because of how `users` and `users/1` are both prefaced by a `/`.\n\nThe `activeStyle` prop is a style object that will be applied inline to the\n`NavLink` when its `to` prop matches the current URL. Add the following\n`activeStyle` to your `App` link and comment out the `.active` class in your CSS\nfile.\n\n```jsx\n<NavLink to=\"/\" activeStyle={{ fontWeight: \"bold\" }}>App</NavLink>\n```\n\nThe following html is rendered when at the `/` path:\n\n```html\n<a href=\"/\" style=\"font-weight:bold;\" class=\"active\">App</a>\n```\n\nNotice how your `App with click handler` is not bolded anymore. This is because\nthe default `active` class being applied does not have any CSS stylings set to\nthe class. Uncomment your `.active` class in your CSS file to bring back bolding\nto this NavLink.\n\nThe `exact` prop is a boolean that defaults to `false`. If set to `true`, then\nthe `activeStyle` and `activeClassName` props will only be applied when the\ncurrent URL exactly matches the `to` prop. Update your `App` and `App with click\nhandler` links with an `exact` prop set. Just like in your routes, you can use\nthe `exact` flag instead of `exact={true}`.\n\n```jsx\n<NavLink to=\"/\" exact={true} activeStyle={{ fontWeight: \"bold\" }}>App</NavLink>\n<NavLink to=\"/\" exact onClick={handleClick}>App with click handler</NavLink>\n```\n\nNow your `App` and `App with click handler` links will only be bolded when you\nhave navigated precisely to the `/` path.\n\n## Switching between routes\n\nYou came across styling issues when the `/users` and `/users/1` paths matched\nthe `/` path. Routing can have this issue as well. This is why you need to\ncontrol the switching between routes.\n\nReact Router's `<Switch>` component allows you to only render one `<Route>` even\nif several match the current URL. You can nest as many `Route`s as you wish\nbetween the opening and closing `Switch` tags, but only the first one that\nmatches the current URL will be rendered.\n\nThis is particularly useful if you want a default component that will only\nrender if none of our other routes match. View the example below. Without the\nSwitch, `DefaultComponent` would always render. Since there isn't set a path in\nthe `DefaultComponent` route, it will simply use the default path of `/`. Now\nthe `DefaultComponent` will only render when neither of the preceding routes\nmatch.\n\n```jsx\n<Switch>\n  <Route path=\"some/url\" component={SomeComponent} />\n  <Route path=\"some/other/url\" component={OtherComponent} />\n  <Route component={DefaultComponent} />\n</Switch>\n```\n\nImport `Switch` from `react-router-dom` and add `<Switch>` tags around your\nroutes to take care of ordering and switching between your routes! Begin by\nadding the following route to the bottom of your routes to render that a `404:\nPage not found` message:\n\n```jsx\n<Route render={() => <h1>404: Page not found</h1>} />\n```\n\nThis is what your `Root` component should look like at this point:\n\n```js\nconst Root = () => {\n  const users = [\n    { name: 'andrew' },\n    { name: 'raymond' }\n  ];\n\n  const handleClick = () => {\n    console.log('Thanks for clicking!')\n  };\n\n  return (\n    <BrowserRouter>\n      <h1>Hi, I'm Root!</h1>\n\n      <div>\n        <NavLink to=\"/\" exact={true} activeStyle={{ fontWeight: \"bold\" }}>App</NavLink>\n        <NavLink activeClassName=\"red\" to=\"/users\">Users</NavLink>\n        <NavLink activeClassName=\"blue\" to=\"/hello\">Hello</NavLink>\n        <NavLink activeClassName=\"green\" to=\"/users/1\">Andrew's Profile</NavLink>\n        <NavLink to=\"/\" exact onClick={handleClick}>App with click handler</NavLink>\n\n        <Switch>\n          <Route path=\"/users/:userId\" component={(props) => <Profile users={users} {...props} />} />\n          <Route exact path=\"/users\" render={() => <Users users={users} />} />\n          <Route path=\"/hello\" render={() => <h1>Hello!</h1>} />\n          <Route exact path=\"/\" component={App} />\n          <Route render={() => <h1>404: Page not found</h1>} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n```\n\nNow you have control over the precedence of rendered components! Try navigating\nto `http://localhost:3000/asdf` or any other route you have not defined. The\n`<h1>404: Page not found</h1>` JSX of the last `<Route>` will be rendered\nwhenever the browser attempts to visit an undefined route.\n\n## Redirecting users\n\nBut what if you want to redirect users to a login page when they aren't logged\nin? The `<Redirect>` component from React Router helps you redirect users!\n\nThe component takes only one prop: `to`. When it renders, it replaces the\ncurrent URL with the value of its `to` prop. Typically you conditionally render\n`<Redirect>` to redirect the user away from some page you don't want them to\nvisit. The example below checks whether there is a defined `currentUser` prop.\nIf so, the `<Route>` will render the `Home` component. Otherwise, it will\nredirect the user to the `/login` path.\n\n```jsx\n<Route\n  exact path=\"/\"\n  render={() => (this.props.currentUser ? <Home /> : <Redirect to=\"/login\" />)}\n/>\n```\n\nNote: you will learn how to use a more flexible auth pattern - don't directly\nimitate this example.\n\n## History\n\nYou know how to redirect users with a `<Redirect>` component, but what if you\nneed to redirect users programmatically? You've learned about the React Router's\n`match` prop, but now let's go over another one of the [route props]: `history`!\n\n```js\n// Pushing a new URL (and adding to the end of history stack):\nconst handleClick = () => this.props.history.push('/some/url');\n\n// Replacing the current URL (won't be tracked in history stack):\nconst redirect = () => this.props.history.replace('/some/other/url');\n```\n\nThis prop lets you update the URL programmatically. For example, suppose you\nwant to push a new URL when the user clicks a button. It has two useful methods:\n\n- `push` - This adds a new URL to the end of the history stack. That means that\n  clicking the back button will take the browser to the previous URL. Note that\n  pushing the same URL multiple times in a row will have no effect; the URL will\n  still only show up on the stack once. In development mode, pushing the same\n  URL twice in a row will generate a console warning. This warning is disabled\n  in production mode.\n- `replace` - This replaces the current URL on the history stack, so the back\n  button won't take you to it. For example:\n\n## What you learned\n\nIn this article, you learned how to:\n\n* Create navigation links for your route paths; and\n* Redirect users through using the `<Redirect>` component; and\n* Update a browser's URL programmatically by using React Router's `history`\n  prop.\n\n[route props]: https://reacttraining.com/react-router/web/api/Route/route-props\n"
  },
  "success": true
}