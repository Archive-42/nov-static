{
  "template": {
    "taskId": "3522ddcb-1bb7-49cb-8df9-a09b9331f22a",
    "name": "Nested Routes",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-router/readings/reading-react-router-nested-routes-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "nested-routes"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "\n# React Router Nested Routes\n\nNow you know how to create front-end routes and add navigation with React\nRouter. When initializing Express projects, you declare static routes. Static\nroutes are routes that are declared when an application is initialized. When\nusing React Router in your application's initialization, you can declare dynamic\nroutes. React Router introduces dynamic routing, where your routes are created\nas your application is rendering. This allows you to create nested routes within\ncomponents!\n\nIn this article, let's dive into [nested routes]! When you finish the article,\nyou should:\n\n* Describe what nested routes are; and\n* Be able to use React Router to create and navigate nested routes; and\n* Know how to use the React Router `match` prop to generate links and routes.\n\n## Why nested routes?\n\nLet's begin with why you might need nested routes. As you remember, you are\nusing React to create a single-page application. This means that you'll be\norganizing your application into different components and sub-components.\n\nFor example, imagine creating a simple front-end application with three main\npages: a home welcome page (path of `/`), a users index page (path of `/users`),\nand user profile pages (path of `/users/:userId`). Now imagine if every user had\nlinks to separate `posts` and `photos` pages.\n\nYou can create those routes and links within the user profile component, instead\nof creating the routes and links where the main routes are defined.\n\n## What are nested routes?\n\nNow let's dive into a user profile component to understand what are nested\nroutes! Imagine you have a route in your application's entry file to each user's\nprofile like so:\n\n```jsx\n<Route path=\"/users/:userId\" component={Profile} />\n```\n\nThis means that upon navigating to `http://localhost:3000/users/1`, you would\nrender the following `Profile` component and the `userId` parameter within\n`props.match.params` would have the value of `\"1\"`.\n\n```js\nconst Profile = (props) => {\n  // Custom call to database to fetch a user by a user ID.\n  const user = fetchUser(props.match.params.userId);\n  const { name, id } = user;\n\n  return (\n    <div>\n      <h1>Welcome to the profile of {name}!</h1>\n\n      {/* Links to a specific user's posts and photos */}\n      <Link to={`/users/${id}/posts`}>{name}'s Posts</Link>\n      <Link to={`/users/${id}/photos`}>{name}'s Photos</Link>\n\n      {/* Routes to a specific user's posts and photos */}\n      <Route path='/users/:userId/posts' component={UserPosts} />\n      <Route path='/users/:userId/photos' component={UserPhotos} />\n    </div>\n  );\n};\n```\n\nSince this route is not created until the `Profile` component is rendered, you\nare dynamically creating your nested `/users/:userId/posts` and\n`/users/:userId/photos` routes. Remember that your `match` prop also has other\nhelpful properties. You can use `match.url` instead of `/users/${id}` in your\nprofile links. You can also use `match.path` instead of `/users/:userId` in your\nprofile routes. Remember that you can destructure `url`, `path`, and `params`\nfrom your `match` prop!\n\n```js\n\n// Destructure `match` prop\nconst Profile = ({ match: { url, path, params }) => {\n\n  // Custom call to database to fetch a user by a user ID.\n  const user = fetchUser(params.userId);\n  const { name, id } = user;\n\n  return (\n    <div>\n      <h1>Welcome to the profile of {name}!</h1>\n\n      {/* Replaced `/users/${id}` URL with `props.match.url` */}\n      <Link to={`${url}/posts`}>{name}'s Posts</Link>\n      <Link to={`${url}/photos`}>{name}'s Photos</Link>\n\n      {/* Replaced `/users/:userId` path with `props.match.path` */}\n      <Route path={`${path}/posts`} component={UserPosts} />\n      <Route path={`${path}/photos`} component={UserPhotos} />\n    </div>}\n  );\n};\n```\n\nIn tomorrow's project, you'll build a rainbow of routes as well as define nested\nroutes. In the future, you may choose to implement nested routes to keep your\napplication's routes organized within related components.\n\n## What you learned\n\nIn this article, you learned:\n\n* What nested routes are; and\n* About creating and navigating nested routes with React Router; and\n* How to use the React Router props to generate nested links and routes.\n\n[nested routes]:\n  https://reacttraining.com/react-router/core/guides/philosophy/nested-routes\n"
  },
  "success": true
}