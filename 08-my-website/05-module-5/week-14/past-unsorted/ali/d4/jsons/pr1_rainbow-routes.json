{
  "template": {
    "taskId": "af959d7d-590f-45aa-99ec-bacf6baf47b0",
    "name": "Rainbow Routes Project",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-router/projects/rainbow-routes/README.md",
    "type": "Project",
    "timeEstimate": 5400,
    "urls": [
      "rainbow-routes"
    ],
    "topic": "Thursday - React Router and React Builds",
    "subtopic": "Projects",
    "download": "",
    "solution": "",
    "body": "# Rainbow Routes Project\n\nToday you're going to get our first experience using React Router. The goal is\nto create a basic app that displays the colors of the rainbow. This rainbow,\nhowever, has something special about it - some of the colors are nested within\nothers.\n\n## Phase 0: Setup\n\nBegin by creating a new React project:\n\n```sh\nnpx create-react-app rainbow-routes --template @appacademy/simple\n```\n\nNow you'll remove all the contents of your `src` and all the contents from your\n`public` directory to build the application architecture from scratch! After you\nhave deleted all your files within the directories, create a new `index.html`\nfile in your `public` folder. Use the `html:5` emmet shortcut to generate an\nHTML template. Title your page \"Rainbow Routes\" and create a `div` with an `id`\nof `root` in your DOM's `<body>` element. Create an `index.css` file in your\n`src` directory with the following code. Now let's create your entry file!\n\n```css\nh4 {\n  color: darkblue;\n  cursor: pointer;\n}\n\nh4:hover {\n  text-decoration: underline;\n}\n\n#rainbow {\n  position: absolute;\n  top: 0;\n  left: 300px;\n}\n\nh3 {\n  position: absolute;\n  top: 1px;\n}\n\n.red {\n  background-color: red;\n  width: 100px;\n  height: 100px;\n}\n\n.orange {\n  background-color: orange;\n  width: 100px;\n  height: 50px;\n}\n\n.yellow {\n  background-color: yellow;\n  width: 100px;\n  height: 50px;\n}\n\n.green {\n  background-color: green;\n  width: 100px;\n  height: 100px;\n}\n\n.blue {\n  background-color: blue;\n  width: 100px;\n  height: 100px;\n}\n\n.indigo {\n  background-color: mediumslateblue;\n  width: 100px;\n  height: 50px;\n}\n\n.violet {\n  background-color: darkviolet;\n  width: 100px;\n  height: 100px;\n}\n\na {\n  display: block;\n  margin-bottom: 10px;\n}\n```\n\nCreate an `index.js` entry file in the `src` directory. At the top of the file,\nmake sure to import `React` from the `react` package and `ReactDOM` from the\n`react-dom` package. Make sure to also import your the `index.css` file you just\ncreated! This will take care of styling your _rainbow routes_.\n\nNow you can use the `ReactDOM.render()` method to render a `<Root />` component\ninstead of the DOM element with an `id` of `root`. Lastly, wrap your render\nfunction with a `DOMContentLoaded` event listener, like so:\n\n```js\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <Root />,\n    document.getElementById('root'),\n  );\n});\n```\n\nLet's create your `Root` component right in your entry file! Your `Root`\ncomponent will take care of applying your `BrowserRouter` to the application.\nApplying the `BrowserRouter` to your `Root` component allows all the child\ncomponents rendering within `<BrowserRouter>` tags to use and access the `Route`,\n`Link`, and `NavLink` components within the `react-router-dom` package.\n\n```js\nconst Root = () => (\n  // TODO: Apply BrowserRouter\n  // TODO: Render rainbow\n);\n```\n\nInstall the `react-router-dom` package:\n\n```sh\nnpm install react-router-dom@^5.0.0\n```\n\nNow import `BrowserRouter` from the `react-router-dom` package, like so:\n\n```js\nimport { BrowserRouter } from 'react-router-dom';\n```\n\nYou're going to be rendering a lot of components, so let's keep your `src`\ndirectory organized by creating a `components` directory within. Within your new\n`./src/components` directory, create a `Rainbow.js` file for your `Rainbow`\ncomponent with the following code:\n\n```js\n// ./src/components/Rainbow.js\nimport React from 'react';\nimport { Route, Link, NavLink } from 'react-router-dom';\n\nconst Rainbow = () => (\n  <div>\n    <h1>Rainbow Router!</h1>\n    {/* Your links should go here */}\n\n    <div id=\"rainbow\">\n      {/* Your routes should go here */}\n    </div>\n  </div>\n);\n\nexport default Rainbow;\n```\n\nYour `Rainbow` component will act as the home page or default path (`/`) of your\napplication. Import the `Rainbow` component into your entry file and have your\n`Root` component render `<Rainbow />` wrapped within `<BrowserRouter>` tags,\nlike so:\n\n```js\nconst Root = () => (\n  <BrowserRouter>\n    <Rainbow />\n  </BrowserRouter>\n);\n```\n\nWithin your `Rainbow` component, you'll be rendering `<NavLink>` and `<Route>`\ncomponents to add different navigation paths to different components. Let's\ncreate all the components you will render!\n\nCreate files for the following components in your `./src/components` directory:\n\n- `Red`\n- `Blue`\n- `Green`\n- `Indigo`\n- `Orange`\n- `Violet`\n- `Yellow`\n\nYour `Red` and `Blue` components will look something like this:\n\n```js\nimport React from 'react';\nimport { Route, Link, NavLink } from 'react-router-dom';\n\nconst Color = () => (\n  <div>\n    <h2 className=\"color\">Color</h2>\n    {/* Links here */}\n\n    {/* Routes here */}\n  </div>\n);\n\nexport default Color;\n```\n\nYour `Green`, `Indigo`, `Orange`, `Violet`, and `Yellow` components will look\nsomething like this:\n\n```js\nimport React from 'react';\n\nconst Color = () => (\n  <div>\n    <h3 className=\"color\">Color</h3>\n  </div>\n);\n\nexport default Color;\n```\n\nNow start your server and verify you can see the \"Rainbow Router!\" header from\nyour `Rainbow` component. Currently there is no functionality. Let's fix that!\n\n## Phase 1: Routes\n\nAs a reminder, wrapping the `Rainbow` component in `<BrowserRouter>` tags makes\nthe router available to all descendent React Router components. Now open the\n`Rainbow.js` file. You're going to render some of your color components from\nhere. Ultimately you want your routes to look like this.\n\n| URL            | Components                  |\n| -------------- | --------------------------- |\n| `/`            | `Rainbow`                   |\n| `/red`         | `Rainbow -> Red`            |\n| `/red/orange`  | `Rainbow -> Red -> Orange`  |\n| `/red/yellow`  | `Rainbow -> Red -> Yellow`  |\n| `/green`       | `Rainbow -> Green`          |\n| `/blue`        | `Rainbow -> Blue`           |\n| `/blue/indigo` | `Rainbow -> Blue -> Indigo` |\n| `/violet`      | `Rainbow -> Violet`         |\n\nThis means that the `Red`, `Green`, `Blue`, and `Violet` components need to\nrender in the `Rainbow` component, but only when you are at the corresponding\nURL. You'll do this with `Route` components. Begin by importing the `Red`,\n`Green`, `Blue`, and `Violet` components into your `Rainbow.js` file. Then add\nthe necessary `Route` components inside the `div` with `id=\"rainbow\"` in the\n`Rainbow` component. For example to render the `Red` component with the `/red`\npath, you would use the following `Route` component:\n\n```jsx\n<Route path=\"/red\" component={Red} />\n```\n\nTest that your code works! Manually type in each URL you just created, and you\nshould see the color component pop up. Remember, these are React Routes, so the\npaths you created will come after the `/`. For example, your default rainbow\nroute will look like `http://localhost:3000/` while your red route will look\nlike `http://localhost:3000/red`.\n\nYou want to nest the `Orange` and `Yellow` components inside the `Red`\ncomponent, and the `Indigo` component inside the `Blue` component. Remember to\nimport your components to use them in a `Route` tag. You'll have to go add the\ncorresponding `Route` tags to the `Red.js` and `Blue.js` files. Make sure to use\nthe correct nested paths, such as `\"/red/orange\"` for the orange `Route`.\n\n## Phase 2: Links\n\nManually navigating to our newly created routes is tiresome, so let's add\nfunctionality to take care of this process for us. React Router provides the\n`Link` and `NavLink` components for this purpose.\n\nAdd `Link`s to the paths `/red`, `/green`, `/blue`, and `/violet` in the\n`Rainbow` component. For example, your red link should look like\n\n```jsx\n<Link to=\"/red\">Red</NavLink>\n```\n\nWhen you are at `blue` you want to be able to get to `/blue/indigo`, and then\nback to `/blue`. Add the corresponding `Link`s to the `Blue` component like\nthis:\n\n```jsx\n<Link to='/blue' >Blue only</Link>\n<Link to='/blue/indigo' >Add indigo</Link>\n```\n\nSimilarly, add `Link`s to `/red`, `/red/orange` and `/red/yellow` to the `Red`\ncomponent. Test all your links. Navigation is so much easier now!\n\n## Phase 3: NavLinks\n\nIt would be nice if our links gave us some indication of which route you were\nat. Fortunately, React Router has a special component for that very purpose:\n`NavLink`. NavLinks get an extra CSS class when their `to` prop matches the\ncurrent URL. By default this class is called `active`.\n\nGo ahead and switch all your `Link`s to `NavLink`s. If you open the app you\nwon't see any change yet. That's because you haven't added any special styling\nto the `active` class. Go ahead and open the `index.css` file. Create an\n`.active` class and add the line `font-weight: 700`. Now your active links will\nbe bold. Isn't that nice!\n\nThe only problem is that now the `Blue only` link is active even when the path\nis `/blue/indigo`. That doesn't make a lot of sense. Let's add the `exact` flag\nto that link so it will only be active when its `to` exactly matches the current\npath. Now it should look like:\n\n```jsx\n<NavLink exact to=\"/blue\">\n  Blue only\n</NavLink>\n```\n\nDo the same for the `Red only` link. Everything should be working now.\n\n# Phase 4 - Changing NavLink's Active Class\n\nYou've already set up `NavLink` to __bold__ the link text using the `.active`\nclass in `src/index.css`. But what if you wanted this class to be something\nelse? For instance, what if you want your main color links (Red, Green, Blue,\nViolet) to be styled differently when active than your sub-route links (Red\nOnly, Add Orange, Add Yellow, etc.).\n\nYou can set the class that React Router sets to an active `NavLink` by adding\nthe `activeClassName` prop.\n\nFor instance, when we are at a route matching the below `NavLink`'s `to` prop,\nthe component will have a class of `.parent-active` applied:\n\n```js\n<NavLink to=\"/blue\" activeClassName=\"parent-active\" >\n  Blue\n</NavLink>\n```\n\nThis allows much more flexibility to style an active `NavLink`!\n\nUsing the example above, add an `activeClassName` prop to each of your\n`NavLink`s in `src/components/Rainbow.js`. Now, add some CSS styling for that\nclass in your `src/index.css` to distinguish your main and your sub-route links.\n\nCompare your work to the solution and make sure the behavior is the same. Time\nto celebrate! ✨ 🌈 ✨\n\nYou can also learn more about using the React Router at [reacttraining.com]!\n\n[reacttraining.com]:\n  https://reacttraining.com/react-router/web/guides/quick-start\n"
  },
  "success": true
}