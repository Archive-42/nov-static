{
  "template": {
    "taskId": "384e083a-3366-4a85-8f5c-7c4f649e7053",
    "name": "Project Components - JSX Project",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/readings/reading-thinking-in-components.md",
    "type": "Reading",
    "timeEstimate": 1200,
    "urls": [
      "project-components"
    ],
    "topic": "Tuesday - React!",
    "subtopic": "JSX Project",
    "body": "# Thinking In Components\n\nFor the next couple of walk through articles, you will be reproducing a page\nfrom Petrack. Please go to [Petrack] and click around it so you can see how it\nworks. Pay special attention to the detail page for the pets. This article will\nanalyze it so that it can introduce you into how to \"think in React\".\n\n![Petrack pet detail page]\n\nWhen you \"think in React\", you are supposed to \"think in components\". A\ncomponent in React is usually a JavaScript function or a class that returns a\nspecial React object called an \"element\". There is a _very_ vocal community that\nbelieves that function-based components are far superior than class-based\ncomponents because they're easier to understand. You will have the opportunity\nto use both in this class and make up your mind which you like better.\n\nIn this article, you will gain insight into how to break a UI down into\nportions of functionality that React calls \"components\". The way this article\npresents the components is only one way to do it. Other developers may choose to\ndo it differently. There is usually no wrong way to do it.\n\n## Components\n\nIn React-speak, a \"component\" is a chunk of the user interface that can (or\nshould) be treated as a unit because it may (or likely will) be used more than\nonce or used to structure a page. That's not a very satisfying definition. This\narticle will walk you through breaking down the page using the practical\nexample of the Petrack pet detail page.\n\nWhen you think of components, it's good to think in terms of the Single\nResponsibility Principle. Remember that? It's good to have a component do one\nthing and one thing well. In this analysis, it will identify how it fits (or\ndoesn't fit) in with the Single Responsibility Principle.\n\nIf you think in terms of Pug, then a component is kind of like an `include`, a\nbig or small amount of code that you could use over and over in your UI. The\nmain difference is that React is _in the browser_ and handles user events and\nHTML generation for you so that you're not creating template strings and adding\nthem via the `innerHTML` property or `appendChild` method. Pug is just on the\nserver generating HTML.\n\n## The navigation component\n\nOn all of the pages, there is the same navigation at the top of the page.\n\n![Petrack navigation]\n\nIf you were working in Pug, that would be in your **layout.pug** because you\nwould want it to appear in every page. In React, you will create a reusable\ncomponent, maybe call it `Navigation`, and use it on all of your React-enabled\npages.\n\nThis does one thing and one thing well: it shows the static content of the\nnavigation. There's nothing else it needs to do. Good job, `Navigation`\ncomponent!\n\nWhat this means is that the code that will create the heading \"Petrack\", the\nlinks \"Pets\" and \"Owners\", and the \"Back\" link will all be in their own\ncomponent, which is just a JavaScript function or class. It could look something\nlike this, but with real code where it reads \"some cool React code here\". This\nis the skeleton of the code.\n\n```js\n// Navigation.js\nimport React from 'react';\n\nconst Navigation = props => {\n  /* some cool React code here */\n}\n\nexport default Navigation;\n```\n\nYou would put that in a file named **Navigation.js**. It's capitalized because,\nin React world, the names of your custom components are _always_ capitalized.\n\nDon't worry if that doesn't make complete sense, yet. You will be making these\ncomponents and their files _for the rest of your lives_. Or, at least, for the\nrest of this course. And, definitely, for the remainder of this module.\n\nThe walk through articles that follow this will explain what's going on as well\nas what that `props` parameter is.\n\n## The details components\n\nNow, for the remainder of the page.\n\n![Petrack detail]\n\nThis could be another component. It would create the \"Details\" headline, show\nthe individual details of the pet, create the \"Owners\" headline, and then create\nthe links to the owners. It could look something like this.\n\n```js\n// PetDetail.js\nimport React from 'react';\n\nconst PetDetail = props => {\n  /* some cool React code here */\n}\n\nexport default PetDetail;\n```\n\nThis component, the `PetDetail` component, does too much. It's in charge of\nshowing two different kinds of information, the details of the pet _and_ the\nowners links. That means there's probably an opportunity to create more\ncomponents that this component can then use. This is called _component\ncomposition_.\n\n### Breaking it down further\n\nNow, please think like a Pug developer for just a moment. How would you create\nthis page in Pug? The code for this from the project looks like this.\n\n```pug\nextends ../layout\n\nblock content\n  h1 Details\n  dl\n    dt Name\n    dd= pet.name\n    dt Age\n    dd= pet.age\n    dt Type\n    dd= pet.PetType.type\n\n  h2 Owners\n  ul\n    each owner in pet.Owners\n      li: a(href=\"/owners/\" + owner.id) #{owner.lastName}, #{owner.firstName}\n```\n\nTo start thinking in components, ask yourself\n\n* What parts of that page are repeated?\n* What parts have the same structure?\n\nYou can see that in the _Details_ section of the page, there are repeated\nstructures of `dt` and `dd` elements. You can see in the _Owners_ section, there\nis a loop that creates a link to the owners based on the owner information.\nThose types of reusable chunks of content are good candidates for being their\nown components.\n\n### The pet information item component\n\nYou can extract the creation of the `dt` and `dd` elements into its own\ncomponent.\n\n![Petrack pet information item]\n\nThat could look something like this.\n\n```js\n// PetInformationItem.js\nimport React from 'react';\n\nconst PetInformationItem = props => {\n  /* some cool React code here */\n}\n\nexport default PetInformationItem;\n```\n\nIt would be responsible for making that portion of the Web page appear. And, you\nwould use it over and over for each of the different pieces of data you wanted\nto show. As you add more data about pets, you could use that\n`PetInformationItem` to maintain the visual consistency of the Web page, as well\nas allowing you to write less code. This component does one thing and does it\nwell.\n\n### The owner link component\n\nJust like extracting the pet information item, you can extract that owner link\ninto its own component. It would generate the the `a` and format the\nperson's name.\n\n![Petrack owner link]\n\nAgain, the skeleton code would look something like this.\n\n```js\n// OwnerLink.js\nimport React from 'react';\n\nconst OwnerLink = props => {\n  /* some cool React code here */\n}\n\nexport default OwnerLink;\n```\n\nThis component also does one thing and does it well. If you ever need to change\nthe way owner names appear in lists of links in the application, you can come to\nthis one component and change it. It would then take effect everywhere! Single\nResponsibility Principle for the win!\n\n### The owners list component\n\nNow, the thing that manages the list itself and the use of the `OwnerLink`\ncomponent is eligible for being its own component, too.\n\n![Petrack owners list]\n\nIt's single responsibility is to manage creating the \"Owners\" header and the\nunordered list. It will use the `OwnerLink` component to do that! Again, this is\ncalled _component composition_.\n\n```js\n// OwnersList.js\nimport OwnerLink from './OwnerLink';\nimport React from 'react';\n\nconst OwnersList = props => {\n  /* some cool React code here */\n\n  /**\n   * Use the OwnerLink component, too!\n   */\n}\n\nexport default OwnersList;\n```\n\n### Putting the list and details together\n\nIf you create the `PetInformationItem` and the `OwnerLink` component, then\nyou will want to use them in your `PetDetail` component. That is as easy as\nusing the `import` statement to allow them to be used by that code.\n\n```js\n// PetDetail.js\nimport OwnersList from './OwnersList';\nimport PetInformationItem from './PetInformationItem';\nimport React from 'react';\n\nconst PetDetail = props => {\n  /* some cool React code here */\n\n  /**\n   * Use the OwnersList and PetInformationItem\n   * components, too!\n   */\n}\n\nexport default PetDetail;\n```\n\n## Putting it all together\n\nOnce you have all of those components, you would create one more component, the\ntop-level \"page\" component, that would render the `Navigation` and `PetDetail`\ncomponents.\n\n```js\n// PetDetailPage.js\nimport Navigation from './Navigation';\nimport PetDetail from './PetDetail';\nimport React from 'react';\n\nconst PetDetailPage = props => {\n  /* some cool React code here */\n\n  /**\n   * Use the Navigation and PetDetail\n   * components, too!\n   */\n}\n\nexport default PetDetailPage;\n```\n\nThe final analysis in this breakdown of \"components\" to \"think in React\" looks\nlike this.\n\n![Petrack final analysis]\n\nYou can see each of the components that were described in this article. You can\nalso see how the `PetInformationItem` and `OwnerLink` components get used\nmultiple times on the page.\n\n## There is probably more\n\nTake a look at this, again, and think about if there is any \"missing\" component\nbefore continuing.\n\n![Petrack final analysis]\n\nYou could also create a `PetDetailList` component, if you want, that would\nmanage the \"Details\" header and the definition list. That would reflect the\nsame structure that the `OwnersList` has, a component responsible for generating\na header and a list. In the following walk through articles, the `PetDetailList`\ncomponent will also be included in the development.\n\n## What you've seen\n\nThis is thinking in React. Looking at a Web page and deciding what parts of it\nbelong in sections, what parts are repeated, and how to group them all together.\nThe React documentation calls this [breaking the UI into a component hierarchy].\nThat link is to a section in the React documentation entitled _Thinking in\nReact_. That section performs the same exercise that this article performed, but\nwith a lot fewer words and pictures.\n\nIn the upcoming exercises, you will create these components in a couple of ways.\nThe first way is the hard way, but shows you how React works under the covers.\nThe second way uses the fancy JSX language to make it easier for you.\n\n[Petrack]: https://polar-beach-08187.herokuapp.com/\n[Petrack pet detail page]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail.png\n[Petrack navigation]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-static-content.png\n[Petrack detail]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-component.png\n[Petrack pet information item]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-information-item-component.png\n[Petrack owner link]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-owner-link-component.png\n[Petrack final analysis]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-all-components.png\n[breaking the UI into a component hierarchy]: https://reactjs.org/docs/thinking-in-react.html#step-1-break-the-ui-into-a-component-hierarchy\n[Petrack owners list]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-owners-list-component.png\n"
  },
  "success": true
}