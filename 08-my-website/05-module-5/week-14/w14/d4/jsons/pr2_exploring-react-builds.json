{
  "template": {
    "taskId": "c234eeef-fceb-4747-8142-60f8c47b87b9",
    "name": "Exploring React Builds Project",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/react-builds/projects/exploring-react-builds/README.md",
    "type": "Project",
    "timeEstimate": 10800,
    "urls": [
      "exploring-react-builds"
    ],
    "topic": "Thursday - React Router and React Builds",
    "subtopic": "Projects",
    "download": "",
    "solution": "",
    "body": "\n# Exploring React Builds Project\n\nIn this project, you'll use Create React App to create a simple React\napplication. You'll experiment with some of the features that Create React App\nprovides and deploy a production build of your application to a standalone\nExpress application.\n\n## Phase 0: Setup\n\nBegin by using the [create-react-app] package to create a React application:\n\n```sh\nnpx create-react-app exploring-react-builds --template @appacademy/simple\n```\n\n> Remember that using the `create-react-app` command initializes your project\n> as a Git repository. If you use the `ls -a` to view the hidden files in your\n> project, you'll see the `.git` file.\n\nUpdate the `App` component:\n\n* Wrap the `<h1>` element with a `<div>` element; and\n* Change the `<h1>` element content to something like \"Exploring React Builds\".\n\n```js\n// ./src/App.js\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Exploring React Builds</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n## Phase 1: Using CSS modules\n\nYou've already seen an example of using the `import` keyword to import a\nstylesheet into a module so that it'll be included in your application build.\nThat's the technique being used to include the global `index.css` stylesheet:\n\n```js\n// ./src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nYou can also leverage [CSS modules][css modules] in your Create React App\nprojects. CSS Modules scope stylesheet class names so that they are unique to a\nspecific React component. This allows you to create class names without having\nto worry if they might collide with class names used in another component.\n\nAdd a new `css-modules` folder to the `src` folder. Within that folder, add the\nfollowing files:\n\n* `HeadingA.js`\n* `HeadingA.module.css`\n* `HeadingB.js`\n* `HeadingB.module.css`\n\nThen update the contents of each file to the following:\n\n```js\n// ./src/css-modules/HeadingA.js\n\nimport React from 'react';\nimport styles from './HeadingA.module.css';\n\nfunction HeadingA() {\n  return (\n    <h1 className={styles.heading}>Heading A</h1>\n  );\n}\n\nexport default HeadingA;\n```\n\n```css\n/* ./src/css-modules/HeadingA.module.css */\n\n.heading {\n  color: green;\n}\n```\n\n```js\n// ./src/css-modules/HeadingB.js\n\nimport React from 'react';\nimport styles from './HeadingB.module.css';\n\nfunction HeadingB() {\n  return (\n    <h1 className={styles.heading}>Heading B</h1>\n  );\n}\n\nexport default HeadingB;\n```\n\n```css\n/* ./src/css-modules/HeadingB.module.css */\n\n.heading {\n  color: red;\n}\n```\n\nNotice how the `.heading` CSS class name is being used within each component to\nset the color of the `<h1>` element. For the `HeadingA` component, the color is\n`green`, and for the `HeadingB` component, the color is `red`. Using the file\nnaming convention `[name].module.css` let's Create React App know that we want\nthese stylesheets to be processed as CSS Modules. Using CSS Modules allows the\n`.heading` class name to be reused across components without any issue. \n\nTo see this feature in action, update your `App` component to render both of\nyour new components:\n\n```js\nimport React from 'react';\nimport HeadingA from './css-modules/HeadingA';\nimport HeadingB from './css-modules/HeadingB';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Exploring React Builds</h1>\n      <HeadingA />\n      <HeadingB />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThen run your application (`npm start`) to see \"Heading A\" and \"Heading B\"\ndisplayed respectively in green and red. If you use the browser's developer\ntools to inspect \"Heading A\", you'll see that the `.heading` class name has been\nmodified so that it's unique to the `HeadingA` component:\n\n![react builds css modules]\n\nCSS Modules is an example of how a front-end build process can be used to modify\ncode to enable a feature that's not natively supported by browsers.\n\n## Phase 2: Using an image in a component\n\nCreate React App configures webpack with support for loading images (as well as\nCSS, fonts, and other file types). What this means, for you as the developer, is\nthat you can add an image file to your project, import it directly into a\nmodule, and render it in a React component.\n\nDownload any image of off the Web or [click here][react builds cat] to download\nthe below image.\n\n![react builds cat]\n\nThen within the `src` folder add a new folder named `image`. Within that folder\nadd a new component file named `Image.js`. Also add your downloaded image file\nto the `image` folder (so it's a sibling to the `Image.js` file).\n\nUpdate the contents of the `Image.js` file to this:\n\n```js\n// ./src/image/Image.js\n\nimport React from 'react';\nimport cat from './react-builds-cat.png';\n\nconsole.log(cat); // /static/media/react-builds-cat.45f7f4d2.png\n\nfunction Image() {\n  // Import result is the URL of your image.\n  return <img src={cat} alt=\"Cat\" />;\n}\n\nexport default Image;\n```\n\nYou can import an image into a component using the `import` keyword. This tells\nwebpack to include the image in the build. Notice that when you import an image\ninto a module, you'll get a path to the image's location within the build. You\ncan use this path to set the `src` attribute on an `<img>` element.\n\n> Be sure to update the image `import` statement to the correct file name if\n> you're using your own image!\n\nNow update the `App` component to import and render the `Image` component:\n\n```js\n// ./src/App.js\n\nimport React from 'react';\nimport HeadingA from './css-modules/HeadingA';\nimport HeadingB from './css-modules/HeadingB';\nimport Image from './image/Image';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Exploring React Builds</h1>\n      <HeadingA />\n      <HeadingB />\n      <Image />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIf you run your application (`npm start`) you'll see your image displayed on the\npage! You can also open your browser's developer tools and view the \"Sources\"\nfor the current page. If you can expand the `localhost:3000` > `static` >\n`media` node on the left, you can see the image file that webpack copied to your\nbuild.\n\n![react builds dev tools image]\n\n### Images in stylesheets\n\nYou can also reference images in your CSS files too. Add a CSS file named\n`Image.css` to the `./src/image` folder and update its contents to this:\n\n```css\n/* ./src/image/Image.css */\n\n.cat {\n  background-image: url(./react-builds-cat.png);\n  width: 400px;\n  height: 400px;\n}\n```\n\nThen update the `Image` component to this:\n\n```js\n// ./src/image/Image.js\n\nimport React from 'react';\nimport './Image.css';\nimport cat from './react-builds-cat.png';\n\nconsole.log(cat); // /static/media/react-builds-cat.45f7f4d2.png\n\nfunction Image() {\n  return (\n    <div>\n      {/* Import result is the URL of your image. */}\n      <img src={cat} alt=\"Cat\" />\n      <div className='cat'></div>\n    </div>\n  );\n}\n\nexport default Image;\n```\n\nNow you'll see the image displayed twice on the page!\n\n## Phase 3: Updating the supported browsers (and its affect on code transpilation)\n\nEarlier you learned about the `browerslist` setting in the `package.json` file\nand now adjusting these targets affect how your code will be transpiled:\n\n```json\n{\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\nThe `production` list specifies the browsers to target when creating a\nproduction build and the `development` list specifics the browsers to target\nwhen running the application using `npm start`. Currently, you're targeting\nrelatively recent versions of the major browsers when creating a development\nbuild. Targeting older browser versions results in your code being transpiled to\nan older version of JavaScript.\n\nTo experiment with this configuration option, let's add a class component to the\nproject. Add a new folder named `class-component` to the `src` folder. Within\nthat folder, add a file named `ClassComponent.js` containing the following code:\n\n```js\n// ./src/class-component/ClassComponent.js\n\nimport React from 'react';\n\nclass ClassComponent extends React.Component {\n  render() {\n    return (\n      <h1>Class Component</h1>\n    );\n  }\n}\n\nexport default ClassComponent;\n```\n\nDon't forget to update your `App` component to render the new component:\n\n```js\n// ./src/App.js\n\nimport React from 'react';\nimport HeadingA from './css-modules/HeadingA';\nimport HeadingB from './css-modules/HeadingB';\nimport Image from './image/Image';\nimport ClassComponent from './class-component/ClassComponent';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Exploring React Builds</h1>\n      <HeadingA />\n      <HeadingB />\n      <Image />\n      <ClassComponent />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nNow run your application using `npm start`. Open your browser's developer tools\nand view the \"Sources\" for the current page. Expand the `localhost:3000` >\n`static` > `js` node on the left and select the `main.chunk.js` file. Press\n`CMD+F` on macOS or `CTRL+F` on Windows to search the file for \"Class\nComponent\". Here's what the transpiled code looks like for the `ClassComponent`\nclass:\n\n```js\nclass ClassComponent extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {\n  render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 7\n      }\n    }, \"Class Component\");\n  }\n}\n```\n\n> Have you wondered yet why you need to use the developer tools to view the\n> bundles generated by Create React App? Remember that when you run `npm start`,\n> Create React App builds your application using [`webpack-dev-server`]. To keep\n> things as performant as possible, the bundles generated by\n> [`webpack-dev-server`] are stored in memory instead of writing them to the\n> file system.\n\nThe JSX in the component's `render` method has been converted to JavaScript but\nthe `ClassComponent` ES2015 class is left alone. This makes sense though as JSX\nisn't natively supported by any browser while ES2015 classes have been natively\nsupported by browsers for awhile now.\n\nBut what if you need to target a version of a browser that doesn't support\nES2015 classes? You can use the [\"Can I use...\"][caniuse es6 classes] website to\nsee when browsers started supporting ES2105 (or ES6) classes. Starting with\nversion 49, Chrome natively supported classes. But imagine that you need to\nsupport Chrome going back to version 30, a version of Chrome that doesn't\nsupport classes.\n\nChange the `browserslist.development` property in the `package.json` file to\nthis:\n\n```json\n{\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"chrome >= 30\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\nThe query `chrome >= 30` specifies that you want to target Chrome version 30 or\nnewer.\n\n> The [browserl.ist] website can be used to see the browsers supported by your\n> configured `browserslist`.\n\nStop your application if it's currently running. Delete the\n`./node_modules/.cache` folder and run `npm start` again. Then view the\n`main.chunk.js` bundle again in the developer tools:\n\n![react builds transpilation]\n\nNow your ES2015 class component is being converted to a constructor function!\nHere's the transpiled code for reference:\n\n```js\nvar ClassComponent = /*#__PURE__*/function (_React$Component) {\n  Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ClassComponent, _React$Component);\n\n  var _super = Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ClassComponent);\n\n  function ClassComponent() {\n    Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, ClassComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(ClassComponent, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 7\n        }\n      }, \"Class Component\");\n    }\n  }]);\n\n  return ClassComponent;\n}(react__WEBPACK_IMPORTED_MODULE_4___default.a.Component);\n```\n\nLuckily it's very rare that you'll need to read the code in your generated\nbundles. webpack, by default, is configured to generate sourcemaps. Sourcemaps\nare a mapping of the code in a generated file, like a bundle file, to the\noriginal source code. This gives you access to your original source code in the\nbrowser's developer tools:\n\n![react builds sourcemaps]\n\nYou can even set a breakpoint in your source within the developer tools to stop\nexecution on a specific line of code!\n\n## Phase 4: Adding environment variables\n\nEarlier you learned that Create React App supports defining environment\nvariables in an `.env` file. This gives you a convenient way to avoid hard\ncoding values that vary across environments.\n\nLet's experiment with this feature so that you can see how the Create React App\nbuild process embeds environment variables into your HTML, CSS, and JavaScript\nbundles.\n\nAdd an `.env` file to the root of your Create React App project. Define an\nenvironment variable named `REACT_APP_TITLE`:\n\n```\nREACT_APP_TITLE=Exploring React Builds\n```\n\nRemember that environment variables need to be prefixed with `REACT_APP_` for\nCreate React App to process them. After defining your environment variable,\nyou can refer to it within JSX using an expression and `process.env`:\n\n```js\n// ./src/App.js\n\nimport React from 'react';\nimport HeadingA from './css-modules/HeadingA';\nimport HeadingB from './css-modules/HeadingB';\nimport Image from './image/Image';\nimport ClassComponent from './class-component/ClassComponent';\n\nfunction App() {\n  return (\n    <div>\n      <h1>{process.env.REACT_APP_TITLE}</h1>\n      <HeadingA />\n      <HeadingB />\n      <Image />\n      <ClassComponent />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nEnvironment variables can also be referred to in regular JavaScript code:\n\n```js\nconsole.log(process.env.REACT_APP_TITLE);\n```\n\nYou can also reference environment variables in your `./public/index.html` file\nlike this:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>%REACT_APP_TITLE%</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\nRun your application again using `npm start`. Open your browser's developer\ntools and view the \"Sources\" for the current page. Expand the `localhost:3000`\nnode on the left and select `(index)`. Notice that the text `%REACT_APP_TITLE%`\nwithin the `<title>` element has been converted to the text literal `Exploring\nReact Builds`:\n\n![react builds index html]\n\nIf you expand the `localhost:3000` > `static` > `js` node on the left and select\nthe `main.chunk.js` file, you can see how the `App` component's JSX has been\nconverted to JavaScript:\n\n![react builds component env var]\n\nHere's a closer look at the relevant `React.createElement` method call:\n\n```js\n/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, \"Exploring React Builds\")\n```\n\nAgain, notice how the environment variable has been replaced with a text\nliteral. This has important security implications for you to consider. Because\nenvironment variables are embedded into your HTML, CSS, and JavaScript bundles\nduring the build process, it's _very important_ to not store any secrets, like\nAPI keys, in your environment variables. Remember, anyone can view your bundled\ncode in the browser by inspecting your files!\n\n## Phase 5: Deploying a production build\n\nIn the last phase of this project, let's add routing to the React application,\ncreate a production build, and deploy the build to an Express application!\n\n### Adding routing\n\nTo add React Router to the application, start by installing the\n`react-router-dom` npm package:\n\n```sh\nnpm install react-router-dom@^5.0.0\n```\n\nThen update the `App` component to this code:\n\n```js\n// ./src/App.js\n\nimport React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport HeadingA from './css-modules/HeadingA';\nimport HeadingB from './css-modules/HeadingB';\nimport Image from './image/Image';\nimport ClassComponent from './class-component/ClassComponent';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <h1>{process.env.REACT_APP_TITLE}</h1>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/image\">Image</Link>\n            </li>\n            <li>\n              <Link to=\"/class-component\">Class Component</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/image\">\n            <Image />\n          </Route>\n          <Route path=\"/class-component\">\n            <ClassComponent />\n          </Route>\n          <Route path=\"/\">\n            <HeadingA />\n            <HeadingB />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n```\n\nBe sure to run and test your application to ensure that the defined routes work\nas expected:\n\n* `/` - Should display the `HeadingA` and `HeadingB` components;\n* `/image` - Should display the `Image` component; and\n* `/class-component` - Should display the `ClassComponent` component.\n\n### Creating a production build\n\nTo create a production build, run the command `npm run build` from the root of\nyour project. The output in the terminal should look something like this:\n\n```sh\n> solution@0.1.0 build [absolute path to your project]\n> react-scripts build\n\nCreating an optimized production build...\nCompiled successfully.\n\nFile sizes after gzip:\n\n  47.83 KB  build/static/js/2.722c16c4.chunk.js\n  773 B     build/static/js/runtime-main.b7d1e5ee.js\n  745 B     build/static/js/main.12299197.chunk.js\n  197 B     build/static/css/main.e9a0d1f8.chunk.css\n\nThe project was built assuming it is hosted at /.\nYou can control this with the homepage field in your package.json.\n\nThe build folder is ready to be deployed.\nYou may serve it with a static server:\n\n  npm install -g serve\n  serve -s build\n\nFind out more about deployment here:\n\n  bit.ly/CRA-deploy\n```\n\n**Ignore the comments about using `serve` to deploy your application (i.e. `npm\ninstall -g serve` and `serve -s build`).** In the next step, you'll create a\nsimple Express application to server your React application.\n\n### Serving a React application using Express\n\nCreate a new folder for your Express application outside of the Create React App\nproject folder.\n\n> For example, from the root of your project, use `cd ..` to go up a level and\n> then create a new folder named `express-server` by running the command `mkdir\n> express-server`. This makes the `express-server` folder a sibling to your\n> Create React App project folder.\n\nBrowse into the `express-server` folder and initialize it to use npm (i.e.\n`npm init -y`). Then install Express by running the command\n`npm install express@^4.0.0`.\n\nApp a file named `app.js` with the following contents:\n\n```js\n// ./app.js\n\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('*', function(req, res) {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\nconst port = 9000;\n\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n```\n\nThis simple Express application will:\n\n* Attempt to match incoming requests to static files located in the `public`\n  folder; and\n* If a matching static file isn't found, then the `./public/index.html` file\n  will be served for all other requests.\n\nNow add a folder named `public` to the root of your Express project. Copy the\nfiles from the `build` folder in your Create React App project to the `public`\nfolder in the Express application project. Then run your application using the\ncommand `node app.js`.\n\nOpen a browser and browse to the URL `http://localhost:9000/`. You should see\nyour React application served from your Express application! Be sure to click\nthe navigation links to verify that all of your configured routes work as\nexpected.\n\nAlso, because you configured Express to serve the `./public/index.html` file for\nany request that doesn't match a static file, you can \"deep link\" to any of your\nReact application's routes:\n\n* [http://localhost:9000/image][image link]\n* [http://localhost:9000/class-component][class component link]\n\n[create-react-app]: https://github.com/facebook/create-react-app\n[react builds cat]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-cat.png\n[react builds dev tools image]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-dev-tools-image.png\n[react builds css modules]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-css-modules.png\n[css modules]: https://github.com/css-modules/css-modules\n[`webpack-dev-server`]: https://webpack.js.org/configuration/dev-server/\n[browserl.ist]: https://browserl.ist\n[caniuse es6 classes]: https://caniuse.com/#feat=es6-class\n[react builds transpilation]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-transpilation.png\n[react builds sourcemaps]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-sourcemaps.png\n[react builds index html]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-index-html.png\n[react builds component env var]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-component-env-var.png\n[image link]: http://localhost:9000/image\n[class component link]: http://localhost:9000/class-component\n"
  },
  "success": true
}