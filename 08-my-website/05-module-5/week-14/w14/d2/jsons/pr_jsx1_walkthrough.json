{
  "template": {
    "taskId": "3636aea4-d5d8-45f7-8b1d-cbad4eeb4d50",
    "name": "JSX Walk-Through Practice (Part 1)",
    "repo": "Modular-Curriculum",
    "path": "content/react-redux/topics/intro-to-react/projects/pet-detail-page-jsx/README-01-v2-introduction.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "jsx-walk-through-part-1"
    ],
    "topic": "Tuesday - React!",
    "subtopic": "JSX Project",
    "body": "# JSX Walk-Through: Create React App\n\nYou will use the analysis presented in _Thinking In Components_ in this\nwalk-through. Here's the image of the final breakdown. It shows components\nthat will be named\n\n* `PetDetailPage`\n* `Navigation`\n* `PetDetails`\n* `PetDetailList`\n* `PetInformationItem`\n* `OwnersList`\n* `OwnerLink`\n\n![Petrack component analysis]\n\nAt the end of this walk-through, you will have reproduced this page using JSX,\n`React.render`, and an AJAX call.\n\nSince you're using JSX, you will use a common tool set to work with this, a\nfancy tool set that does things like automatically refresh your browser for you\nwhen you make changes!\n\n## Getting started\n\nIf you haven't already, install the [React DevTools for Google Chrome].\n\n![React DevTools for Google Chrome screenshot]\n\nNow, you will use the _Create React App_ tool to generate a skeleton project for\nyou that uses a whole bunch of tools that makes your development easier. Open up\na Terminal and change directory to a place where you want the project directory\ncreated. Then, execute the following command.\n\n```shell\nnpx create-react-app pet-detail-page-jsx\n```\n\nThis will create a React application for you that can understand JSX. It may\ntake a long while for it to finish creating the project and installing the\ndependencies. (At the time of this writing, it will end up installing 1030\npackages in the **node_modules** directory.)\n\nOnce it finishes, change the working directory into the newly created\n**pet-detail-page-jsx** directory. Initialize the project directory as a Git\nrepository. Notice that _Create React App_ has already generated a `.gitignore`\nfile for you.\n\n**Pro-Tip**: After every step that you get something to work, take a moment to\nadd and commit those changes to your repository. That way, if you make some\nchanges on some step that really messes things up, you can go back to the last\nbest commit using `git restore .` or `git checkout -- .` This is a _great_ way\nto not have to worry about messing something up so much that you can't _Undo_\nyour way out of it.\n\nNext, open the code in Visual Studio Code. Once that opens, type `npm start`.\nThat will start the application for you and open up a new tab (or window) in\nGoogle Chrome to show you the default page.\n\n![Default create-react-app application]\n\nWow! Look at that neat thing spin.\n\n## Project layout\n\nIgnoring the **node_modules** directory and its 1000+ subdirectories, here is\nwhat the _Create React App_ tool generated for you.\n\n```\npet-detail-page-jsx\n├── README.md             A generic README for a generated project\n├── package-lock.json     The package lock file\n├── package.json          The package.json file\n├── public                A directory to contain static images\n│   ├── favicon.ico       The fancy icon to show up in the tab\n│   ├── index.html        The skeleton HTML file React will put its DOM into\n│   ├── logo192.png       A small version of the React logo\n│   ├── logo512.png       A larger version of the React logo\n│   ├── manifest.json     A manifest file for mobile device screen shortcuts\n│   └── robots.txt        A robots.txt file\n└── src\n    ├── App.css           The App component's CSS\n    ├── App.js            The App component\n    ├── App.test.js       Test for the App component\n    ├── index.css         CSS for the entire site\n    ├── index.js          The code the renders the App component\n    ├── logo.svg          The fancy spinning React logo\n    ├── serviceWorker.js  A service worker for React apps\n    └── setupTests.js     A file to set up tests\n```\n\nAs you make more and more React projects with Create React App during the\nupcoming projects, more and more will be revealed to you about how to use these\ngenerated files.\n\nYou should do what the instructions tell you and try editing some of the files.\n(You're going to see some weird stuff in those files. There are some\nexplanations for the weird stuff in the next section.) Open the **src/App.js**\nfile and edit and save it. Watch the browser change with it. Take a look around\nthe generated files.\n\nWhen you finish with playing around with styles and components, stop the\napplication running in your terminal.\n\n## Important observations\n\nBecause the tools that _Create React App_ installed are making JavaScript for\nyou from the JSX files, all of the JSX files are getting read and bundled\nup into other JavaScript files that are sent to the browser. What you write in\nall of the JavaScript files in the **src** directory are _not_ the files that\nare sent to the browser.\n\nThe _Create React App_ tool created a project for you that uses a tool called\n[Webpack]. Webpack reads a bunch of different types of files, CSS, images,\nJavaScript, and bundles them up _into_ JavaScript files.\n\nIf you look inside **src/index.js**, you'll see this statement.\n\n```js\nimport './index.css';\n```\n\nThat doesn't make _ANY SENSE_! That's because the **src/index.js** file is _not_\nwhat the browser sees. Instead, Webpack figures out that the file imports the\nCSS file **src/index.css**, reads all of that CSS, turns it _into JavaScript_,\nand removes that import statement from what it will send to your browser.\n\nTry typing `npm run build`. That will create a **build** directory. If you look\ninside **build/static/js**, you will see the files that Webpack creates to send\nto the browser. They're named things like **2.7caf6610.chunk.js** and\n**main.b875719a.chunk.js**. That's what Webpack sends to the browser, not your\nlovely **index.js**.\n\n**MAGIC!**\n\nNot really. But, if you see an import in the JavaScript files that doesn't make\nsense, like importing the **logo.svg** file, that's what's going on.\n\nAnother thing to note is that the imports for other components _do not end with\n.js_. That's because Webpack is smart enough to know that you mean a JavaScript\nfile because, when it is building the stuff that it will send to the browser, it\ncan _see_ all of the files in the directories and figure out which ones are\nreferenced by the `import` statement.\n\nThe browser can't do that because it could be on the other side of the world\nfrom where the Web server is. That's why, in ES modules in the browser, you have\nto specify the **.js** extension, so the browser can _get_ the correct resource\nfrom the server.\n\n## Clean up the cruft\n\nIt's time to get rid of the stuff you won't need for this exercise. Delete the\nfollowing files:\n\n* In the **public** directory:\n  * **logo192.png**\n  * **logo512.png**\n  * **robots.txt** (If you'd like to know more about what this files does, [here's a link].)\n* In the **src** directory:\n  * **App.css**\n  * **App.test.js** (You will learn more about testing later.)\n  * **logo.svg**\n  * **serviceWorker.js**\n  * **setupTests.js**\n* In the top-level directory:\n  * **README.md**\n\nBecause you deleted those files, the application will not build, now. If you try\nrunning it with `npm start`, you should see some an error about **App.css**\nmissing. Open up **src/App.js** and remove the following lines.\n\n* `import logo from './logo.svg';`\n* `import './App.css';`\n\nThen, delete everything between the parentheses of the `return` statement and\nreplace it with some JSX that shows an `h1` element with the message \"Hello\".\nYour edits should result in a file that has this content.\n\n```jsx\nimport React from 'react';\n\nfunction App() {\n  return (\n    <h1>Hello</h1>\n  );\n}\n\nexport default App;\n```\n\nWhen you save that file, it will try to build your project, again, and this time\ncomplain about the missing **serviceWorker** file. Open up **src/index.js** and\nremove the lines\n\n* `import * as serviceWorker from './serviceWorker';`\n* `serviceWorker.unregister();`\n\nYou can delete the big comment at the bottom of the file, too, because it will\nno longer be relevant. When you complete those edits, you should now see \"Hello\"\nin the browser. The **index.js** file should look like this.\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nAt this point, things will build, but you'll still see an error in your\nbrowser's DevTools complaining about the missing **logo192.png** file. Open up\n**public/manifest.json** and remove the icons property and the array that is its\nvalue. Also, change the short name to \"Petrack\" and the name to \"Petrack\". Save\nthat. The error in the console should go away. The manifest file should look\nlike this, now.\n\n```json\n{\n  \"short_name\": \"Petrack\",\n  \"name\": \"Petrack\",\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\nThe title of the Web page still reads \"React App\". To change that, open up the\n**public/index.html** file and update the `title` element to read \"Petrack\".\n\nGo ahead and initialize a Git repository, add, and commit your files. This is\nthe baseline. From here on out, you can modify files with impunity!\n\n## Set site-wide styles\n\nIn the file **src/index.css**, replace all of its contents with this.\n\n```css\nbody {\n  padding: 50px;\n  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;\n}\n\na {\n  color: #00B7FF;\n}\n\nlabel {\n  display: block;\n  margin-bottom: .5em;\n}\n\ninput {\n  display: block;\n  margin-bottom: 1em;\n}\n```\n\nNow, it's time to get the pet details page working.\n\n## What you've learned\n\nIn this, you were able to create a new React application with lots of tools\nusing the _Create React App_ command-line tool. You then deleted a bunch of\nnon-JavaScript and JavaScript files that you didn't need. You learned that by\ndoing that, you broke the build because Webpack, the tool that _Create React\nApp_ uses to bundle files, can read more than just JavaScript files; it can\nread CSS files, images, and more.\n\n\n[Petrack component analysis]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/pettrack-pet-detail-all-components-with-details-list.png\n[React DevTools for Google Chrome]: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\n[React DevTools for Google Chrome screenshot]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/react-devtools.png\n[Default create-react-app application]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/assets/create-react-app-default-app.png\n[link to the solution]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/intro-to-react/projects/solutions/pet-detail-page-jsx-solution-20200407.zip\n[here's a link]: https://en.wikipedia.org/wiki/Robots_exclusion_standard\n[Webpack]: https://webpack.js.org/\n"
  },
  "success": true
}